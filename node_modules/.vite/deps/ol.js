import {
  Graticule_default
} from "./chunk-LY6N2SJT.js";
import "./chunk-JJ7XJAOC.js";
import {
  Kinetic_default,
  MapBrowserEventHandler_default,
  MapBrowserEvent_default,
  MapEvent_default,
  Map_default
} from "./chunk-FKQ3HI6Y.js";
import "./chunk-WCDQZRRL.js";
import {
  Overlay_default
} from "./chunk-BCNFUK7K.js";
import "./chunk-7RVICDYG.js";
import {
  VectorRenderTile_default,
  VectorTile_default
} from "./chunk-TDWOVRNZ.js";
import {
  TileCache_default
} from "./chunk-WIZHZD75.js";
import {
  ImageCanvas_default
} from "./chunk-MACOPI4V.js";
import {
  ImageTile_default,
  TileRange_default,
  Tile_default
} from "./chunk-GQLCXK7S.js";
import {
  Feature_default
} from "./chunk-JH7KCDRH.js";
import {
  TileQueue_default
} from "./chunk-5CDOY6JX.js";
import {
  Collection_default
} from "./chunk-A6EOKI3F.js";
import "./chunk-F5472VLO.js";
import "./chunk-KRPKFDBU.js";
import "./chunk-VBNNVTGU.js";
import "./chunk-FPMZAOVS.js";
import {
  Image_default
} from "./chunk-CYFTH6XG.js";
import "./chunk-RFPLYBT4.js";
import "./chunk-5JVGRBF3.js";
import "./chunk-DCDS2JOC.js";
import {
  View_default
} from "./chunk-757XBZ6T.js";
import {
  circular
} from "./chunk-JBPPYMMT.js";
import "./chunk-OYWP22YX.js";
import "./chunk-7L7NF2XM.js";
import "./chunk-ZTZDLMTS.js";
import "./chunk-WTNQDVSP.js";
import {
  get,
  getTransformFromProjections,
  identityTransform
} from "./chunk-YLFQIOMQ.js";
import "./chunk-LDE7QJLP.js";
import {
  toRadians
} from "./chunk-PAQUSFNP.js";
import "./chunk-QFCIXVZ3.js";
import "./chunk-LK4IWN4V.js";
import {
  Disposable_default,
  Event_default,
  Object_default,
  Observable_default,
  VERSION,
  getUid
} from "./chunk-GZKH4AXN.js";
import "./chunk-HUBM7RA2.js";

// node_modules/ol/Geolocation.js
var Property = {
  ACCURACY: "accuracy",
  ACCURACY_GEOMETRY: "accuracyGeometry",
  ALTITUDE: "altitude",
  ALTITUDE_ACCURACY: "altitudeAccuracy",
  HEADING: "heading",
  POSITION: "position",
  PROJECTION: "projection",
  SPEED: "speed",
  TRACKING: "tracking",
  TRACKING_OPTIONS: "trackingOptions"
};
var GeolocationErrorType = {
  ERROR: "error"
};
var GeolocationError = class extends Event_default {
  constructor(error) {
    super(GeolocationErrorType.ERROR);
    this.code = error.code;
    this.message = error.message;
  }
};
var Geolocation = class extends Object_default {
  constructor(options) {
    super();
    this.on;
    this.once;
    this.un;
    options = options || {};
    this.position_ = null;
    this.transform_ = identityTransform;
    this.watchId_ = void 0;
    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);
    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);
    if (options.projection !== void 0) {
      this.setProjection(options.projection);
    }
    if (options.trackingOptions !== void 0) {
      this.setTrackingOptions(options.trackingOptions);
    }
    this.setTracking(options.tracking !== void 0 ? options.tracking : false);
  }
  disposeInternal() {
    this.setTracking(false);
    super.disposeInternal();
  }
  handleProjectionChanged_() {
    const projection = this.getProjection();
    if (projection) {
      this.transform_ = getTransformFromProjections(
        get("EPSG:4326"),
        projection
      );
      if (this.position_) {
        this.set(Property.POSITION, this.transform_(this.position_));
      }
    }
  }
  handleTrackingChanged_() {
    if ("geolocation" in navigator) {
      const tracking = this.getTracking();
      if (tracking && this.watchId_ === void 0) {
        this.watchId_ = navigator.geolocation.watchPosition(
          this.positionChange_.bind(this),
          this.positionError_.bind(this),
          this.getTrackingOptions()
        );
      } else if (!tracking && this.watchId_ !== void 0) {
        navigator.geolocation.clearWatch(this.watchId_);
        this.watchId_ = void 0;
      }
    }
  }
  positionChange_(position) {
    const coords = position.coords;
    this.set(Property.ACCURACY, coords.accuracy);
    this.set(
      Property.ALTITUDE,
      coords.altitude === null ? void 0 : coords.altitude
    );
    this.set(
      Property.ALTITUDE_ACCURACY,
      coords.altitudeAccuracy === null ? void 0 : coords.altitudeAccuracy
    );
    this.set(
      Property.HEADING,
      coords.heading === null ? void 0 : toRadians(coords.heading)
    );
    if (!this.position_) {
      this.position_ = [coords.longitude, coords.latitude];
    } else {
      this.position_[0] = coords.longitude;
      this.position_[1] = coords.latitude;
    }
    const projectedPosition = this.transform_(this.position_);
    this.set(Property.POSITION, projectedPosition.slice());
    this.set(Property.SPEED, coords.speed === null ? void 0 : coords.speed);
    const geometry = circular(this.position_, coords.accuracy);
    geometry.applyTransform(this.transform_);
    this.set(Property.ACCURACY_GEOMETRY, geometry);
    this.changed();
  }
  positionError_(error) {
    this.dispatchEvent(new GeolocationError(error));
  }
  getAccuracy() {
    return this.get(Property.ACCURACY);
  }
  getAccuracyGeometry() {
    return this.get(Property.ACCURACY_GEOMETRY) || null;
  }
  getAltitude() {
    return this.get(Property.ALTITUDE);
  }
  getAltitudeAccuracy() {
    return this.get(Property.ALTITUDE_ACCURACY);
  }
  getHeading() {
    return this.get(Property.HEADING);
  }
  getPosition() {
    return this.get(Property.POSITION);
  }
  getProjection() {
    return this.get(Property.PROJECTION);
  }
  getSpeed() {
    return this.get(Property.SPEED);
  }
  getTracking() {
    return this.get(Property.TRACKING);
  }
  getTrackingOptions() {
    return this.get(Property.TRACKING_OPTIONS);
  }
  setProjection(projection) {
    this.set(Property.PROJECTION, get(projection));
  }
  setTracking(tracking) {
    this.set(Property.TRACKING, tracking);
  }
  setTrackingOptions(options) {
    this.set(Property.TRACKING_OPTIONS, options);
  }
};
var Geolocation_default = Geolocation;
export {
  Collection_default as Collection,
  Disposable_default as Disposable,
  Feature_default as Feature,
  Geolocation_default as Geolocation,
  Graticule_default as Graticule,
  Image_default as Image,
  ImageCanvas_default as ImageCanvas,
  ImageTile_default as ImageTile,
  Image_default as ImageWrapper,
  Kinetic_default as Kinetic,
  Map_default as Map,
  MapBrowserEvent_default as MapBrowserEvent,
  MapBrowserEventHandler_default as MapBrowserEventHandler,
  MapEvent_default as MapEvent,
  Object_default as Object,
  Observable_default as Observable,
  Overlay_default as Overlay,
  Tile_default as Tile,
  TileCache_default as TileCache,
  TileQueue_default as TileQueue,
  TileRange_default as TileRange,
  VERSION,
  VectorRenderTile_default as VectorRenderTile,
  VectorTile_default as VectorTile,
  View_default as View,
  getUid
};
//# sourceMappingURL=ol.js.map
