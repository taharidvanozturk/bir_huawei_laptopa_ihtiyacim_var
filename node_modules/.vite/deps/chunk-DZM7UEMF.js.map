{
  "version": 3,
  "sources": ["../../ol/layer/Group.js"],
  "sourcesContent": ["/**\r\n * @module ol/layer/Group\r\n */\r\nimport BaseLayer from './Base.js';\r\nimport Collection from '../Collection.js';\r\nimport CollectionEventType from '../CollectionEventType.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport {assert} from '../asserts.js';\r\nimport {clear} from '../obj.js';\r\nimport {getIntersection} from '../extent.js';\r\nimport {getUid} from '../util.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\n\r\n/**\r\n * @typedef {'addlayer'|'removelayer'} EventType\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from\r\n * the group or one of its child groups.  When a layer group is added to or removed from another layer group,\r\n * a single event will be triggered (instead of one per layer in the group added or removed).\r\n */\r\nexport class GroupEvent extends Event {\r\n  /**\r\n   * @param {EventType} type The event type.\r\n   * @param {BaseLayer} layer The layer.\r\n   */\r\n  constructor(type, layer) {\r\n    super(type);\r\n\r\n    /**\r\n     * The added or removed layer.\r\n     * @type {BaseLayer}\r\n     * @api\r\n     */\r\n    this.layer = layer;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {Array<import(\"./Base.js\").default>|Collection<import(\"./Base.js\").default>} [layers] Child layers.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  LAYERS: 'layers',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\r\n *\r\n * A generic `change` event is triggered when the group/Collection changes.\r\n *\r\n * @api\r\n */\r\nclass LayerGroup extends BaseLayer {\r\n  /**\r\n   * @param {Options} [options] Layer options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n    const baseOptions = /** @type {Options} */ (Object.assign({}, options));\r\n    delete baseOptions.layers;\r\n\r\n    let layers = options.layers;\r\n\r\n    super(baseOptions);\r\n\r\n    /***\r\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {GroupOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.layersListenerKeys_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */\r\n    this.listenerKeys_ = {};\r\n\r\n    this.addChangeListener(Property.LAYERS, this.handleLayersChanged_);\r\n\r\n    if (layers) {\r\n      if (Array.isArray(layers)) {\r\n        layers = new Collection(layers.slice(), {unique: true});\r\n      } else {\r\n        assert(\r\n          typeof (/** @type {?} */ (layers).getArray) === 'function',\r\n          'Expected `layers` to be an array or a `Collection`'\r\n        );\r\n      }\r\n    } else {\r\n      layers = new Collection(undefined, {unique: true});\r\n    }\r\n\r\n    this.setLayers(layers);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleLayerChange_() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleLayersChanged_() {\r\n    this.layersListenerKeys_.forEach(unlistenByKey);\r\n    this.layersListenerKeys_.length = 0;\r\n\r\n    const layers = this.getLayers();\r\n    this.layersListenerKeys_.push(\r\n      listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),\r\n      listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)\r\n    );\r\n\r\n    for (const id in this.listenerKeys_) {\r\n      this.listenerKeys_[id].forEach(unlistenByKey);\r\n    }\r\n    clear(this.listenerKeys_);\r\n\r\n    const layersArray = layers.getArray();\r\n    for (let i = 0, ii = layersArray.length; i < ii; i++) {\r\n      const layer = layersArray[i];\r\n      this.registerLayerListeners_(layer);\r\n      this.dispatchEvent(new GroupEvent('addlayer', layer));\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {BaseLayer} layer The layer.\r\n   */\r\n  registerLayerListeners_(layer) {\r\n    const listenerKeys = [\r\n      listen(\r\n        layer,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleLayerChange_,\r\n        this\r\n      ),\r\n      listen(layer, EventType.CHANGE, this.handleLayerChange_, this),\r\n    ];\r\n\r\n    if (layer instanceof LayerGroup) {\r\n      listenerKeys.push(\r\n        listen(layer, 'addlayer', this.handleLayerGroupAdd_, this),\r\n        listen(layer, 'removelayer', this.handleLayerGroupRemove_, this)\r\n      );\r\n    }\r\n\r\n    this.listenerKeys_[getUid(layer)] = listenerKeys;\r\n  }\r\n\r\n  /**\r\n   * @param {GroupEvent} event The layer group event.\r\n   */\r\n  handleLayerGroupAdd_(event) {\r\n    this.dispatchEvent(new GroupEvent('addlayer', event.layer));\r\n  }\r\n\r\n  /**\r\n   * @param {GroupEvent} event The layer group event.\r\n   */\r\n  handleLayerGroupRemove_(event) {\r\n    this.dispatchEvent(new GroupEvent('removelayer', event.layer));\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\r\n   * @private\r\n   */\r\n  handleLayersAdd_(collectionEvent) {\r\n    const layer = collectionEvent.element;\r\n    this.registerLayerListeners_(layer);\r\n    this.dispatchEvent(new GroupEvent('addlayer', layer));\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\r\n   * @private\r\n   */\r\n  handleLayersRemove_(collectionEvent) {\r\n    const layer = collectionEvent.element;\r\n    const key = getUid(layer);\r\n    this.listenerKeys_[key].forEach(unlistenByKey);\r\n    delete this.listenerKeys_[key];\r\n    this.dispatchEvent(new GroupEvent('removelayer', layer));\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\r\n   * in this group.\r\n   * @return {!Collection<import(\"./Base.js\").default>} Collection of\r\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getLayers() {\r\n    return /** @type {!Collection<import(\"./Base.js\").default>} */ (\r\n      this.get(Property.LAYERS)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\r\n   * in this group.\r\n   * @param {!Collection<import(\"./Base.js\").default>} layers Collection of\r\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setLayers(layers) {\r\n    const collection = this.getLayers();\r\n    if (collection) {\r\n      const currentLayers = collection.getArray();\r\n      for (let i = 0, ii = currentLayers.length; i < ii; ++i) {\r\n        this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));\r\n      }\r\n    }\r\n\r\n    this.set(Property.LAYERS, layers);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   */\r\n  getLayersArray(array) {\r\n    array = array !== undefined ? array : [];\r\n    this.getLayers().forEach(function (layer) {\r\n      layer.getLayersArray(array);\r\n    });\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Get the layer states list and use this groups z-index as the default\r\n   * for all layers in this and nested groups, if it is unset at this point.\r\n   * If dest is not provided and this group's z-index is undefined\r\n   * 0 is used a the default z-index.\r\n   * @param {Array<import(\"./Layer.js\").State>} [dest] Optional list\r\n   * of layer states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   */\r\n  getLayerStatesArray(dest) {\r\n    const states = dest !== undefined ? dest : [];\r\n    const pos = states.length;\r\n\r\n    this.getLayers().forEach(function (layer) {\r\n      layer.getLayerStatesArray(states);\r\n    });\r\n\r\n    const ownLayerState = this.getLayerState();\r\n    let defaultZIndex = ownLayerState.zIndex;\r\n    if (!dest && ownLayerState.zIndex === undefined) {\r\n      defaultZIndex = 0;\r\n    }\r\n    for (let i = pos, ii = states.length; i < ii; i++) {\r\n      const layerState = states[i];\r\n      layerState.opacity *= ownLayerState.opacity;\r\n      layerState.visible = layerState.visible && ownLayerState.visible;\r\n      layerState.maxResolution = Math.min(\r\n        layerState.maxResolution,\r\n        ownLayerState.maxResolution\r\n      );\r\n      layerState.minResolution = Math.max(\r\n        layerState.minResolution,\r\n        ownLayerState.minResolution\r\n      );\r\n      layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\r\n      layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\r\n      if (ownLayerState.extent !== undefined) {\r\n        if (layerState.extent !== undefined) {\r\n          layerState.extent = getIntersection(\r\n            layerState.extent,\r\n            ownLayerState.extent\r\n          );\r\n        } else {\r\n          layerState.extent = ownLayerState.extent;\r\n        }\r\n      }\r\n      if (layerState.zIndex === undefined) {\r\n        layerState.zIndex = defaultZIndex;\r\n      }\r\n    }\r\n\r\n    return states;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   */\r\n  getSourceState() {\r\n    return 'ready';\r\n  }\r\n}\r\n\r\nexport default LayerGroup;\r\n"],
  "mappings": "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",
  "names": []
}
