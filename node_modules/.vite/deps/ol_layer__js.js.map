{
  "version": 3,
  "sources": ["../../earcut/src/earcut.js", "../../ol/expr/expression.js", "../../ol/expr/cpu.js", "../../ol/render/canvas/style.js", "../../ol/layer/BaseVector.js", "../../ol/render/canvas/Instruction.js", "../../ol/render/VectorContext.js", "../../ol/render/canvas/Builder.js", "../../ol/render/canvas/ImageBuilder.js", "../../ol/render/canvas/LineStringBuilder.js", "../../ol/render/canvas/PolygonBuilder.js", "../../ol/geom/flat/linechunk.js", "../../ol/geom/flat/straightchunk.js", "../../ol/render/canvas/TextBuilder.js", "../../ol/render/canvas/BuilderGroup.js", "../../ol/geom/flat/textpath.js", "../../ol/render/canvas/Executor.js", "../../ol/render/canvas/ExecutorGroup.js", "../../ol/render/canvas/Immediate.js", "../../ol/render/canvas/hitdetect.js", "../../ol/renderer/vector.js", "../../ol/renderer/canvas/VectorLayer.js", "../../ol/layer/Vector.js", "../../ol/render.js", "../../ol/geom/flat/geodesic.js", "../../ol/layer/Graticule.js", "../../ol/webgl.js", "../../ol/webgl/Buffer.js", "../../ol/webgl/ContextEventType.js", "../../ol/webgl/PostProcessingPass.js", "../../ol/vec/mat4.js", "../../ol/webgl/Helper.js", "../../ol/renderer/webgl/Layer.js", "../../ol/webgl/RenderTarget.js", "../../ol/render/webgl/constants.js", "../../ol/render/webgl/utils.js", "../../ol/worker/webgl.js", "../../ol/renderer/webgl/PointsLayer.js", "../../ol/webgl/PaletteTexture.js", "../../ol/webgl/BaseTileRepresentation.js", "../../ol/webgl/TileTexture.js", "../../ol/renderer/webgl/TileLayerBase.js", "../../ol/renderer/webgl/TileLayer.js", "../../ol/style/expressions.js", "../../ol/style/flat.js", "../../ol/webgl/ShaderBuilder.js", "../../ol/layer/Heatmap.js", "../../ol/renderer/canvas/VectorImageLayer.js", "../../ol/layer/VectorImage.js", "../../ol/renderer/canvas/VectorTileLayer.js", "../../ol/layer/VectorTile.js", "../../ol/webgl/styleparser.js", "../../ol/layer/WebGLPoints.js", "../../ol/layer/WebGLTile.js"],
  "sourcesContent": ["'use strict';\r\n\r\nmodule.exports = earcut;\r\nmodule.exports.default = earcut;\r\n\r\nfunction earcut(data, holeIndices, dim) {\r\n\r\n    dim = dim || 2;\r\n\r\n    var hasHoles = holeIndices && holeIndices.length,\r\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\r\n        outerNode = linkedList(data, 0, outerLen, dim, true),\r\n        triangles = [];\r\n\r\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\r\n\r\n    var minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\r\n\r\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n    if (data.length > 80 * dim) {\r\n        minX = maxX = data[0];\r\n        minY = maxY = data[1];\r\n\r\n        for (var i = dim; i < outerLen; i += dim) {\r\n            x = data[i];\r\n            y = data[i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n        }\r\n\r\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n        invSize = Math.max(maxX - minX, maxY - minY);\r\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\r\n    }\r\n\r\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\r\n\r\n    return triangles;\r\n}\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList(data, start, end, dim, clockwise) {\r\n    var i, last;\r\n\r\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\r\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    } else {\r\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    }\r\n\r\n    if (last && equals(last, last.next)) {\r\n        removeNode(last);\r\n        last = last.next;\r\n    }\r\n\r\n    return last;\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints(start, end) {\r\n    if (!start) return start;\r\n    if (!end) end = start;\r\n\r\n    var p = start,\r\n        again;\r\n    do {\r\n        again = false;\r\n\r\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\r\n            removeNode(p);\r\n            p = end = p.prev;\r\n            if (p === p.next) break;\r\n            again = true;\r\n\r\n        } else {\r\n            p = p.next;\r\n        }\r\n    } while (again || p !== end);\r\n\r\n    return end;\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\r\n    if (!ear) return;\r\n\r\n    // interlink polygon nodes in z-order\r\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\r\n\r\n    var stop = ear,\r\n        prev, next;\r\n\r\n    // iterate through ears, slicing them one by one\r\n    while (ear.prev !== ear.next) {\r\n        prev = ear.prev;\r\n        next = ear.next;\r\n\r\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\r\n            // cut off the triangle\r\n            triangles.push(prev.i / dim | 0);\r\n            triangles.push(ear.i / dim | 0);\r\n            triangles.push(next.i / dim | 0);\r\n\r\n            removeNode(ear);\r\n\r\n            // skipping the next vertex leads to less sliver triangles\r\n            ear = next.next;\r\n            stop = next.next;\r\n\r\n            continue;\r\n        }\r\n\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n        if (ear === stop) {\r\n            // try filtering points and slicing again\r\n            if (!pass) {\r\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\r\n\r\n            // if this didn't work, try curing all small self-intersections locally\r\n            } else if (pass === 1) {\r\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\r\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\r\n\r\n            // as a last resort, try splitting the remaining polygon into two\r\n            } else if (pass === 2) {\r\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar(ear) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\r\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\r\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\r\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\r\n\r\n    var p = c.next;\r\n    while (p !== a) {\r\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.next;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction isEarHashed(ear, minX, minY, invSize) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\r\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\r\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\r\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\r\n\r\n    // z-order range for the current triangle bbox;\r\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\r\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\r\n\r\n    var p = ear.prevZ,\r\n        n = ear.nextZ;\r\n\r\n    // look for points inside the triangle in both directions\r\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\r\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n\r\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\r\n        n = n.nextZ;\r\n    }\r\n\r\n    // look for remaining points in decreasing z-order\r\n    while (p && p.z >= minZ) {\r\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n    }\r\n\r\n    // look for remaining points in increasing z-order\r\n    while (n && n.z <= maxZ) {\r\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\r\n        n = n.nextZ;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections(start, triangles, dim) {\r\n    var p = start;\r\n    do {\r\n        var a = p.prev,\r\n            b = p.next.next;\r\n\r\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\r\n\r\n            triangles.push(a.i / dim | 0);\r\n            triangles.push(p.i / dim | 0);\r\n            triangles.push(b.i / dim | 0);\r\n\r\n            // remove two nodes involved\r\n            removeNode(p);\r\n            removeNode(p.next);\r\n\r\n            p = start = b;\r\n        }\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return filterPoints(p);\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    var a = start;\r\n    do {\r\n        var b = a.next.next;\r\n        while (b !== a.prev) {\r\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\r\n                // split the polygon in two by the diagonal\r\n                var c = splitPolygon(a, b);\r\n\r\n                // filter colinear points around the cuts\r\n                a = filterPoints(a, a.next);\r\n                c = filterPoints(c, c.next);\r\n\r\n                // run earcut on each half\r\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\r\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\r\n                return;\r\n            }\r\n            b = b.next;\r\n        }\r\n        a = a.next;\r\n    } while (a !== start);\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\r\n    var queue = [],\r\n        i, len, start, end, list;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n        start = holeIndices[i] * dim;\r\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n        list = linkedList(data, start, end, dim, false);\r\n        if (list === list.next) list.steiner = true;\r\n        queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX);\r\n\r\n    // process holes from left to right\r\n    for (i = 0; i < queue.length; i++) {\r\n        outerNode = eliminateHole(queue[i], outerNode);\r\n    }\r\n\r\n    return outerNode;\r\n}\r\n\r\nfunction compareX(a, b) {\r\n    return a.x - b.x;\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\nfunction eliminateHole(hole, outerNode) {\r\n    var bridge = findHoleBridge(hole, outerNode);\r\n    if (!bridge) {\r\n        return outerNode;\r\n    }\r\n\r\n    var bridgeReverse = splitPolygon(bridge, hole);\r\n\r\n    // filter collinear points around the cuts\r\n    filterPoints(bridgeReverse, bridgeReverse.next);\r\n    return filterPoints(bridge, bridge.next);\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge(hole, outerNode) {\r\n    var p = outerNode,\r\n        hx = hole.x,\r\n        hy = hole.y,\r\n        qx = -Infinity,\r\n        m;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n    do {\r\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\r\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\r\n            if (x <= hx && x > qx) {\r\n                qx = x;\r\n                m = p.x < p.next.x ? p : p.next;\r\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\r\n            }\r\n        }\r\n        p = p.next;\r\n    } while (p !== outerNode);\r\n\r\n    if (!m) return null;\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    var stop = m,\r\n        mx = m.x,\r\n        my = m.y,\r\n        tanMin = Infinity,\r\n        tan;\r\n\r\n    p = m;\r\n\r\n    do {\r\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\r\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n\r\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n            if (locallyInside(p, hole) &&\r\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\r\n                m = p;\r\n                tanMin = tan;\r\n            }\r\n        }\r\n\r\n        p = p.next;\r\n    } while (p !== stop);\r\n\r\n    return m;\r\n}\r\n\r\n// whether sector in vertex m contains sector in vertex p in the same coordinates\r\nfunction sectorContainsSector(m, p) {\r\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve(start, minX, minY, invSize) {\r\n    var p = start;\r\n    do {\r\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked(p);\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked(list) {\r\n    var i, p, q, e, tail, numMerges, pSize, qSize,\r\n        inSize = 1;\r\n\r\n    do {\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while (p) {\r\n            numMerges++;\r\n            q = p;\r\n            pSize = 0;\r\n            for (i = 0; i < inSize; i++) {\r\n                pSize++;\r\n                q = q.nextZ;\r\n                if (!q) break;\r\n            }\r\n            qSize = inSize;\r\n\r\n            while (pSize > 0 || (qSize > 0 && q)) {\r\n\r\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\r\n                    e = p;\r\n                    p = p.nextZ;\r\n                    pSize--;\r\n                } else {\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                }\r\n\r\n                if (tail) tail.nextZ = e;\r\n                else list = e;\r\n\r\n                e.prevZ = tail;\r\n                tail = e;\r\n            }\r\n\r\n            p = q;\r\n        }\r\n\r\n        tail.nextZ = null;\r\n        inSize *= 2;\r\n\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n}\r\n\r\n// z-order of a point given coords and inverse of the longer side of data bbox\r\nfunction zOrder(x, y, minX, minY, invSize) {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = (x - minX) * invSize | 0;\r\n    y = (y - minY) * invSize | 0;\r\n\r\n    x = (x | (x << 8)) & 0x00FF00FF;\r\n    x = (x | (x << 4)) & 0x0F0F0F0F;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n\r\n    y = (y | (y << 8)) & 0x00FF00FF;\r\n    y = (y | (y << 4)) & 0x0F0F0F0F;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n\r\n    return x | (y << 1);\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost(start) {\r\n    var p = start,\r\n        leftmost = start;\r\n    do {\r\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return leftmost;\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\r\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\r\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\r\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal(a, b) {\r\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\r\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\r\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\r\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area(p, q, r) {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals(p1, p2) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects(p1, q1, p2, q2) {\r\n    var o1 = sign(area(p1, q1, p2));\r\n    var o2 = sign(area(p1, q1, q2));\r\n    var o3 = sign(area(p2, q2, p1));\r\n    var o4 = sign(area(p2, q2, q1));\r\n\r\n    if (o1 !== o2 && o3 !== o4) return true; // general case\r\n\r\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\r\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\r\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\r\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\r\n\r\n    return false;\r\n}\r\n\r\n// for collinear points p, q, r, check if point q lies on segment pr\r\nfunction onSegment(p, q, r) {\r\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\r\n}\r\n\r\nfunction sign(num) {\r\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon(a, b) {\r\n    var p = a;\r\n    do {\r\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n                intersects(p, p.next, a, b)) return true;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return false;\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside(a, b) {\r\n    return area(a.prev, a, a.next) < 0 ?\r\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\r\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside(a, b) {\r\n    var p = a,\r\n        inside = false,\r\n        px = (a.x + b.x) / 2,\r\n        py = (a.y + b.y) / 2;\r\n    do {\r\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\r\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\r\n            inside = !inside;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return inside;\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon(a, b) {\r\n    var a2 = new Node(a.i, a.x, a.y),\r\n        b2 = new Node(b.i, b.x, b.y),\r\n        an = a.next,\r\n        bp = b.prev;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode(i, x, y, last) {\r\n    var p = new Node(i, x, y);\r\n\r\n    if (!last) {\r\n        p.prev = p;\r\n        p.next = p;\r\n\r\n    } else {\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        last.next.prev = p;\r\n        last.next = p;\r\n    }\r\n    return p;\r\n}\r\n\r\nfunction removeNode(p) {\r\n    p.next.prev = p.prev;\r\n    p.prev.next = p.next;\r\n\r\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\r\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\r\n}\r\n\r\nfunction Node(i, x, y) {\r\n    // vertex index in coordinates array\r\n    this.i = i;\r\n\r\n    // vertex coordinates\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    // previous and next vertex nodes in a polygon ring\r\n    this.prev = null;\r\n    this.next = null;\r\n\r\n    // z-order curve value\r\n    this.z = 0;\r\n\r\n    // previous and next nodes in z-order\r\n    this.prevZ = null;\r\n    this.nextZ = null;\r\n\r\n    // indicates whether this is a steiner point\r\n    this.steiner = false;\r\n}\r\n\r\n// return a percentage difference between the polygon area and its triangulation area;\r\n// used to verify correctness of triangulation\r\nearcut.deviation = function (data, holeIndices, dim, triangles) {\r\n    var hasHoles = holeIndices && holeIndices.length;\r\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n\r\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n    if (hasHoles) {\r\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\r\n            var start = holeIndices[i] * dim;\r\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n        }\r\n    }\r\n\r\n    var trianglesArea = 0;\r\n    for (i = 0; i < triangles.length; i += 3) {\r\n        var a = triangles[i] * dim;\r\n        var b = triangles[i + 1] * dim;\r\n        var c = triangles[i + 2] * dim;\r\n        trianglesArea += Math.abs(\r\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\r\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n    }\r\n\r\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\r\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n};\r\n\r\nfunction signedArea(data, start, end, dim) {\r\n    var sum = 0;\r\n    for (var i = start, j = end - dim; i < end; i += dim) {\r\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n        j = i;\r\n    }\r\n    return sum;\r\n}\r\n\r\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\r\nearcut.flatten = function (data) {\r\n    var dim = data[0][0].length,\r\n        result = {vertices: [], holes: [], dimensions: dim},\r\n        holeIndex = 0;\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n        for (var j = 0; j < data[i].length; j++) {\r\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\r\n        }\r\n        if (i > 0) {\r\n            holeIndex += data[i - 1].length;\r\n            result.holes.push(holeIndex);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n", "/**\r\n * @module ol/expr/expression\r\n */\r\n\r\nimport {ascending} from '../array.js';\r\n\r\n/**\r\n * @fileoverview This module includes types and functions for parsing array encoded expressions.\r\n * The result of parsing an encoded expression is one of the specific expression classes.\r\n * During parsing, information is added to the parsing context about the data accessed by the\r\n * expression.\r\n */\r\n\r\nlet numTypes = 0;\r\nexport const NoneType = 0;\r\nexport const BooleanType = 1 << numTypes++;\r\nexport const NumberType = 1 << numTypes++;\r\nexport const StringType = 1 << numTypes++;\r\nexport const ColorType = 1 << numTypes++;\r\nexport const NumberArrayType = 1 << numTypes++;\r\nexport const AnyType = Math.pow(2, numTypes) - 1;\r\n\r\nconst typeNames = {\r\n  [BooleanType]: 'boolean',\r\n  [NumberType]: 'number',\r\n  [StringType]: 'string',\r\n  [ColorType]: 'color',\r\n  [NumberArrayType]: 'number[]',\r\n};\r\n\r\nconst namedTypes = Object.keys(typeNames).map(Number).sort(ascending);\r\n\r\n/**\r\n * Get a string representation for a type.\r\n * @param {number} type The type.\r\n * @return {string} The type name.\r\n */\r\nexport function typeName(type) {\r\n  const names = [];\r\n  for (const namedType of namedTypes) {\r\n    if (includesType(type, namedType)) {\r\n      names.push(typeNames[namedType]);\r\n    }\r\n  }\r\n  if (names.length === 0) {\r\n    return 'untyped';\r\n  }\r\n  if (names.length < 3) {\r\n    return names.join(' or ');\r\n  }\r\n  return names.slice(0, -1).join(', ') + ', or ' + names[names.length - 1];\r\n}\r\n\r\n/**\r\n * @param {number} broad The broad type.\r\n * @param {number} specific The specific type.\r\n * @return {boolean} The broad type includes the specific type.\r\n */\r\nexport function includesType(broad, specific) {\r\n  return (broad & specific) === specific;\r\n}\r\n\r\n/**\r\n * @param {number} oneType One type.\r\n * @param {number} otherType Another type.\r\n * @return {boolean} The set of types overlap (share a common specific type)\r\n */\r\nexport function overlapsType(oneType, otherType) {\r\n  return !!(oneType & otherType);\r\n}\r\n\r\n/**\r\n * @param {number} type The type.\r\n * @param {number} expected The expected type.\r\n * @return {boolean} The given type is exactly the expected type.\r\n */\r\nexport function isType(type, expected) {\r\n  return type === expected;\r\n}\r\n\r\n/**\r\n * @typedef {boolean|number|string|Array<number>} LiteralValue\r\n */\r\n\r\nexport class LiteralExpression {\r\n  /**\r\n   * @param {number} type The value type.\r\n   * @param {LiteralValue} value The literal value.\r\n   */\r\n  constructor(type, value) {\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport class CallExpression {\r\n  /**\r\n   * @param {number} type The return type.\r\n   * @param {string} operator The operator.\r\n   * @param {...Expression} args The arguments.\r\n   */\r\n  constructor(type, operator, ...args) {\r\n    this.type = type;\r\n    this.operator = operator;\r\n    this.args = args;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {LiteralExpression|CallExpression} Expression\r\n */\r\n\r\n/**\r\n * @typedef {Object} ParsingContext\r\n * @property {Set<string>} variables Variables referenced with the 'var' operator.\r\n * @property {Set<string>} properties Properties referenced with the 'get' operator.\r\n */\r\n\r\n/**\r\n * @return {ParsingContext} A new parsing context.\r\n */\r\nexport function newParsingContext() {\r\n  return {\r\n    variables: new Set(),\r\n    properties: new Set(),\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {LiteralValue|Array} EncodedExpression\r\n */\r\n\r\n/**\r\n * @param {EncodedExpression} encoded The encoded expression.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {Expression} The parsed expression result.\r\n */\r\nexport function parse(encoded, context) {\r\n  switch (typeof encoded) {\r\n    case 'boolean': {\r\n      return new LiteralExpression(BooleanType, encoded);\r\n    }\r\n    case 'number': {\r\n      return new LiteralExpression(NumberType, encoded);\r\n    }\r\n    case 'string': {\r\n      return new LiteralExpression(StringType, encoded);\r\n    }\r\n    default: {\r\n      // pass\r\n    }\r\n  }\r\n\r\n  if (!Array.isArray(encoded)) {\r\n    throw new Error('Expression must be an array or a primitive value');\r\n  }\r\n\r\n  if (encoded.length === 0) {\r\n    throw new Error('Empty expression');\r\n  }\r\n\r\n  if (typeof encoded[0] === 'string') {\r\n    return parseCallExpression(encoded, context);\r\n  }\r\n\r\n  for (const item of encoded) {\r\n    if (typeof item !== 'number') {\r\n      throw new Error('Expected an array of numbers');\r\n    }\r\n  }\r\n\r\n  let type = NumberArrayType;\r\n  if (encoded.length === 3 || encoded.length === 4) {\r\n    type |= ColorType;\r\n  }\r\n\r\n  return new LiteralExpression(type, encoded);\r\n}\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nexport const Ops = {\r\n  Number: 'number',\r\n  String: 'string',\r\n  Get: 'get',\r\n  Var: 'var',\r\n  Any: 'any',\r\n  All: 'all',\r\n  Not: '!',\r\n  Resolution: 'resolution',\r\n  Equal: '==',\r\n  NotEqual: '!=',\r\n  GreaterThan: '>',\r\n  GreaterThanOrEqualTo: '>=',\r\n  LessThan: '<',\r\n  LessThanOrEqualTo: '<=',\r\n  Multiply: '*',\r\n  Divide: '/',\r\n  Add: '+',\r\n  Subtract: '-',\r\n  Clamp: 'clamp',\r\n  Mod: '%',\r\n  Pow: '^',\r\n  Abs: 'abs',\r\n  Floor: 'floor',\r\n  Ceil: 'ceil',\r\n  Round: 'round',\r\n  Sin: 'sin',\r\n  Cos: 'cos',\r\n  Atan: 'atan',\r\n  Sqrt: 'sqrt',\r\n  Match: 'match',\r\n};\r\n\r\n/**\r\n * @typedef {function(Array, ParsingContext):Expression} Parser\r\n */\r\n\r\n/**\r\n * @type {Object<string, Parser>}\r\n */\r\nconst parsers = {\r\n  [Ops.Number]: createParser(withArgs(1, Infinity, AnyType), NumberType),\r\n  [Ops.String]: createParser(withArgs(1, Infinity, AnyType), StringType),\r\n  [Ops.Get]: createParser(withGetArgs, AnyType),\r\n  [Ops.Var]: createParser(withVarArgs, AnyType),\r\n  [Ops.Resolution]: createParser(withNoArgs, NumberType),\r\n  [Ops.Any]: createParser(withArgs(2, Infinity, BooleanType), BooleanType),\r\n  [Ops.All]: createParser(withArgs(2, Infinity, BooleanType), BooleanType),\r\n  [Ops.Not]: createParser(withArgs(1, 1, BooleanType), BooleanType),\r\n  [Ops.Equal]: createParser(withArgs(2, 2, AnyType), BooleanType),\r\n  [Ops.NotEqual]: createParser(withArgs(2, 2, AnyType), BooleanType),\r\n  [Ops.GreaterThan]: createParser(withArgs(2, 2, AnyType), BooleanType),\r\n  [Ops.GreaterThanOrEqualTo]: createParser(\r\n    withArgs(2, 2, AnyType),\r\n    BooleanType\r\n  ),\r\n  [Ops.LessThan]: createParser(withArgs(2, 2, AnyType), BooleanType),\r\n  [Ops.LessThanOrEqualTo]: createParser(withArgs(2, 2, AnyType), BooleanType),\r\n  [Ops.Multiply]: createParser(withArgs(2, Infinity, NumberType), NumberType),\r\n  [Ops.Divide]: createParser(withArgs(2, 2, NumberType), NumberType),\r\n  [Ops.Add]: createParser(withArgs(2, Infinity, NumberType), NumberType),\r\n  [Ops.Subtract]: createParser(withArgs(2, 2, NumberType), NumberType),\r\n  [Ops.Clamp]: createParser(withArgs(3, 3, NumberType), NumberType),\r\n  [Ops.Mod]: createParser(withArgs(2, 2, NumberType), NumberType),\r\n  [Ops.Pow]: createParser(withArgs(2, 2, NumberType), NumberType),\r\n  [Ops.Abs]: createParser(withArgs(1, 1, NumberType), NumberType),\r\n  [Ops.Floor]: createParser(withArgs(1, 1, NumberType), NumberType),\r\n  [Ops.Ceil]: createParser(withArgs(1, 1, NumberType), NumberType),\r\n  [Ops.Round]: createParser(withArgs(1, 1, NumberType), NumberType),\r\n  [Ops.Sin]: createParser(withArgs(1, 1, NumberType), NumberType),\r\n  [Ops.Cos]: createParser(withArgs(1, 1, NumberType), NumberType),\r\n  [Ops.Atan]: createParser(withArgs(1, 2, NumberType), NumberType),\r\n  [Ops.Sqrt]: createParser(withArgs(1, 1, NumberType), NumberType),\r\n  [Ops.Match]: createParser(\r\n    withArgs(4, Infinity, StringType | NumberType),\r\n    AnyType\r\n  ),\r\n};\r\n\r\n/**\r\n * @typedef {function(Array, ParsingContext):Array<Expression>} ArgValidator\r\n */\r\n\r\n/**\r\n * @type ArgValidator\r\n */\r\nfunction withGetArgs(encoded, context) {\r\n  if (encoded.length !== 2) {\r\n    throw new Error('Expected 1 argument for get operation');\r\n  }\r\n  const arg = parse(encoded[1], context);\r\n  if (!(arg instanceof LiteralExpression)) {\r\n    throw new Error('Expected a literal argument for get operation');\r\n  }\r\n  if (typeof arg.value !== 'string') {\r\n    throw new Error('Expected a string argument for get operation');\r\n  }\r\n  context.properties.add(arg.value);\r\n  return [arg];\r\n}\r\n\r\n/**\r\n * @type ArgValidator\r\n */\r\nfunction withVarArgs(encoded, context) {\r\n  if (encoded.length !== 2) {\r\n    throw new Error('Expected 1 argument for var operation');\r\n  }\r\n  const arg = parse(encoded[1], context);\r\n  if (!(arg instanceof LiteralExpression)) {\r\n    throw new Error('Expected a literal argument for var operation');\r\n  }\r\n  if (typeof arg.value !== 'string') {\r\n    throw new Error('Expected a string argument for get operation');\r\n  }\r\n  context.variables.add(arg.value);\r\n  return [arg];\r\n}\r\n\r\n/**\r\n * @type ArgValidator\r\n */\r\nfunction withNoArgs(encoded, context) {\r\n  const operation = encoded[0];\r\n  if (encoded.length !== 1) {\r\n    throw new Error(`Expected no arguments for ${operation} operation`);\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * @param {number} minArgs The minimum number of arguments.\r\n * @param {number} maxArgs The maximum number of arguments.\r\n * @param {number} argType The argument type.\r\n * @return {ArgValidator} The argument validator\r\n */\r\nfunction withArgs(minArgs, maxArgs, argType) {\r\n  return function (encoded, context) {\r\n    const operation = encoded[0];\r\n    const argCount = encoded.length - 1;\r\n    if (minArgs === maxArgs) {\r\n      if (argCount !== minArgs) {\r\n        const plural = minArgs === 1 ? '' : 's';\r\n        throw new Error(\r\n          `Expected ${minArgs} argument${plural} for operation ${operation}, got ${argCount}`\r\n        );\r\n      }\r\n    } else if (argCount < minArgs || argCount > maxArgs) {\r\n      throw new Error(\r\n        `Expected ${minArgs} to ${maxArgs} arguments for operation ${operation}, got ${argCount}`\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Expression>}\r\n     */\r\n    const args = new Array(argCount);\r\n    for (let i = 0; i < argCount; ++i) {\r\n      const expression = parse(encoded[i + 1], context);\r\n      if (!overlapsType(argType, expression.type)) {\r\n        const gotType = typeName(argType);\r\n        const expectedType = typeName(expression.type);\r\n        throw new Error(\r\n          `Unexpected type for argument ${i} of ${operation} operation` +\r\n            ` : got ${gotType} but expected ${expectedType}`\r\n        );\r\n      }\r\n      args[i] = expression;\r\n    }\r\n\r\n    return args;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {ArgValidator} argValidator The argument validator.\r\n * @param {number} returnType The return type.\r\n * @return {Parser} The parser.\r\n */\r\nfunction createParser(argValidator, returnType) {\r\n  return function (encoded, context) {\r\n    const operator = encoded[0];\r\n    const args = argValidator(encoded, context);\r\n    return new CallExpression(returnType, operator, ...args);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {Array} encoded The encoded expression.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {Expression} The parsed expression.\r\n */\r\nfunction parseCallExpression(encoded, context) {\r\n  const operator = encoded[0];\r\n\r\n  const parser = parsers[operator];\r\n  if (!parser) {\r\n    throw new Error(`Unknown operator: ${operator}`);\r\n  }\r\n  return parser(encoded, context);\r\n}\r\n", "/**\r\n * @module ol/expr/cpu\r\n */\r\n\r\nimport {\r\n  LiteralExpression,\r\n  Ops,\r\n  overlapsType,\r\n  parse,\r\n  typeName,\r\n} from './expression.js';\r\n\r\n/**\r\n * @fileoverview This module includes functions to build expressions for evaluation on the CPU.\r\n * Building is composed of two steps: parsing and compiling.  The parsing step takes an encoded\r\n * expression and returns an instance of one of the expression classes.  The compiling step takes\r\n * the expression instance and returns a function that can be evaluated in to return a literal\r\n * value.  The evaluator function should do as little allocation and work as possible.\r\n */\r\n\r\n/**\r\n * @typedef {Object} EvaluationContext\r\n * @property {Object} properties The values for properties used in 'get' expressions.\r\n * @property {Object} variables The values for variables used in 'var' expressions.\r\n * @property {number} resolution The map resolution.\r\n */\r\n\r\n/**\r\n * @return {EvaluationContext} A new evaluation context.\r\n */\r\nexport function newEvaluationContext() {\r\n  return {\r\n    variables: {},\r\n    properties: {},\r\n    resolution: NaN,\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):import(\"./expression.js\").LiteralValue} ExpressionEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):boolean} BooleanEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):number} NumberEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):string} StringEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):(Array<number>|string)} ColorLikeEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Array<number>} NumberArrayEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Array<number>} CoordinateEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):(Array<number>|number)} SizeLikeEvaluator\r\n */\r\n\r\n/**\r\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\r\n * @param {number} type The expected type.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The expression evaluator.\r\n */\r\nexport function buildExpression(encoded, type, context) {\r\n  const expression = parse(encoded, context);\r\n  if (!overlapsType(type, expression.type)) {\r\n    const expected = typeName(type);\r\n    const actual = typeName(expression.type);\r\n    throw new Error(\r\n      `Expected expression to be of type ${expected}, got ${actual}`\r\n    );\r\n  }\r\n  return compileExpression(expression, context);\r\n}\r\n\r\n/**\r\n * @param {import(\"./expression.js\").Expression} expression The expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileExpression(expression, context) {\r\n  if (expression instanceof LiteralExpression) {\r\n    return function () {\r\n      return expression.value;\r\n    };\r\n  }\r\n  const operator = expression.operator;\r\n  switch (operator) {\r\n    case Ops.Number:\r\n    case Ops.String: {\r\n      return compileAssertionExpression(expression, context);\r\n    }\r\n    case Ops.Get:\r\n    case Ops.Var: {\r\n      return compileAccessorExpression(expression, context);\r\n    }\r\n    case Ops.Resolution: {\r\n      return (context) => context.resolution;\r\n    }\r\n    case Ops.Any:\r\n    case Ops.All:\r\n    case Ops.Not: {\r\n      return compileLogicalExpression(expression, context);\r\n    }\r\n    case Ops.Equal:\r\n    case Ops.NotEqual:\r\n    case Ops.LessThan:\r\n    case Ops.LessThanOrEqualTo:\r\n    case Ops.GreaterThan:\r\n    case Ops.GreaterThanOrEqualTo: {\r\n      return compileComparisonExpression(expression, context);\r\n    }\r\n    case Ops.Multiply:\r\n    case Ops.Divide:\r\n    case Ops.Add:\r\n    case Ops.Subtract:\r\n    case Ops.Clamp:\r\n    case Ops.Mod:\r\n    case Ops.Pow:\r\n    case Ops.Abs:\r\n    case Ops.Floor:\r\n    case Ops.Ceil:\r\n    case Ops.Round:\r\n    case Ops.Sin:\r\n    case Ops.Cos:\r\n    case Ops.Atan:\r\n    case Ops.Sqrt: {\r\n      return compileNumericExpression(expression, context);\r\n    }\r\n    case Ops.Match: {\r\n      return compileMatchExpression(expression, context);\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported operator ${operator}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileAssertionExpression(expression, context) {\r\n  const type = expression.operator;\r\n  const length = expression.args.length;\r\n\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  switch (type) {\r\n    case Ops.Number:\r\n    case Ops.String: {\r\n      return (context) => {\r\n        for (let i = 0; i < length; ++i) {\r\n          const value = args[i](context);\r\n          if (typeof value === type) {\r\n            return value;\r\n          }\r\n        }\r\n        throw new Error(`Expected one of the values to be a ${type}`);\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported assertion operator ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileAccessorExpression(expression, context) {\r\n  const nameExpression = expression.args[0];\r\n  if (!(nameExpression instanceof LiteralExpression)) {\r\n    throw new Error('Expected literal name');\r\n  }\r\n  const name = nameExpression.value;\r\n  if (typeof name !== 'string') {\r\n    throw new Error('Expected string name');\r\n  }\r\n  switch (expression.operator) {\r\n    case Ops.Get: {\r\n      return (context) => context.properties[name];\r\n    }\r\n    case Ops.Var: {\r\n      return (context) => context.variables[name];\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported accessor operator ${expression.operator}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {BooleanEvaluator} The evaluator function.\r\n */\r\nfunction compileComparisonExpression(expression, context) {\r\n  const op = expression.operator;\r\n  const left = compileExpression(expression.args[0], context);\r\n  const right = compileExpression(expression.args[1], context);\r\n  switch (op) {\r\n    case Ops.Equal: {\r\n      return (context) => left(context) === right(context);\r\n    }\r\n    case Ops.NotEqual: {\r\n      return (context) => left(context) !== right(context);\r\n    }\r\n    case Ops.LessThan: {\r\n      return (context) => left(context) < right(context);\r\n    }\r\n    case Ops.LessThanOrEqualTo: {\r\n      return (context) => left(context) <= right(context);\r\n    }\r\n    case Ops.GreaterThan: {\r\n      return (context) => left(context) > right(context);\r\n    }\r\n    case Ops.GreaterThanOrEqualTo: {\r\n      return (context) => left(context) >= right(context);\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported comparison operator ${op}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {BooleanEvaluator} The evaluator function.\r\n */\r\nfunction compileLogicalExpression(expression, context) {\r\n  const op = expression.operator;\r\n  const length = expression.args.length;\r\n\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  switch (op) {\r\n    case Ops.Any: {\r\n      return (context) => {\r\n        for (let i = 0; i < length; ++i) {\r\n          if (args[i](context)) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n    }\r\n    case Ops.All: {\r\n      return (context) => {\r\n        for (let i = 0; i < length; ++i) {\r\n          if (!args[i](context)) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      };\r\n    }\r\n    case Ops.Not: {\r\n      return (context) => !args[0](context);\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported logical operator ${op}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {NumberEvaluator} The evaluator function.\r\n */\r\nfunction compileNumericExpression(expression, context) {\r\n  const op = expression.operator;\r\n  const length = expression.args.length;\r\n\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  switch (op) {\r\n    case Ops.Multiply: {\r\n      return (context) => {\r\n        let value = 1;\r\n        for (let i = 0; i < length; ++i) {\r\n          value *= args[i](context);\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n    case Ops.Divide: {\r\n      return (context) => args[0](context) / args[1](context);\r\n    }\r\n    case Ops.Add: {\r\n      return (context) => {\r\n        let value = 0;\r\n        for (let i = 0; i < length; ++i) {\r\n          value += args[i](context);\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n    case Ops.Subtract: {\r\n      return (context) => args[0](context) - args[1](context);\r\n    }\r\n    case Ops.Clamp: {\r\n      return (context) => {\r\n        const value = args[0](context);\r\n        const min = args[1](context);\r\n        if (value < min) {\r\n          return min;\r\n        }\r\n        const max = args[2](context);\r\n        if (value > max) {\r\n          return max;\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n    case Ops.Mod: {\r\n      return (context) => args[0](context) % args[1](context);\r\n    }\r\n    case Ops.Pow: {\r\n      return (context) => Math.pow(args[0](context), args[1](context));\r\n    }\r\n    case Ops.Abs: {\r\n      return (context) => Math.abs(args[0](context));\r\n    }\r\n    case Ops.Floor: {\r\n      return (context) => Math.floor(args[0](context));\r\n    }\r\n    case Ops.Ceil: {\r\n      return (context) => Math.ceil(args[0](context));\r\n    }\r\n    case Ops.Round: {\r\n      return (context) => Math.round(args[0](context));\r\n    }\r\n    case Ops.Sin: {\r\n      return (context) => Math.sin(args[0](context));\r\n    }\r\n    case Ops.Cos: {\r\n      return (context) => Math.cos(args[0](context));\r\n    }\r\n    case Ops.Atan: {\r\n      if (length === 2) {\r\n        return (context) => Math.atan2(args[0](context), args[1](context));\r\n      }\r\n      return (context) => Math.atan(args[0](context));\r\n    }\r\n    case Ops.Sqrt: {\r\n      return (context) => Math.sqrt(args[0](context));\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported numeric operator ${op}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileMatchExpression(expression, context) {\r\n  const length = expression.args.length;\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  return (context) => {\r\n    const value = args[0](context);\r\n    for (let i = 1; i < length; i += 2) {\r\n      if (value === args[i](context)) {\r\n        return args[i + 1](context);\r\n      }\r\n    }\r\n    return args[length - 1](context);\r\n  };\r\n}\r\n", "/**\r\n * @module ol/render/canvas/style\r\n */\r\n\r\nimport Circle from '../../style/Circle.js';\r\nimport Fill from '../../style/Fill.js';\r\nimport Icon from '../../style/Icon.js';\r\nimport RegularShape from '../../style/RegularShape.js';\r\nimport Stroke from '../../style/Stroke.js';\r\nimport Style from '../../style/Style.js';\r\nimport Text from '../../style/Text.js';\r\nimport {\r\n  BooleanType,\r\n  ColorType,\r\n  NumberArrayType,\r\n  NumberType,\r\n  StringType,\r\n  newParsingContext,\r\n} from '../../expr/expression.js';\r\nimport {buildExpression, newEvaluationContext} from '../../expr/cpu.js';\r\nimport {toSize} from '../../size.js';\r\n\r\n/**\r\n * @fileoverview This module includes functions to build styles for the canvas renderer.  Building\r\n * is composed of two steps: parsing and compiling.  The parsing step takes an encoded expression\r\n * and returns an instance of one of the expression classes.  The compiling step takes the\r\n * expression instance and returns a function that can be evaluated to return a literal value.  The\r\n * evaluator function should do as little allocation and work as possible.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../style/flat.js\").FlatStyle} FlatStyle\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/expression.js\").EncodedExpression} EncodedExpression\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/expression.js\").ParsingContext} ParsingContext\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/expression.js\").CallExpression} CallExpression\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/cpu.js\").EvaluationContext} EvaluationContext\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/cpu.js\").ExpressionEvaluator} ExpressionEvaluator\r\n */\r\n\r\n/**\r\n * @param {EvaluationContext} context The evaluation context.\r\n * @return {boolean} Always true.\r\n */\r\nfunction always(context) {\r\n  return true;\r\n}\r\n\r\n/**\r\n * This function adapts a rule evaluator to the existing style function interface.\r\n * After we have deprecated the style function, we can use the compiled rules directly\r\n * and pass a more complete evaluation context (variables, zoom, time, etc.).\r\n *\r\n * @param {Array<import('../../style/flat.js').Rule>} rules The rules.\r\n * @return {import('../../style/Style.js').StyleFunction} A style function.\r\n */\r\nexport function rulesToStyleFunction(rules) {\r\n  const parsingContext = newParsingContext();\r\n  const evaluator = buildRuleSet(rules, parsingContext);\r\n  const evaluationContext = newEvaluationContext();\r\n  return function (feature, resolution) {\r\n    evaluationContext.properties = feature.getPropertiesInternal();\r\n    evaluationContext.resolution = resolution;\r\n    return evaluator(evaluationContext);\r\n  };\r\n}\r\n\r\n/**\r\n * This function adapts a style evaluator to the existing style function interface.\r\n * After we have deprecated the style function, we can use the compiled rules directly\r\n * and pass a more complete evaluation context (variables, zoom, time, etc.).\r\n *\r\n * @param {Array<import('../../style/flat.js').FlatStyle>} flatStyles The flat styles.\r\n * @return {import('../../style/Style.js').StyleFunction} A style function.\r\n */\r\nexport function flatStylesToStyleFunction(flatStyles) {\r\n  const parsingContext = newParsingContext();\r\n  const length = flatStyles.length;\r\n\r\n  /**\r\n   * @type {Array<StyleEvaluator>}\r\n   */\r\n  const evaluators = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    evaluators[i] = buildStyle(flatStyles[i], parsingContext);\r\n  }\r\n  const evaluationContext = newEvaluationContext();\r\n\r\n  /**\r\n   * @type {Array<Style>}\r\n   */\r\n  const styles = new Array(length);\r\n\r\n  return function (feature, resolution) {\r\n    evaluationContext.properties = feature.getPropertiesInternal();\r\n    evaluationContext.resolution = resolution;\r\n    for (let i = 0; i < length; ++i) {\r\n      styles[i] = evaluators[i](evaluationContext);\r\n    }\r\n    return styles;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Array<Style>} RuleSetEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {Object} CompiledRule\r\n * @property {ExpressionEvaluator} filter The compiled filter evaluator.\r\n * @property {Array<StyleEvaluator>} styles The list of compiled style evaluators.\r\n */\r\n\r\n/**\r\n * @param {Array<import('../../style/flat.js').Rule>} rules The rules.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {RuleSetEvaluator} The evaluator function.\r\n */\r\nexport function buildRuleSet(rules, context) {\r\n  const length = rules.length;\r\n\r\n  /**\r\n   * @type {Array<CompiledRule>}\r\n   */\r\n  const compiledRules = new Array(length);\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    const rule = rules[i];\r\n    const filter =\r\n      'filter' in rule\r\n        ? buildExpression(rule.filter, BooleanType, context)\r\n        : always;\r\n\r\n    /**\r\n     * @type {Array<StyleEvaluator>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(rule.style)) {\r\n      const styleLength = rule.style.length;\r\n      styles = new Array(styleLength);\r\n      for (let j = 0; j < styleLength; ++j) {\r\n        styles[j] = buildStyle(rule.style[j], context);\r\n      }\r\n    } else {\r\n      styles = [buildStyle(rule.style, context)];\r\n    }\r\n\r\n    compiledRules[i] = {filter, styles};\r\n  }\r\n\r\n  return function (context) {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    const styles = [];\r\n\r\n    let someMatched = false;\r\n    for (let i = 0; i < length; ++i) {\r\n      const filterEvaluator = compiledRules[i].filter;\r\n      if (!filterEvaluator(context)) {\r\n        continue;\r\n      }\r\n      if (rules[i].else && someMatched) {\r\n        continue;\r\n      }\r\n      someMatched = true;\r\n      for (const styleEvaluator of compiledRules[i].styles) {\r\n        const style = styleEvaluator(context);\r\n        if (!style) {\r\n          continue;\r\n        }\r\n        styles.push(style);\r\n      }\r\n    }\r\n\r\n    return styles;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Style} StyleEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle A flat style literal.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {StyleEvaluator} A function that evaluates to a style.  The style returned by\r\n * this function will be reused between invocations.\r\n */\r\nexport function buildStyle(flatStyle, context) {\r\n  const evaluateFill = buildFill(flatStyle, '', context);\r\n  const evaluateStroke = buildStroke(flatStyle, '', context);\r\n  const evaluateText = buildText(flatStyle, context);\r\n  const evaluateImage = buildImage(flatStyle, context);\r\n  const evaluateZIndex = numberEvaluator(flatStyle, 'z-index', context);\r\n\r\n  const style = new Style();\r\n  return function (context) {\r\n    let empty = true;\r\n    if (evaluateFill) {\r\n      const fill = evaluateFill(context);\r\n      if (fill) {\r\n        empty = false;\r\n      }\r\n      style.setFill(fill);\r\n    }\r\n    if (evaluateStroke) {\r\n      const stroke = evaluateStroke(context);\r\n      if (stroke) {\r\n        empty = false;\r\n      }\r\n      style.setStroke(stroke);\r\n    }\r\n    if (evaluateText) {\r\n      const text = evaluateText(context);\r\n      if (text) {\r\n        empty = false;\r\n      }\r\n      style.setText(text);\r\n    }\r\n    if (evaluateImage) {\r\n      const image = evaluateImage(context);\r\n      if (image) {\r\n        empty = false;\r\n      }\r\n      style.setImage(image);\r\n    }\r\n    if (evaluateZIndex) {\r\n      style.setZIndex(evaluateZIndex(context));\r\n    }\r\n    if (empty) {\r\n      return null;\r\n    }\r\n    return style;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Fill} FillEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} prefix The property prefix.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {FillEvaluator?} A function that evaluates to a fill.\r\n */\r\nfunction buildFill(flatStyle, prefix, context) {\r\n  const evaluateColor = colorLikeEvaluator(\r\n    flatStyle,\r\n    prefix + 'fill-color',\r\n    context\r\n  );\r\n  if (!evaluateColor) {\r\n    return null;\r\n  }\r\n\r\n  const fill = new Fill();\r\n  return function (context) {\r\n    const color = evaluateColor(context);\r\n    if (color === 'none') {\r\n      return null;\r\n    }\r\n    fill.setColor(color);\r\n    return fill;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Stroke} StrokeEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} prefix The property prefix.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {StrokeEvaluator?} A function the evaluates to a stroke.\r\n */\r\nfunction buildStroke(flatStyle, prefix, context) {\r\n  const evaluateWidth = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-width',\r\n    context\r\n  );\r\n\r\n  const evaluateColor = colorLikeEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-color',\r\n    context\r\n  );\r\n\r\n  if (!evaluateWidth && !evaluateColor) {\r\n    return null;\r\n  }\r\n\r\n  const evaluateLineCap = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-cap',\r\n    context\r\n  );\r\n\r\n  const evaluateLineJoin = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-join',\r\n    context\r\n  );\r\n\r\n  const evaluateLineDash = numberArrayEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-dash',\r\n    context\r\n  );\r\n\r\n  const evaluateLineDashOffset = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-dash-offset',\r\n    context\r\n  );\r\n\r\n  const evaluateMiterLimit = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-miter-limit',\r\n    context\r\n  );\r\n\r\n  const stroke = new Stroke();\r\n  return function (context) {\r\n    if (evaluateColor) {\r\n      const color = evaluateColor(context);\r\n      if (color === 'none') {\r\n        return null;\r\n      }\r\n      stroke.setColor(color);\r\n    }\r\n\r\n    if (evaluateWidth) {\r\n      stroke.setWidth(evaluateWidth(context));\r\n    }\r\n\r\n    if (evaluateLineCap) {\r\n      const lineCap = evaluateLineCap(context);\r\n      if (lineCap !== 'butt' && lineCap !== 'round' && lineCap !== 'square') {\r\n        throw new Error('Expected butt, round, or square line cap');\r\n      }\r\n      stroke.setLineCap(lineCap);\r\n    }\r\n\r\n    if (evaluateLineJoin) {\r\n      const lineJoin = evaluateLineJoin(context);\r\n      if (\r\n        lineJoin !== 'bevel' &&\r\n        lineJoin !== 'round' &&\r\n        lineJoin !== 'miter'\r\n      ) {\r\n        throw new Error('Expected bevel, round, or miter line join');\r\n      }\r\n      stroke.setLineJoin(lineJoin);\r\n    }\r\n\r\n    if (evaluateLineDash) {\r\n      stroke.setLineDash(evaluateLineDash(context));\r\n    }\r\n\r\n    if (evaluateLineDashOffset) {\r\n      stroke.setLineDashOffset(evaluateLineDashOffset(context));\r\n    }\r\n\r\n    if (evaluateMiterLimit) {\r\n      stroke.setMiterLimit(evaluateMiterLimit(context));\r\n    }\r\n\r\n    return stroke;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Text} TextEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {TextEvaluator?} A function that evaluates to a text symbolizer.\r\n */\r\nfunction buildText(flatStyle, context) {\r\n  const prefix = 'text-';\r\n\r\n  // Currently, an Array<string> may be used for rich text support.  This doesn't\r\n  // work with our expression syntax where arrays of strings are interpreted as\r\n  // call expressions.  To support rich text, we could add a 'strings' operator\r\n  // where all the following arguments would be string values.\r\n  const evaluateValue = stringEvaluator(flatStyle, prefix + 'value', context);\r\n  if (!evaluateValue) {\r\n    return null;\r\n  }\r\n\r\n  const evaluateFill = buildFill(flatStyle, prefix, context);\r\n\r\n  const evaluateBackgroundFill = buildFill(\r\n    flatStyle,\r\n    prefix + 'background-',\r\n    context\r\n  );\r\n\r\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\r\n\r\n  const evaluateBackgroundStroke = buildStroke(\r\n    flatStyle,\r\n    prefix + 'background-',\r\n    context\r\n  );\r\n\r\n  const evaluateFont = stringEvaluator(flatStyle, prefix + 'font', context);\r\n\r\n  const evaluateMaxAngle = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'max-angle',\r\n    context\r\n  );\r\n\r\n  const evaluateOffsetX = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'offset-x',\r\n    context\r\n  );\r\n\r\n  const evaluateOffsetY = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'offset-y',\r\n    context\r\n  );\r\n\r\n  const evaluateOverflow = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'overflow',\r\n    context\r\n  );\r\n\r\n  const evaluatePlacement = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'placement',\r\n    context\r\n  );\r\n\r\n  const evaluateRepeat = numberEvaluator(flatStyle, prefix + 'repeat', context);\r\n\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context\r\n  );\r\n\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context\r\n  );\r\n\r\n  const evaluateAlign = stringEvaluator(flatStyle, prefix + 'align', context);\r\n\r\n  const evaluateJustify = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'justify',\r\n    context\r\n  );\r\n\r\n  const evaluateBaseline = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'baseline',\r\n    context\r\n  );\r\n\r\n  const evaluatePadding = numberArrayEvaluator(\r\n    flatStyle,\r\n    prefix + 'padding',\r\n    context\r\n  );\r\n\r\n  const text = new Text({});\r\n  return function (context) {\r\n    text.setText(evaluateValue(context));\r\n\r\n    if (evaluateFill) {\r\n      text.setFill(evaluateFill(context));\r\n    }\r\n\r\n    if (evaluateBackgroundFill) {\r\n      text.setBackgroundFill(evaluateBackgroundFill(context));\r\n    }\r\n\r\n    if (evaluateStroke) {\r\n      text.setStroke(evaluateStroke(context));\r\n    }\r\n\r\n    if (evaluateBackgroundStroke) {\r\n      text.setBackgroundStroke(evaluateBackgroundStroke(context));\r\n    }\r\n\r\n    if (evaluateFont) {\r\n      text.setFont(evaluateFont(context));\r\n    }\r\n\r\n    if (evaluateMaxAngle) {\r\n      text.setMaxAngle(evaluateMaxAngle(context));\r\n    }\r\n\r\n    if (evaluateOffsetX) {\r\n      text.setOffsetX(evaluateOffsetX(context));\r\n    }\r\n\r\n    if (evaluateOffsetY) {\r\n      text.setOffsetY(evaluateOffsetY(context));\r\n    }\r\n\r\n    if (evaluateOverflow) {\r\n      text.setOverflow(evaluateOverflow(context));\r\n    }\r\n\r\n    if (evaluatePlacement) {\r\n      const placement = evaluatePlacement(context);\r\n      if (placement !== 'point' && placement !== 'line') {\r\n        throw new Error('Expected point or line for text-placement');\r\n      }\r\n      text.setPlacement(placement);\r\n    }\r\n\r\n    if (evaluateRepeat) {\r\n      text.setRepeat(evaluateRepeat(context));\r\n    }\r\n\r\n    if (evaluateScale) {\r\n      text.setScale(evaluateScale(context));\r\n    }\r\n\r\n    if (evaluateRotateWithView) {\r\n      text.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n\r\n    if (evaluateRotation) {\r\n      text.setRotation(evaluateRotation(context));\r\n    }\r\n\r\n    if (evaluateAlign) {\r\n      const textAlign = evaluateAlign(context);\r\n      if (\r\n        textAlign !== 'left' &&\r\n        textAlign !== 'center' &&\r\n        textAlign !== 'right' &&\r\n        textAlign !== 'end' &&\r\n        textAlign !== 'start'\r\n      ) {\r\n        throw new Error(\r\n          'Expected left, right, center, start, or end for text-align'\r\n        );\r\n      }\r\n      text.setTextAlign(textAlign);\r\n    }\r\n\r\n    if (evaluateJustify) {\r\n      const justify = evaluateJustify(context);\r\n      if (justify !== 'left' && justify !== 'right' && justify !== 'center') {\r\n        throw new Error('Expected left, right, or center for text-justify');\r\n      }\r\n      text.setJustify(justify);\r\n    }\r\n\r\n    if (evaluateBaseline) {\r\n      const textBaseline = evaluateBaseline(context);\r\n      if (\r\n        textBaseline !== 'bottom' &&\r\n        textBaseline !== 'top' &&\r\n        textBaseline !== 'middle' &&\r\n        textBaseline !== 'alphabetic' &&\r\n        textBaseline !== 'hanging'\r\n      ) {\r\n        throw new Error(\r\n          'Expected bottom, top, middle, alphabetic, or hanging for text-baseline'\r\n        );\r\n      }\r\n      text.setTextBaseline(textBaseline);\r\n    }\r\n\r\n    if (evaluatePadding) {\r\n      text.setPadding(evaluatePadding(context));\r\n    }\r\n\r\n    return text;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):import(\"../../style/Image.js\").default} ImageEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator?} A function that evaluates to an image symbolizer.\r\n */\r\nfunction buildImage(flatStyle, context) {\r\n  if ('icon-src' in flatStyle) {\r\n    return buildIcon(flatStyle, context);\r\n  }\r\n\r\n  if ('shape-points' in flatStyle) {\r\n    return buildShape(flatStyle, context);\r\n  }\r\n\r\n  if ('circle-radius' in flatStyle) {\r\n    return buildCircle(flatStyle, context);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to an image symbolizer.\r\n */\r\nfunction buildIcon(flatStyle, context) {\r\n  const prefix = 'icon-';\r\n\r\n  // required property\r\n  const srcName = prefix + 'src';\r\n  const src = requireString(flatStyle[srcName], srcName);\r\n\r\n  // settable properties\r\n  const evaluateAnchor = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'anchor',\r\n    context\r\n  );\r\n\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n\r\n  const evaluateOpacity = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'opacity',\r\n    context\r\n  );\r\n\r\n  const evaluateDisplacement = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'displacement',\r\n    context\r\n  );\r\n\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context\r\n  );\r\n\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context\r\n  );\r\n\r\n  // the remaining symbolizer properties are not currently settable\r\n  const anchorOrigin = optionalIconOrigin(flatStyle, prefix + 'anchor-origin');\r\n  const anchorXUnits = optionalIconAnchorUnits(\r\n    flatStyle,\r\n    prefix + 'anchor-x-units'\r\n  );\r\n  const anchorYUnits = optionalIconAnchorUnits(\r\n    flatStyle,\r\n    prefix + 'anchor-y-units'\r\n  );\r\n  const color = optionalColorLike(flatStyle, prefix + 'color');\r\n  const crossOrigin = optionalString(flatStyle, prefix + 'cross-origin');\r\n  const offset = optionalNumberArray(flatStyle, prefix + 'offset');\r\n  const offsetOrigin = optionalIconOrigin(flatStyle, prefix + 'offset-origin');\r\n  const width = optionalNumber(flatStyle, prefix + 'width');\r\n  const height = optionalNumber(flatStyle, prefix + 'height');\r\n  const size = optionalSize(flatStyle, prefix + 'size');\r\n  const declutterMode = optionalDeclutterMode(flatStyle, prefix + 'declutter');\r\n\r\n  const icon = new Icon({\r\n    src,\r\n    anchorOrigin,\r\n    anchorXUnits,\r\n    anchorYUnits,\r\n    color,\r\n    crossOrigin,\r\n    offset,\r\n    offsetOrigin,\r\n    height,\r\n    width,\r\n    size,\r\n    declutterMode,\r\n  });\r\n\r\n  return function (context) {\r\n    if (evaluateOpacity) {\r\n      icon.setOpacity(evaluateOpacity(context));\r\n    }\r\n\r\n    if (evaluateDisplacement) {\r\n      icon.setDisplacement(evaluateDisplacement(context));\r\n    }\r\n\r\n    if (evaluateRotation) {\r\n      icon.setRotation(evaluateRotation(context));\r\n    }\r\n\r\n    if (evaluateRotateWithView) {\r\n      icon.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n\r\n    if (evaluateScale) {\r\n      icon.setScale(evaluateScale(context));\r\n    }\r\n\r\n    if (evaluateAnchor) {\r\n      icon.setAnchor(evaluateAnchor(context));\r\n    }\r\n    return icon;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to an icon symbolizer.\r\n */\r\nfunction buildShape(flatStyle, context) {\r\n  const prefix = 'shape-';\r\n\r\n  // required property\r\n  const pointsName = prefix + 'points';\r\n  const points = requireNumber(flatStyle[pointsName], pointsName);\r\n\r\n  // settable properties\r\n  const evaluateFill = buildFill(flatStyle, prefix, context);\r\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n  const evaluateDisplacement = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'displacement',\r\n    context\r\n  );\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context\r\n  );\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context\r\n  );\r\n\r\n  // the remaining properties are not currently settable\r\n  const radius = optionalNumber(flatStyle, prefix + 'radius');\r\n  const radius1 = optionalNumber(flatStyle, prefix + 'radius1');\r\n  const radius2 = optionalNumber(flatStyle, prefix + 'radius2');\r\n  const angle = optionalNumber(flatStyle, prefix + 'angle');\r\n  const declutterMode = optionalDeclutterMode(\r\n    flatStyle,\r\n    prefix + 'declutter-mode'\r\n  );\r\n\r\n  const shape = new RegularShape({\r\n    points,\r\n    radius,\r\n    radius1,\r\n    radius2,\r\n    angle,\r\n    declutterMode,\r\n  });\r\n\r\n  return function (context) {\r\n    if (evaluateFill) {\r\n      shape.setFill(evaluateFill(context));\r\n    }\r\n    if (evaluateStroke) {\r\n      shape.setStroke(evaluateStroke(context));\r\n    }\r\n    if (evaluateDisplacement) {\r\n      shape.setDisplacement(evaluateDisplacement(context));\r\n    }\r\n    if (evaluateRotation) {\r\n      shape.setRotation(evaluateRotation(context));\r\n    }\r\n    if (evaluateRotateWithView) {\r\n      shape.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n    if (evaluateScale) {\r\n      shape.setScale(evaluateScale(context));\r\n    }\r\n\r\n    return shape;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to a circle symbolizer.\r\n */\r\nfunction buildCircle(flatStyle, context) {\r\n  const prefix = 'circle-';\r\n\r\n  // settable properties\r\n  const evaluateFill = buildFill(flatStyle, prefix, context);\r\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\r\n  const evaluateRadius = numberEvaluator(flatStyle, prefix + 'radius', context);\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n  const evaluateDisplacement = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'displacement',\r\n    context\r\n  );\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context\r\n  );\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context\r\n  );\r\n\r\n  // the remaining properties are not currently settable\r\n  const declutterMode = optionalDeclutterMode(\r\n    flatStyle,\r\n    prefix + 'declutter-mode'\r\n  );\r\n\r\n  const circle = new Circle({\r\n    radius: 5, // this is arbitrary, but required - the evaluated radius is used below\r\n    declutterMode,\r\n  });\r\n\r\n  return function (context) {\r\n    if (evaluateRadius) {\r\n      circle.setRadius(evaluateRadius(context));\r\n    }\r\n    if (evaluateFill) {\r\n      circle.setFill(evaluateFill(context));\r\n    }\r\n    if (evaluateStroke) {\r\n      circle.setStroke(evaluateStroke(context));\r\n    }\r\n    if (evaluateDisplacement) {\r\n      circle.setDisplacement(evaluateDisplacement(context));\r\n    }\r\n    if (evaluateRotation) {\r\n      circle.setRotation(evaluateRotation(context));\r\n    }\r\n    if (evaluateRotateWithView) {\r\n      circle.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n    if (evaluateScale) {\r\n      circle.setScale(evaluateScale(context));\r\n    }\r\n\r\n    return circle;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').NumberEvaluator|undefined} The expression evaluator or undefined.\r\n */\r\nfunction numberEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return undefined;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], NumberType, context);\r\n  return function (context) {\r\n    return requireNumber(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').StringEvaluator?} The expression evaluator.\r\n */\r\nfunction stringEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], StringType, context);\r\n  return function (context) {\r\n    return requireString(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').BooleanEvaluator?} The expression evaluator.\r\n */\r\nfunction booleanEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], BooleanType, context);\r\n  return function (context) {\r\n    const value = evaluator(context);\r\n    if (typeof value !== 'boolean') {\r\n      throw new Error(`Expected a boolean for ${name}`);\r\n    }\r\n    return value;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').ColorLikeEvaluator?} The expression evaluator.\r\n */\r\nfunction colorLikeEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(\r\n    flatStyle[name],\r\n    ColorType | StringType,\r\n    context\r\n  );\r\n  return function (context) {\r\n    return requireColorLike(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').NumberArrayEvaluator?} The expression evaluator.\r\n */\r\nfunction numberArrayEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);\r\n  return function (context) {\r\n    return requireNumberArray(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').CoordinateEvaluator?} The expression evaluator.\r\n */\r\nfunction coordinateEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);\r\n  return function (context) {\r\n    const array = requireNumberArray(evaluator(context), name);\r\n    if (array.length !== 2) {\r\n      throw new Error(`Expected two numbers for ${name}`);\r\n    }\r\n    return array;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').SizeLikeEvaluator?} The expression evaluator.\r\n */\r\nfunction sizeLikeEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(\r\n    flatStyle[name],\r\n    NumberArrayType | NumberType,\r\n    context\r\n  );\r\n  return function (context) {\r\n    return requireSizeLike(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {number|undefined} A number or undefined.\r\n */\r\nfunction optionalNumber(flatStyle, property) {\r\n  const value = flatStyle[property];\r\n  if (value === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof value !== 'number') {\r\n    throw new Error(`Expected a number for ${property}`);\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../size.js\").Size|undefined} A size or undefined.\r\n */\r\nfunction optionalSize(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof encoded === 'number') {\r\n    return toSize(encoded);\r\n  }\r\n  if (!Array.isArray(encoded)) {\r\n    throw new Error(`Expected a number or size array for ${property}`);\r\n  }\r\n  if (\r\n    encoded.length !== 2 ||\r\n    typeof encoded[0] !== 'number' ||\r\n    typeof encoded[1] !== 'number'\r\n  ) {\r\n    throw new Error(`Expected a number or size array for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {string|undefined} A string or undefined.\r\n */\r\nfunction optionalString(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof encoded !== 'string') {\r\n    throw new Error(`Expected a string for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../style/Icon.js\").IconOrigin|undefined} An icon origin or undefined.\r\n */\r\nfunction optionalIconOrigin(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (\r\n    encoded !== 'bottom-left' &&\r\n    encoded !== 'bottom-right' &&\r\n    encoded !== 'top-left' &&\r\n    encoded !== 'top-right'\r\n  ) {\r\n    throw new Error(\r\n      `Expected bottom-left, bottom-right, top-left, or top-right for ${property}`\r\n    );\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../style/Icon.js\").IconAnchorUnits|undefined} Icon anchor units or undefined.\r\n */\r\nfunction optionalIconAnchorUnits(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (encoded !== 'pixels' && encoded !== 'fraction') {\r\n    throw new Error(`Expected pixels or fraction for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {Array<number>|undefined} An array of numbers or undefined.\r\n */\r\nfunction optionalNumberArray(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  return requireNumberArray(encoded, property);\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Icon declutter mode.\r\n */\r\nfunction optionalDeclutterMode(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof encoded !== 'string') {\r\n    throw new Error(`Expected a string for ${property}`);\r\n  }\r\n  if (encoded !== 'declutter' && encoded !== 'obstacle' && encoded !== 'none') {\r\n    throw new Error(`Expected declutter, obstacle, or none for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {string|Array<number>|undefined} A string or an array of color values or undefined.\r\n */\r\nfunction optionalColorLike(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  return requireColorLike(encoded, property);\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>} An array of numbers.\r\n */\r\nfunction requireNumberArray(value, property) {\r\n  if (!Array.isArray(value)) {\r\n    throw new Error(`Expected an array for ${property}`);\r\n  }\r\n  const length = value.length;\r\n  for (let i = 0; i < length; ++i) {\r\n    if (typeof value[i] !== 'number') {\r\n      throw new Error(`Expected an array of numbers for ${property}`);\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {string} A string.\r\n */\r\nfunction requireString(value, property) {\r\n  if (typeof value !== 'string') {\r\n    throw new Error(`Expected a string for ${property}`);\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {number} A number.\r\n */\r\nfunction requireNumber(value, property) {\r\n  if (typeof value !== 'number') {\r\n    throw new Error(`Expected a number for ${property}`);\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>|string} A color.\r\n */\r\nfunction requireColorLike(value, property) {\r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  const array = requireNumberArray(value, property);\r\n  const length = array.length;\r\n  if (length < 3 || length > 4) {\r\n    throw new Error(`Expected a color with 3 or 4 values for ${property}`);\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {number|Array<number>} A number or an array of two numbers.\r\n */\r\nfunction requireSizeLike(value, property) {\r\n  if (typeof value === 'number') {\r\n    return value;\r\n  }\r\n  const size = requireNumberArray(value, property);\r\n  if (size.length !== 2) {\r\n    throw new Error(`Expected an array of two numbers for ${property}`);\r\n  }\r\n  return size;\r\n}\r\n", "/**\r\n * @module ol/layer/BaseVector\r\n */\r\nimport Layer from './Layer.js';\r\nimport RBush from 'rbush';\r\nimport Style, {\r\n  createDefaultStyle,\r\n  toFunction as toStyleFunction,\r\n} from '../style/Style.js';\r\nimport {\r\n  flatStylesToStyleFunction,\r\n  rulesToStyleFunction,\r\n} from '../render/canvas/style.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\r\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\r\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\r\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\r\n * higher priority.\r\n *\r\n * As an optimization decluttered features from layers with the same `className` are rendered above\r\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\r\n * behavior and place declutterd features with their own layer configure the layer with a `className`\r\n * other than `ol-layer`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  RENDER_ORDER: 'renderOrder',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Vector data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\r\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\r\n * @extends {Layer<VectorSourceType, RendererType>}\r\n * @api\r\n */\r\nclass BaseVectorLayer extends Layer {\r\n  /**\r\n   * @param {Options<VectorSourceType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    delete baseOptions.style;\r\n    delete baseOptions.renderBuffer;\r\n    delete baseOptions.updateWhileAnimating;\r\n    delete baseOptions.updateWhileInteracting;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.declutter_ =\r\n      options.declutter !== undefined ? options.declutter : false;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.renderBuffer_ =\r\n      options.renderBuffer !== undefined ? options.renderBuffer : 100;\r\n\r\n    /**\r\n     * User provided style.\r\n     * @type {import(\"../style/Style.js\").StyleLike}\r\n     * @private\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * Style function for use within the library.\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     * @private\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    this.setStyle(options.style);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileAnimating_ =\r\n      options.updateWhileAnimating !== undefined\r\n        ? options.updateWhileAnimating\r\n        : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileInteracting_ =\r\n      options.updateWhileInteracting !== undefined\r\n        ? options.updateWhileInteracting\r\n        : false;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Declutter.\r\n   */\r\n  getDeclutter() {\r\n    return this.declutter_;\r\n  }\r\n\r\n  /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\r\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @api\r\n   */\r\n  getFeatures(pixel) {\r\n    return super.getFeatures(pixel);\r\n  }\r\n\r\n  /**\r\n   * @return {number|undefined} Render buffer.\r\n   */\r\n  getRenderBuffer() {\r\n    return this.renderBuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\r\n   *     order.\r\n   */\r\n  getRenderOrder() {\r\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (\r\n      this.get(Property.RENDER_ORDER)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the style for features.  This returns whatever was passed to the `style`\r\n   * option at construction or to the `setStyle` method.\r\n   * @return {import(\"../style/Style.js\").StyleLike|null|undefined} Layer style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the style function.\r\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     animating.\r\n   */\r\n  getUpdateWhileAnimating() {\r\n    return this.updateWhileAnimating_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     interacting.\r\n   */\r\n  getUpdateWhileInteracting() {\r\n    return this.updateWhileInteracting_;\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeclutter(frameState) {\r\n    if (!frameState.declutterTree) {\r\n      frameState.declutterTree = new RBush(9);\r\n    }\r\n    /** @type {*} */ (this.getRenderer()).renderDeclutter(frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\r\n   *     Render order.\r\n   */\r\n  setRenderOrder(renderOrder) {\r\n    this.set(Property.RENDER_ORDER, renderOrder);\r\n  }\r\n\r\n  /**\r\n   * Set the style for features.  This can be a single style object, an array\r\n   * of styles, or a function that takes a feature and resolution and returns\r\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\r\n   * so only features that have their own styles will be rendered in the layer. Call\r\n   * `setStyle()` without arguments to reset to the default style. See\r\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\r\n   *\r\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\r\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\r\n   * ```js\r\n   * vectorLayer.setStyle({\r\n   *   \"fill-color\": \"yellow\",\r\n   *   \"stroke-color\": \"black\",\r\n   *   \"stroke-width\": 4\r\n   * })\r\n   * ```\r\n   *\r\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n   * @api\r\n   */\r\n  setStyle(style) {\r\n    this.style_ = toStyleLike(style);\r\n    this.styleFunction_ =\r\n      style === null ? undefined : toStyleFunction(this.style_);\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\r\n * styles, and arrays of rules are converted into style functions.\r\n *\r\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\r\n */\r\nfunction toStyleLike(style) {\r\n  if (style === undefined) {\r\n    return createDefaultStyle;\r\n  }\r\n  if (!style) {\r\n    return null;\r\n  }\r\n  if (typeof style === 'function') {\r\n    return style;\r\n  }\r\n  if (style instanceof Style) {\r\n    return style;\r\n  }\r\n  if (!Array.isArray(style)) {\r\n    return flatStylesToStyleFunction([style]);\r\n  }\r\n  if (style.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const length = style.length;\r\n  const first = style[0];\r\n\r\n  if (first instanceof Style) {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    const styles = new Array(length);\r\n    for (let i = 0; i < length; ++i) {\r\n      const candidate = style[i];\r\n      if (!(candidate instanceof Style)) {\r\n        throw new Error('Expected a list of style instances');\r\n      }\r\n      styles[i] = candidate;\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  if ('style' in first) {\r\n    /**\r\n     * @type Array<import(\"../style/flat.js\").Rule>\r\n     */\r\n    const rules = new Array(length);\r\n    for (let i = 0; i < length; ++i) {\r\n      const candidate = style[i];\r\n      if (!('style' in candidate)) {\r\n        throw new Error('Expected a list of rules with a style property');\r\n      }\r\n      rules[i] = candidate;\r\n    }\r\n    return rulesToStyleFunction(rules);\r\n  }\r\n\r\n  const flatStyles =\r\n    /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */ (style);\r\n  return flatStylesToStyleFunction(flatStyles);\r\n}\r\n\r\nexport default BaseVectorLayer;\r\n", "/**\r\n * @module ol/render/canvas/Instruction\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nconst Instruction = {\r\n  BEGIN_GEOMETRY: 0,\r\n  BEGIN_PATH: 1,\r\n  CIRCLE: 2,\r\n  CLOSE_PATH: 3,\r\n  CUSTOM: 4,\r\n  DRAW_CHARS: 5,\r\n  DRAW_IMAGE: 6,\r\n  END_GEOMETRY: 7,\r\n  FILL: 8,\r\n  MOVE_TO_LINE_TO: 9,\r\n  SET_FILL_STYLE: 10,\r\n  SET_STROKE_STYLE: 11,\r\n  STROKE: 12,\r\n};\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const fillInstruction = [Instruction.FILL];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const strokeInstruction = [Instruction.STROKE];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const beginPathInstruction = [Instruction.BEGIN_PATH];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const closePathInstruction = [Instruction.CLOSE_PATH];\r\n\r\nexport default Instruction;\r\n", "/**\r\n * @module ol/render/VectorContext\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Context for drawing geometries.  A vector context is available on render\r\n * events and does not need to be constructed directly.\r\n * @api\r\n */\r\nclass VectorContext {\r\n  /**\r\n   * Render a geometry with a custom renderer.\r\n   *\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {}\r\n\r\n  /**\r\n   * Render a geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\r\n   */\r\n  drawGeometry(geometry) {}\r\n\r\n  /**\r\n   * Set the rendering style.\r\n   *\r\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\r\n   */\r\n  setStyle(style) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   */\r\n  drawCircle(circleGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../style/Style.js\").default} style Style.\r\n   */\r\n  drawFeature(feature, style) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   */\r\n  drawGeometryCollection(geometryCollectionGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawLineString(lineStringGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPoint(pointGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPolygon(polygonGeometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawText(geometry, feature) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\r\n   */\r\n  setImageStyle(imageStyle, declutterImageWithText) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\r\n   */\r\n  setTextStyle(textStyle, declutterImageWithText) {}\r\n}\r\n\r\nexport default VectorContext;\r\n", "/**\r\n * @module ol/render/canvas/Builder\r\n */\r\nimport CanvasInstruction from './Instruction.js';\r\nimport Relationship from '../../extent/Relationship.js';\r\nimport VectorContext from '../VectorContext.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  buffer,\r\n  clone,\r\n  containsCoordinate,\r\n  coordinateRelationship,\r\n} from '../../extent.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../canvas.js';\r\nimport {equals, reverseSubArray} from '../../array.js';\r\nimport {\r\n  inflateCoordinates,\r\n  inflateCoordinatesArray,\r\n  inflateMultiCoordinatesArray,\r\n} from '../../geom/flat/inflate.js';\r\n\r\nclass CanvasBuilder extends VectorContext {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.tolerance = tolerance;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent = maxExtent;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxLineWidth = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction1_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction2_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.bufferedMaxExtent_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate.js\").Coordinate}\r\n     */\r\n    this.tmpCoordinate_ = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../canvas.js\").FillStrokeState}\r\n     */\r\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Array<number>} dashArray Dash array.\r\n   * @return {Array<number>} Dash array with pixel ratio applied\r\n   */\r\n  applyPixelRatio(dashArray) {\r\n    const pixelRatio = this.pixelRatio;\r\n    return pixelRatio == 1\r\n      ? dashArray\r\n      : dashArray.map(function (dash) {\r\n          return dash * pixelRatio;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} stride Stride.\r\n   * @protected\r\n   * @return {number} My end\r\n   */\r\n  appendFlatPointCoordinates(flatCoordinates, stride) {\r\n    const extent = this.getBufferedMaxExtent();\r\n    const tmpCoord = this.tmpCoordinate_;\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      tmpCoord[0] = flatCoordinates[i];\r\n      tmpCoord[1] = flatCoordinates[i + 1];\r\n      if (containsCoordinate(extent, tmpCoord)) {\r\n        coordinates[myEnd++] = tmpCoord[0];\r\n        coordinates[myEnd++] = tmpCoord[1];\r\n      }\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} closed Last input coordinate equals first.\r\n   * @param {boolean} skipFirst Skip first coordinate.\r\n   * @protected\r\n   * @return {number} My end.\r\n   */\r\n  appendFlatLineCoordinates(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    closed,\r\n    skipFirst\r\n  ) {\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    const extent = this.getBufferedMaxExtent();\r\n    if (skipFirst) {\r\n      offset += stride;\r\n    }\r\n    let lastXCoord = flatCoordinates[offset];\r\n    let lastYCoord = flatCoordinates[offset + 1];\r\n    const nextCoord = this.tmpCoordinate_;\r\n    let skipped = true;\r\n\r\n    let i, lastRel, nextRel;\r\n    for (i = offset + stride; i < end; i += stride) {\r\n      nextCoord[0] = flatCoordinates[i];\r\n      nextCoord[1] = flatCoordinates[i + 1];\r\n      nextRel = coordinateRelationship(extent, nextCoord);\r\n      if (nextRel !== lastRel) {\r\n        if (skipped) {\r\n          coordinates[myEnd++] = lastXCoord;\r\n          coordinates[myEnd++] = lastYCoord;\r\n          skipped = false;\r\n        }\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n      } else if (nextRel === Relationship.INTERSECTING) {\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n        skipped = false;\r\n      } else {\r\n        skipped = true;\r\n      }\r\n      lastXCoord = nextCoord[0];\r\n      lastYCoord = nextCoord[1];\r\n      lastRel = nextRel;\r\n    }\r\n\r\n    // Last coordinate equals first or only one point to append:\r\n    if ((closed && skipped) || i === offset + stride) {\r\n      coordinates[myEnd++] = lastXCoord;\r\n      coordinates[myEnd++] = lastYCoord;\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Array<number>} builderEnds Builder ends.\r\n   * @return {number} Offset.\r\n   */\r\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const builderEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        false,\r\n        false\r\n      );\r\n      builderEnds.push(builderEnd);\r\n      offset = end;\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {\r\n    this.beginGeometry(geometry, feature);\r\n\r\n    const type = geometry.getType();\r\n    const stride = geometry.getStride();\r\n    const builderBegin = this.coordinates.length;\r\n\r\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\r\n    let offset;\r\n\r\n    switch (type) {\r\n      case 'MultiPolygon':\r\n        flatCoordinates =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getOrientedFlatCoordinates();\r\n        builderEndss = [];\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        offset = 0;\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          const myEnds = [];\r\n          offset = this.drawCustomCoordinates_(\r\n            flatCoordinates,\r\n            offset,\r\n            endss[i],\r\n            stride,\r\n            myEnds\r\n          );\r\n          builderEndss.push(myEnds);\r\n        }\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          renderer,\r\n          inflateMultiCoordinatesArray,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateMultiCoordinatesArray,\r\n        ]);\r\n        break;\r\n      case 'Polygon':\r\n      case 'MultiLineString':\r\n        builderEnds = [];\r\n        flatCoordinates =\r\n          type == 'Polygon'\r\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n                geometry\r\n              ).getOrientedFlatCoordinates()\r\n            : geometry.getFlatCoordinates();\r\n        offset = this.drawCustomCoordinates_(\r\n          flatCoordinates,\r\n          0,\r\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          ).getEnds(),\r\n          stride,\r\n          builderEnds\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinatesArray,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinatesArray,\r\n        ]);\r\n        break;\r\n      case 'LineString':\r\n      case 'Circle':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatLineCoordinates(\r\n          flatCoordinates,\r\n          0,\r\n          flatCoordinates.length,\r\n          stride,\r\n          false,\r\n          false\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinates,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinates,\r\n        ]);\r\n        break;\r\n      case 'MultiPoint':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n\r\n        if (builderEnd > builderBegin) {\r\n          this.instructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            renderer,\r\n            inflateCoordinates,\r\n          ]);\r\n          this.hitDetectionInstructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            hitDetectionRenderer || renderer,\r\n            inflateCoordinates,\r\n          ]);\r\n        }\r\n        break;\r\n      case 'Point':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n        builderEnd = this.coordinates.length;\r\n\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n        ]);\r\n        break;\r\n      default:\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  beginGeometry(geometry, feature) {\r\n    this.beginGeometryInstruction1_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n    ];\r\n    this.instructions.push(this.beginGeometryInstruction1_);\r\n    this.beginGeometryInstruction2_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n    ];\r\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    return {\r\n      instructions: this.instructions,\r\n      hitDetectionInstructions: this.hitDetectionInstructions,\r\n      coordinates: this.coordinates,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reverse the hit detection instructions.\r\n   */\r\n  reverseHitDetectionInstructions() {\r\n    const hitDetectionInstructions = this.hitDetectionInstructions;\r\n    // step 1 - reverse array\r\n    hitDetectionInstructions.reverse();\r\n    // step 2 - reverse instructions within geometry blocks\r\n    let i;\r\n    const n = hitDetectionInstructions.length;\r\n    let instruction;\r\n    let type;\r\n    let begin = -1;\r\n    for (i = 0; i < n; ++i) {\r\n      instruction = hitDetectionInstructions[i];\r\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\r\n      if (type == CanvasInstruction.END_GEOMETRY) {\r\n        begin = i;\r\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\r\n        instruction[2] = i;\r\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\r\n        begin = -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    const state = this.state;\r\n    if (fillStyle) {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      state.fillStyle = asColorLike(\r\n        fillStyleColor ? fillStyleColor : defaultFillStyle\r\n      );\r\n    } else {\r\n      state.fillStyle = undefined;\r\n    }\r\n    if (strokeStyle) {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      state.strokeStyle = asColorLike(\r\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\r\n      );\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      state.lineCap =\r\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      state.lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash.slice()\r\n        : defaultLineDash;\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      state.lineDashOffset = strokeStyleLineDashOffset\r\n        ? strokeStyleLineDashOffset\r\n        : defaultLineDashOffset;\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      state.lineJoin =\r\n        strokeStyleLineJoin !== undefined\r\n          ? strokeStyleLineJoin\r\n          : defaultLineJoin;\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      state.lineWidth =\r\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      state.miterLimit =\r\n        strokeStyleMiterLimit !== undefined\r\n          ? strokeStyleMiterLimit\r\n          : defaultMiterLimit;\r\n\r\n      if (state.lineWidth > this.maxLineWidth) {\r\n        this.maxLineWidth = state.lineWidth;\r\n        // invalidate the buffered max extent cache\r\n        this.bufferedMaxExtent_ = null;\r\n      }\r\n    } else {\r\n      state.strokeStyle = undefined;\r\n      state.lineCap = undefined;\r\n      state.lineDash = null;\r\n      state.lineDashOffset = undefined;\r\n      state.lineJoin = undefined;\r\n      state.lineWidth = undefined;\r\n      state.miterLimit = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Fill instruction.\r\n   */\r\n  createFill(state) {\r\n    const fillStyle = state.fillStyle;\r\n    /** @type {Array<*>} */\r\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\r\n    if (typeof fillStyle !== 'string') {\r\n      // Fill is a pattern or gradient - align it!\r\n      fillInstruction.push(true);\r\n    }\r\n    return fillInstruction;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */\r\n  applyStroke(state) {\r\n    this.instructions.push(this.createStroke(state));\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Stroke instruction.\r\n   */\r\n  createStroke(state) {\r\n    return [\r\n      CanvasInstruction.SET_STROKE_STYLE,\r\n      state.strokeStyle,\r\n      state.lineWidth * this.pixelRatio,\r\n      state.lineCap,\r\n      state.lineJoin,\r\n      state.miterLimit,\r\n      this.applyPixelRatio(state.lineDash),\r\n      state.lineDashOffset * this.pixelRatio,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\r\n   */\r\n  updateFillStyle(state, createFill) {\r\n    const fillStyle = state.fillStyle;\r\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\r\n      if (fillStyle !== undefined) {\r\n        this.instructions.push(createFill.call(this, state));\r\n      }\r\n      state.currentFillStyle = fillStyle;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\r\n   */\r\n  updateStrokeStyle(state, applyStroke) {\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineCap = state.lineCap;\r\n    const lineDash = state.lineDash;\r\n    const lineDashOffset = state.lineDashOffset;\r\n    const lineJoin = state.lineJoin;\r\n    const lineWidth = state.lineWidth;\r\n    const miterLimit = state.miterLimit;\r\n    if (\r\n      state.currentStrokeStyle != strokeStyle ||\r\n      state.currentLineCap != lineCap ||\r\n      (lineDash != state.currentLineDash &&\r\n        !equals(state.currentLineDash, lineDash)) ||\r\n      state.currentLineDashOffset != lineDashOffset ||\r\n      state.currentLineJoin != lineJoin ||\r\n      state.currentLineWidth != lineWidth ||\r\n      state.currentMiterLimit != miterLimit\r\n    ) {\r\n      if (strokeStyle !== undefined) {\r\n        applyStroke.call(this, state);\r\n      }\r\n      state.currentStrokeStyle = strokeStyle;\r\n      state.currentLineCap = lineCap;\r\n      state.currentLineDash = lineDash;\r\n      state.currentLineDashOffset = lineDashOffset;\r\n      state.currentLineJoin = lineJoin;\r\n      state.currentLineWidth = lineWidth;\r\n      state.currentMiterLimit = miterLimit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  endGeometry(feature) {\r\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\r\n    this.beginGeometryInstruction1_ = null;\r\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\r\n    this.beginGeometryInstruction2_ = null;\r\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\r\n    this.instructions.push(endGeometryInstruction);\r\n    this.hitDetectionInstructions.push(endGeometryInstruction);\r\n  }\r\n\r\n  /**\r\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\r\n   * provided to the constructor.  To account for symbolizers that may intersect\r\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\r\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\r\n   * @protected\r\n   */\r\n  getBufferedMaxExtent() {\r\n    if (!this.bufferedMaxExtent_) {\r\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\r\n      if (this.maxLineWidth > 0) {\r\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\r\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\r\n      }\r\n    }\r\n    return this.bufferedMaxExtent_;\r\n  }\r\n}\r\n\r\nexport default CanvasBuilder;\r\n", "/**\r\n * @module ol/render/canvas/ImageBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\n\r\nclass CanvasImageBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.hitDetectionImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.imagePixelRatio_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.height_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.opacity_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\r\n     */\r\n    this.declutterMode_ = undefined;\r\n\r\n    /**\r\n     * Data shared with a text builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPoint(pointGeometry, feature) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    this.beginGeometry(pointGeometry, feature);\r\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\r\n    const stride = pointGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_ * this.imagePixelRatio_,\r\n      this.originY_ * this.imagePixelRatio_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      1,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    this.beginGeometry(multiPointGeometry, feature);\r\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\r\n    const stride = multiPointGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_ * this.imagePixelRatio_,\r\n      this.originY_ * this.imagePixelRatio_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      1,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    // FIXME this doesn't really protect us against further calls to draw*Geometry\r\n    this.anchorX_ = undefined;\r\n    this.anchorY_ = undefined;\r\n    this.hitDetectionImage_ = null;\r\n    this.image_ = null;\r\n    this.imagePixelRatio_ = undefined;\r\n    this.height_ = undefined;\r\n    this.scale_ = undefined;\r\n    this.opacity_ = undefined;\r\n    this.originX_ = undefined;\r\n    this.originY_ = undefined;\r\n    this.rotateWithView_ = undefined;\r\n    this.rotation_ = undefined;\r\n    this.width_ = undefined;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   */\r\n  setImageStyle(imageStyle, sharedData) {\r\n    const anchor = imageStyle.getAnchor();\r\n    const size = imageStyle.getSize();\r\n    const origin = imageStyle.getOrigin();\r\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\r\n    this.anchorX_ = anchor[0];\r\n    this.anchorY_ = anchor[1];\r\n    this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\r\n    this.image_ = imageStyle.getImage(this.pixelRatio);\r\n    this.height_ = size[1];\r\n    this.opacity_ = imageStyle.getOpacity();\r\n    this.originX_ = origin[0];\r\n    this.originY_ = origin[1];\r\n    this.rotateWithView_ = imageStyle.getRotateWithView();\r\n    this.rotation_ = imageStyle.getRotation();\r\n    this.scale_ = imageStyle.getScaleArray();\r\n    this.width_ = size[0];\r\n    this.declutterMode_ = imageStyle.getDeclutterMode();\r\n    this.declutterImageWithText_ = sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasImageBuilder;\r\n", "/**\r\n * @module ol/render/canvas/LineStringBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\r\n\r\nclass CanvasLineStringBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} end.\r\n   */\r\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      false,\r\n      false\r\n    );\r\n    const moveToLineToInstruction = [\r\n      CanvasInstruction.MOVE_TO_LINE_TO,\r\n      myBegin,\r\n      myEnd,\r\n    ];\r\n    this.instructions.push(moveToLineToInstruction);\r\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawLineString(lineStringGeometry, feature) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(lineStringGeometry, feature);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ],\r\n      beginPathInstruction\r\n    );\r\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\r\n    const stride = lineStringGeometry.getStride();\r\n    this.drawFlatCoordinates_(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride\r\n    );\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(multiLineStringGeometry, feature);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ],\r\n      beginPathInstruction\r\n    );\r\n    const ends = multiLineStringGeometry.getEnds();\r\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\r\n    const stride = multiLineStringGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinates_(\r\n        flatCoordinates,\r\n        offset,\r\n        /** @type {number} */ (ends[i]),\r\n        stride\r\n      );\r\n    }\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    const state = this.state;\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n    }\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */\r\n  applyStroke(state) {\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n      state.lastStroke = this.coordinates.length;\r\n    }\r\n    state.lastStroke = 0;\r\n    super.applyStroke(state);\r\n    this.instructions.push(beginPathInstruction);\r\n  }\r\n}\r\n\r\nexport default CanvasLineStringBuilder;\r\n", "/**\r\n * @module ol/render/canvas/PolygonBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  closePathInstruction,\r\n  fillInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n} from '../canvas.js';\r\nimport {snap} from '../../geom/flat/simplify.js';\r\n\r\nclass CanvasPolygonBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\r\n    const state = this.state;\r\n    const fill = state.fillStyle !== undefined;\r\n    const stroke = state.strokeStyle !== undefined;\r\n    const numEnds = ends.length;\r\n    this.instructions.push(beginPathInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction);\r\n    for (let i = 0; i < numEnds; ++i) {\r\n      const end = ends[i];\r\n      const myBegin = this.coordinates.length;\r\n      const myEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        true,\r\n        !stroke\r\n      );\r\n      const moveToLineToInstruction = [\r\n        CanvasInstruction.MOVE_TO_LINE_TO,\r\n        myBegin,\r\n        myEnd,\r\n      ];\r\n      this.instructions.push(moveToLineToInstruction);\r\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n      if (stroke) {\r\n        // Performance optimization: only call closePath() when we have a stroke.\r\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\r\n        this.instructions.push(closePathInstruction);\r\n        this.hitDetectionInstructions.push(closePathInstruction);\r\n      }\r\n      offset = end;\r\n    }\r\n    if (fill) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (stroke) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   */\r\n  drawCircle(circleGeometry, feature) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(circleGeometry, feature);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\r\n    const stride = circleGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n      false,\r\n      false\r\n    );\r\n    const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\r\n    this.instructions.push(beginPathInstruction, circleInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\r\n    if (state.fillStyle !== undefined) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawPolygon(polygonGeometry, feature) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(polygonGeometry, feature);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const ends = polygonGeometry.getEnds();\r\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = polygonGeometry.getStride();\r\n    this.drawFlatCoordinatess_(\r\n      flatCoordinates,\r\n      0,\r\n      /** @type {Array<number>} */ (ends),\r\n      stride\r\n    );\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(multiPolygonGeometry, feature);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const endss = multiPolygonGeometry.getEndss();\r\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = multiPolygonGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinatess_(\r\n        flatCoordinates,\r\n        offset,\r\n        endss[i],\r\n        stride\r\n      );\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    // We want to preserve topology when drawing polygons.  Polygons are\r\n    // simplified using quantization and point elimination. However, we might\r\n    // have received a mix of quantized and non-quantized geometries, so ensure\r\n    // that all are quantized by quantizing all coordinates in the batch.\r\n    const tolerance = this.tolerance;\r\n    if (tolerance !== 0) {\r\n      const coordinates = this.coordinates;\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = snap(coordinates[i], tolerance);\r\n      }\r\n    }\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  setFillStrokeStyles_() {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    if (fillStyle !== undefined) {\r\n      this.updateFillStyle(state, this.createFill);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.updateStrokeStyle(state, this.applyStroke);\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasPolygonBuilder;\r\n", "import {lerp} from '../../math.js';\r\n\r\n/**\r\n * Creates chunks of equal length from a linestring\r\n * @param {number} chunkLength Length of each chunk.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Start offset of the `flatCoordinates`.\r\n * @param {number} end End offset of the `flatCoordinates`.\r\n * @param {number} stride Stride.\r\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\r\n */\r\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\r\n  const chunks = [];\r\n  let cursor = offset;\r\n  let chunkM = 0;\r\n  let currentChunk = flatCoordinates.slice(offset, 2);\r\n  while (chunkM < chunkLength && cursor + stride < end) {\r\n    const [x1, y1] = currentChunk.slice(-2);\r\n    const x2 = flatCoordinates[cursor + stride];\r\n    const y2 = flatCoordinates[cursor + stride + 1];\r\n    const segmentLength = Math.sqrt(\r\n      (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)\r\n    );\r\n    chunkM += segmentLength;\r\n    if (chunkM >= chunkLength) {\r\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\r\n      const x = lerp(x1, x2, m);\r\n      const y = lerp(y1, y2, m);\r\n      currentChunk.push(x, y);\r\n      chunks.push(currentChunk);\r\n      currentChunk = [x, y];\r\n      if (chunkM == chunkLength) {\r\n        cursor += stride;\r\n      }\r\n      chunkM = 0;\r\n    } else if (chunkM < chunkLength) {\r\n      currentChunk.push(\r\n        flatCoordinates[cursor + stride],\r\n        flatCoordinates[cursor + stride + 1]\r\n      );\r\n      cursor += stride;\r\n    } else {\r\n      const missing = segmentLength - chunkM;\r\n      const x = lerp(x1, x2, missing / segmentLength);\r\n      const y = lerp(y1, y2, missing / segmentLength);\r\n      currentChunk.push(x, y);\r\n      chunks.push(currentChunk);\r\n      currentChunk = [x, y];\r\n      chunkM = 0;\r\n      cursor += stride;\r\n    }\r\n  }\r\n  if (chunkM > 0) {\r\n    chunks.push(currentChunk);\r\n  }\r\n  return chunks;\r\n}\r\n", "/**\r\n * @module ol/geom/flat/straightchunk\r\n */\r\n\r\n/**\r\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Array<number>} Start and end of the first suitable chunk of the\r\n * given `flatCoordinates`.\r\n */\r\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\r\n  let chunkStart = offset;\r\n  let chunkEnd = offset;\r\n  let chunkM = 0;\r\n  let m = 0;\r\n  let start = offset;\r\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\r\n  for (i = offset; i < end; i += stride) {\r\n    const x2 = flatCoordinates[i];\r\n    const y2 = flatCoordinates[i + 1];\r\n    if (x1 !== undefined) {\r\n      x23 = x2 - x1;\r\n      y23 = y2 - y1;\r\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\r\n      if (x12 !== undefined) {\r\n        m += m12;\r\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\r\n        if (acos > maxAngle) {\r\n          if (m > chunkM) {\r\n            chunkM = m;\r\n            chunkStart = start;\r\n            chunkEnd = i;\r\n          }\r\n          m = 0;\r\n          start = i - stride;\r\n        }\r\n      }\r\n      m12 = m23;\r\n      x12 = x23;\r\n      y12 = y23;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  m += m23;\r\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\r\n}\r\n", "/**\r\n * @module ol/render/canvas/TextBuilder\r\n */\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultPadding,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  registerFont,\r\n} from '../canvas.js';\r\nimport {getUid} from '../../util.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {lineChunk} from '../../geom/flat/linechunk.js';\r\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\r\n/**\r\n * @const\r\n * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}\r\n */\r\nexport const TEXT_ALIGN = {\r\n  'left': 0,\r\n  'center': 0.5,\r\n  'right': 1,\r\n  'top': 0,\r\n  'middle': 0.5,\r\n  'hanging': 0.2,\r\n  'alphabetic': 0.8,\r\n  'ideographic': 0.8,\r\n  'bottom': 1,\r\n};\r\n\r\nclass CanvasTextBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<HTMLCanvasElement>}\r\n     */\r\n    this.labels_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.textRotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = {};\r\n    this.fillStates[defaultFillStyle] = {fillStyle: defaultFillStyle};\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.textKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.fillKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.strokeKey_ = '';\r\n\r\n    /**\r\n     * Data shared with an image builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    const instructions = super.finish();\r\n    instructions.textStates = this.textStates;\r\n    instructions.fillStates = this.fillStates;\r\n    instructions.strokeStates = this.strokeStates;\r\n    return instructions;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  drawText(geometry, feature) {\r\n    const fillState = this.textFillState_;\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\r\n      return;\r\n    }\r\n\r\n    const coordinates = this.coordinates;\r\n    let begin = coordinates.length;\r\n\r\n    const geometryType = geometry.getType();\r\n    let flatCoordinates = null;\r\n    let stride = geometry.getStride();\r\n\r\n    if (\r\n      textState.placement === 'line' &&\r\n      (geometryType == 'LineString' ||\r\n        geometryType == 'MultiLineString' ||\r\n        geometryType == 'Polygon' ||\r\n        geometryType == 'MultiPolygon')\r\n    ) {\r\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\r\n        return;\r\n      }\r\n      let ends;\r\n      flatCoordinates = geometry.getFlatCoordinates();\r\n      if (geometryType == 'LineString') {\r\n        ends = [flatCoordinates.length];\r\n      } else if (geometryType == 'MultiLineString') {\r\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry\r\n        ).getEnds();\r\n      } else if (geometryType == 'Polygon') {\r\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\r\n          .getEnds()\r\n          .slice(0, 1);\r\n      } else if (geometryType == 'MultiPolygon') {\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        ends = [];\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          ends.push(endss[i][0]);\r\n        }\r\n      }\r\n      this.beginGeometry(geometry, feature);\r\n      const repeat = textState.repeat;\r\n      const textAlign = repeat ? undefined : textState.textAlign;\r\n      // No `justify` support for line placement.\r\n      let flatOffset = 0;\r\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\r\n        let chunks;\r\n        if (repeat) {\r\n          chunks = lineChunk(\r\n            repeat * this.resolution,\r\n            flatCoordinates,\r\n            flatOffset,\r\n            ends[o],\r\n            stride\r\n          );\r\n        } else {\r\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\r\n        }\r\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\r\n          const chunk = chunks[c];\r\n          let chunkBegin = 0;\r\n          let chunkEnd = chunk.length;\r\n          if (textAlign == undefined) {\r\n            const range = matchingChunk(\r\n              textState.maxAngle,\r\n              chunk,\r\n              0,\r\n              chunk.length,\r\n              2\r\n            );\r\n            chunkBegin = range[0];\r\n            chunkEnd = range[1];\r\n          }\r\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\r\n            coordinates.push(chunk[i], chunk[i + 1]);\r\n          }\r\n          const end = coordinates.length;\r\n          flatOffset = ends[o];\r\n          this.drawChars_(begin, end);\r\n          begin = end;\r\n        }\r\n      }\r\n      this.endGeometry(feature);\r\n    } else {\r\n      let geometryWidths = textState.overflow ? null : [];\r\n      switch (geometryType) {\r\n        case 'Point':\r\n        case 'MultiPoint':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n              geometry\r\n            ).getFlatCoordinates();\r\n          break;\r\n        case 'LineString':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoint();\r\n          break;\r\n        case 'Circle':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\r\n              geometry\r\n            ).getCenter();\r\n          break;\r\n        case 'MultiLineString':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoints();\r\n          stride = 2;\r\n          break;\r\n        case 'Polygon':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoint();\r\n          if (!textState.overflow) {\r\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\r\n          }\r\n          stride = 3;\r\n          break;\r\n        case 'MultiPolygon':\r\n          const interiorPoints =\r\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoints();\r\n          flatCoordinates = [];\r\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\r\n            if (!textState.overflow) {\r\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\r\n            }\r\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\r\n          }\r\n          if (flatCoordinates.length === 0) {\r\n            return;\r\n          }\r\n          stride = 2;\r\n          break;\r\n        default:\r\n      }\r\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n      if (end === begin) {\r\n        return;\r\n      }\r\n      if (\r\n        geometryWidths &&\r\n        (end - begin) / 2 !== flatCoordinates.length / stride\r\n      ) {\r\n        let beg = begin / 2;\r\n        geometryWidths = geometryWidths.filter((w, i) => {\r\n          const keep =\r\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\r\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\r\n          if (!keep) {\r\n            --beg;\r\n          }\r\n          return keep;\r\n        });\r\n      }\r\n\r\n      this.saveTextStates_();\r\n\r\n      if (textState.backgroundFill || textState.backgroundStroke) {\r\n        this.setFillStrokeStyle(\r\n          textState.backgroundFill,\r\n          textState.backgroundStroke\r\n        );\r\n        if (textState.backgroundFill) {\r\n          this.updateFillStyle(this.state, this.createFill);\r\n        }\r\n        if (textState.backgroundStroke) {\r\n          this.updateStrokeStyle(this.state, this.applyStroke);\r\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\r\n        }\r\n      }\r\n\r\n      this.beginGeometry(geometry, feature);\r\n\r\n      // adjust padding for negative scale\r\n      let padding = textState.padding;\r\n      if (\r\n        padding != defaultPadding &&\r\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\r\n      ) {\r\n        let p0 = textState.padding[0];\r\n        let p1 = textState.padding[1];\r\n        let p2 = textState.padding[2];\r\n        let p3 = textState.padding[3];\r\n        if (textState.scale[0] < 0) {\r\n          p1 = -p1;\r\n          p3 = -p3;\r\n        }\r\n        if (textState.scale[1] < 0) {\r\n          p0 = -p0;\r\n          p2 = -p2;\r\n        }\r\n        padding = [p0, p1, p2, p3];\r\n      }\r\n\r\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\r\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\r\n      // render time.\r\n      const pixelRatio = this.pixelRatio;\r\n      this.instructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [1, 1],\r\n        NaN,\r\n        undefined,\r\n        this.declutterImageWithText_,\r\n        padding == defaultPadding\r\n          ? defaultPadding\r\n          : padding.map(function (p) {\r\n              return p * pixelRatio;\r\n            }),\r\n        !!textState.backgroundFill,\r\n        !!textState.backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n      const scale = 1 / pixelRatio;\r\n      // Set default fill for hit detection background\r\n      const currentFillStyle = this.state.fillStyle;\r\n      if (textState.backgroundFill) {\r\n        this.state.fillStyle = defaultFillStyle;\r\n        this.hitDetectionInstructions.push(this.createFill(this.state));\r\n      }\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [scale, scale],\r\n        NaN,\r\n        undefined,\r\n        this.declutterImageWithText_,\r\n        padding,\r\n        !!textState.backgroundFill,\r\n        !!textState.backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_ ? defaultFillStyle : this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n      // Reset previous fill\r\n      if (textState.backgroundFill) {\r\n        this.state.fillStyle = currentFillStyle;\r\n        this.hitDetectionInstructions.push(this.createFill(this.state));\r\n      }\r\n\r\n      this.endGeometry(feature);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  saveTextStates_() {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    const fillState = this.textFillState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    if (strokeState) {\r\n      if (!(strokeKey in this.strokeStates)) {\r\n        this.strokeStates[strokeKey] = {\r\n          strokeStyle: strokeState.strokeStyle,\r\n          lineCap: strokeState.lineCap,\r\n          lineDashOffset: strokeState.lineDashOffset,\r\n          lineWidth: strokeState.lineWidth,\r\n          lineJoin: strokeState.lineJoin,\r\n          miterLimit: strokeState.miterLimit,\r\n          lineDash: strokeState.lineDash,\r\n        };\r\n      }\r\n    }\r\n    const textKey = this.textKey_;\r\n    if (!(textKey in this.textStates)) {\r\n      this.textStates[textKey] = {\r\n        font: textState.font,\r\n        textAlign: textState.textAlign || defaultTextAlign,\r\n        justify: textState.justify,\r\n        textBaseline: textState.textBaseline || defaultTextBaseline,\r\n        scale: textState.scale,\r\n      };\r\n    }\r\n    const fillKey = this.fillKey_;\r\n    if (fillState) {\r\n      if (!(fillKey in this.fillStates)) {\r\n        this.fillStates[fillKey] = {\r\n          fillStyle: fillState.fillStyle,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} begin Begin.\r\n   * @param {number} end End.\r\n   */\r\n  drawChars_(begin, end) {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    const textKey = this.textKey_;\r\n    const fillKey = this.fillKey_;\r\n    this.saveTextStates_();\r\n\r\n    const pixelRatio = this.pixelRatio;\r\n    const baseline = TEXT_ALIGN[textState.textBaseline];\r\n\r\n    const offsetY = this.textOffsetY_ * pixelRatio;\r\n    const text = this.text_;\r\n    const strokeWidth = strokeState\r\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\r\n      : 0;\r\n\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey,\r\n      textState.maxAngle,\r\n      pixelRatio,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth * pixelRatio,\r\n      text,\r\n      textKey,\r\n      1,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey ? defaultFillStyle : fillKey,\r\n      textState.maxAngle,\r\n      pixelRatio,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth * pixelRatio,\r\n      text,\r\n      textKey,\r\n      1 / pixelRatio,\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   */\r\n  setTextStyle(textStyle, sharedData) {\r\n    let textState, fillState, strokeState;\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        fillState = null;\r\n        this.textFillState_ = fillState;\r\n      } else {\r\n        fillState = this.textFillState_;\r\n        if (!fillState) {\r\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\r\n          this.textFillState_ = fillState;\r\n        }\r\n        fillState.fillStyle = asColorLike(\r\n          textFillStyle.getColor() || defaultFillStyle\r\n        );\r\n      }\r\n\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        strokeState = null;\r\n        this.textStrokeState_ = strokeState;\r\n      } else {\r\n        strokeState = this.textStrokeState_;\r\n        if (!strokeState) {\r\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\r\n          this.textStrokeState_ = strokeState;\r\n        }\r\n        const lineDash = textStrokeStyle.getLineDash();\r\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\r\n        const lineWidth = textStrokeStyle.getWidth();\r\n        const miterLimit = textStrokeStyle.getMiterLimit();\r\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\r\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\r\n        strokeState.lineDashOffset =\r\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\r\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\r\n        strokeState.lineWidth =\r\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\r\n        strokeState.miterLimit =\r\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\r\n        strokeState.strokeStyle = asColorLike(\r\n          textStrokeStyle.getColor() || defaultStrokeStyle\r\n        );\r\n      }\r\n\r\n      textState = this.textState_;\r\n      const font = textStyle.getFont() || defaultFont;\r\n      registerFont(font);\r\n      const textScale = textStyle.getScaleArray();\r\n      textState.overflow = textStyle.getOverflow();\r\n      textState.font = font;\r\n      textState.maxAngle = textStyle.getMaxAngle();\r\n      textState.placement = textStyle.getPlacement();\r\n      textState.textAlign = textStyle.getTextAlign();\r\n      textState.repeat = textStyle.getRepeat();\r\n      textState.justify = textStyle.getJustify();\r\n      textState.textBaseline =\r\n        textStyle.getTextBaseline() || defaultTextBaseline;\r\n      textState.backgroundFill = textStyle.getBackgroundFill();\r\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\r\n      textState.padding = textStyle.getPadding() || defaultPadding;\r\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\r\n\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textRotation = textStyle.getRotation();\r\n      this.text_ = textStyle.getText() || '';\r\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\r\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView === undefined ? false : textRotateWithView;\r\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\r\n\r\n      this.strokeKey_ = strokeState\r\n        ? (typeof strokeState.strokeStyle == 'string'\r\n            ? strokeState.strokeStyle\r\n            : getUid(strokeState.strokeStyle)) +\r\n          strokeState.lineCap +\r\n          strokeState.lineDashOffset +\r\n          '|' +\r\n          strokeState.lineWidth +\r\n          strokeState.lineJoin +\r\n          strokeState.miterLimit +\r\n          '[' +\r\n          strokeState.lineDash.join() +\r\n          ']'\r\n        : '';\r\n      this.textKey_ =\r\n        textState.font +\r\n        textState.scale +\r\n        (textState.textAlign || '?') +\r\n        (textState.repeat || '?') +\r\n        (textState.justify || '?') +\r\n        (textState.textBaseline || '?');\r\n      this.fillKey_ = fillState\r\n        ? typeof fillState.fillStyle == 'string'\r\n          ? fillState.fillStyle\r\n          : '|' + getUid(fillState.fillStyle)\r\n        : '';\r\n    }\r\n    this.declutterImageWithText_ = sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasTextBuilder;\r\n", "/**\r\n * @module ol/render/canvas/BuilderGroup\r\n */\r\n\r\nimport Builder from './Builder.js';\r\nimport ImageBuilder from './ImageBuilder.js';\r\nimport LineStringBuilder from './LineStringBuilder.js';\r\nimport PolygonBuilder from './PolygonBuilder.js';\r\nimport TextBuilder from './TextBuilder.js';\r\n\r\n/**\r\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\r\n */\r\nconst BATCH_CONSTRUCTORS = {\r\n  'Circle': PolygonBuilder,\r\n  'Default': Builder,\r\n  'Image': ImageBuilder,\r\n  'LineString': LineStringBuilder,\r\n  'Polygon': PolygonBuilder,\r\n  'Text': TextBuilder,\r\n};\r\n\r\nclass BuilderGroup {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tolerance_ = tolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\r\n     */\r\n    this.buildersByZIndex_ = {};\r\n  }\r\n\r\n  /**\r\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\r\n   */\r\n  finish() {\r\n    const builderInstructions = {};\r\n    for (const zKey in this.buildersByZIndex_) {\r\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\r\n      const builders = this.buildersByZIndex_[zKey];\r\n      for (const builderKey in builders) {\r\n        const builderInstruction = builders[builderKey].finish();\r\n        builderInstructions[zKey][builderKey] = builderInstruction;\r\n      }\r\n    }\r\n    return builderInstructions;\r\n  }\r\n\r\n  /**\r\n   * @param {number|undefined} zIndex Z index.\r\n   * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\r\n   * @return {import(\"../VectorContext.js\").default} Replay.\r\n   */\r\n  getBuilder(zIndex, builderType) {\r\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\r\n    let replays = this.buildersByZIndex_[zIndexKey];\r\n    if (replays === undefined) {\r\n      replays = {};\r\n      this.buildersByZIndex_[zIndexKey] = replays;\r\n    }\r\n    let replay = replays[builderType];\r\n    if (replay === undefined) {\r\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\r\n      replay = new Constructor(\r\n        this.tolerance_,\r\n        this.maxExtent_,\r\n        this.resolution_,\r\n        this.pixelRatio_\r\n      );\r\n      replays[builderType] = replay;\r\n    }\r\n    return replay;\r\n  }\r\n}\r\n\r\nexport default BuilderGroup;\r\n", "/**\r\n * @module ol/geom/flat/textpath\r\n */\r\nimport {lerp} from '../../math.js';\r\nimport {rotate} from './transform.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Path to put text on.\r\n * @param {number} offset Start offset of the `flatCoordinates`.\r\n * @param {number} end End offset of the `flatCoordinates`.\r\n * @param {number} stride Stride.\r\n * @param {string} text Text to place on the path.\r\n * @param {number} startM m along the path where the text starts.\r\n * @param {number} maxAngle Max angle between adjacent chars in radians.\r\n * @param {number} scale The product of the text scale and the device pixel ratio.\r\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\r\n * @param {string} font The font.\r\n * @param {Object<string, number>} cache A cache of measured widths.\r\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\r\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\r\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\r\n */\r\nexport function drawTextOnPath(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  text,\r\n  startM,\r\n  maxAngle,\r\n  scale,\r\n  measureAndCacheTextWidth,\r\n  font,\r\n  cache,\r\n  rotation\r\n) {\r\n  let x2 = flatCoordinates[offset];\r\n  let y2 = flatCoordinates[offset + 1];\r\n  let x1 = 0;\r\n  let y1 = 0;\r\n  let segmentLength = 0;\r\n  let segmentM = 0;\r\n\r\n  function advance() {\r\n    x1 = x2;\r\n    y1 = y2;\r\n    offset += stride;\r\n    x2 = flatCoordinates[offset];\r\n    y2 = flatCoordinates[offset + 1];\r\n    segmentM += segmentLength;\r\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n  }\r\n  do {\r\n    advance();\r\n  } while (offset < end - stride && segmentM + segmentLength < startM);\r\n\r\n  let interpolate =\r\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\r\n  const beginX = lerp(x1, x2, interpolate);\r\n  const beginY = lerp(y1, y2, interpolate);\r\n\r\n  const startOffset = offset - stride;\r\n  const startLength = segmentM;\r\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\r\n  while (offset < end - stride && segmentM + segmentLength < endM) {\r\n    advance();\r\n  }\r\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\r\n  const endX = lerp(x1, x2, interpolate);\r\n  const endY = lerp(y1, y2, interpolate);\r\n\r\n  // Keep text upright\r\n  let reverse;\r\n  if (rotation) {\r\n    const flat = [beginX, beginY, endX, endY];\r\n    rotate(flat, 0, 4, 2, rotation, flat, flat);\r\n    reverse = flat[0] > flat[2];\r\n  } else {\r\n    reverse = beginX > endX;\r\n  }\r\n\r\n  const PI = Math.PI;\r\n  const result = [];\r\n  const singleSegment = startOffset + stride === offset;\r\n\r\n  offset = startOffset;\r\n  segmentLength = 0;\r\n  segmentM = startLength;\r\n  x2 = flatCoordinates[offset];\r\n  y2 = flatCoordinates[offset + 1];\r\n\r\n  let previousAngle;\r\n  // All on the same segment\r\n  if (singleSegment) {\r\n    advance();\r\n\r\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      previousAngle += previousAngle > 0 ? -PI : PI;\r\n    }\r\n    const x = (endX + beginX) / 2;\r\n    const y = (endY + beginY) / 2;\r\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\r\n    return result;\r\n  }\r\n\r\n  // rendering across line segments\r\n  text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\r\n\r\n  for (let i = 0, ii = text.length; i < ii; ) {\r\n    advance();\r\n    let angle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      angle += angle > 0 ? -PI : PI;\r\n    }\r\n    if (previousAngle !== undefined) {\r\n      let delta = angle - previousAngle;\r\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\r\n      if (Math.abs(delta) > maxAngle) {\r\n        return null;\r\n      }\r\n    }\r\n    previousAngle = angle;\r\n\r\n    const iStart = i;\r\n    let charLength = 0;\r\n    for (; i < ii; ++i) {\r\n      const index = reverse ? ii - i - 1 : i;\r\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\r\n      if (\r\n        offset + stride < end &&\r\n        segmentM + segmentLength < startM + charLength + len / 2\r\n      ) {\r\n        break;\r\n      }\r\n      charLength += len;\r\n    }\r\n    if (i === iStart) {\r\n      continue;\r\n    }\r\n    const chars = reverse\r\n      ? text.substring(ii - iStart, ii - i)\r\n      : text.substring(iStart, i);\r\n    interpolate =\r\n      segmentLength === 0\r\n        ? 0\r\n        : (startM + charLength / 2 - segmentM) / segmentLength;\r\n    const x = lerp(x1, x2, interpolate);\r\n    const y = lerp(y1, y2, interpolate);\r\n    result.push([x, y, charLength / 2, angle, chars]);\r\n    startM += charLength;\r\n  }\r\n  return result;\r\n}\r\n", "/**\r\n * @module ol/render/canvas/Executor\r\n */\r\nimport CanvasInstruction from './Instruction.js';\r\nimport {TEXT_ALIGN} from './TextBuilder.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n  setFromArray as transformSetFromArray,\r\n} from '../../transform.js';\r\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\r\nimport {\r\n  defaultPadding,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  drawImageOrLabel,\r\n  getTextDimensions,\r\n  measureAndCacheTextWidth,\r\n} from '../canvas.js';\r\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\r\nimport {equals} from '../../array.js';\r\nimport {lineStringLength} from '../../geom/flat/length.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\n\r\n/**\r\n * @typedef {Object} BBox\r\n * @property {number} minX Minimal x.\r\n * @property {number} minY Minimal y.\r\n * @property {number} maxX Maximal x.\r\n * @property {number} maxY Maximal y\r\n * @property {*} value Value.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageOrLabelDimensions\r\n * @property {number} drawImageX DrawImageX.\r\n * @property {number} drawImageY DrawImageY.\r\n * @property {number} drawImageW DrawImageW.\r\n * @property {number} drawImageH DrawImageH.\r\n * @property {number} originX OriginX.\r\n * @property {number} originY OriginY.\r\n * @property {Array<number>} scale Scale.\r\n * @property {BBox} declutterBox DeclutterBox.\r\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\r\n */\r\n\r\n/**\r\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * @type {import(\"../../extent.js\").Extent}\r\n */\r\nconst tmpExtent = createEmpty();\r\n\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p1 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p2 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p3 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p4 = [];\r\n\r\n/**\r\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\r\n * @return {BBox} Declutter bbox.\r\n */\r\nfunction getDeclutterBox(replayImageOrLabelArgs) {\r\n  return replayImageOrLabelArgs[3].declutterBox;\r\n}\r\n\r\nconst rtlRegEx = new RegExp(\r\n  /* eslint-disable prettier/prettier */\r\n  '[' +\r\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\r\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\r\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\r\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\r\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\r\n  ']'\r\n  /* eslint-enable prettier/prettier */\r\n);\r\n\r\n/**\r\n * @param {string} text Text.\r\n * @param {CanvasTextAlign} align Alignment.\r\n * @return {number} Text alignment.\r\n */\r\nfunction horizontalTextAlign(text, align) {\r\n  if (align === 'start') {\r\n    align = rtlRegEx.test(text) ? 'right' : 'left';\r\n  } else if (align === 'end') {\r\n    align = rtlRegEx.test(text) ? 'left' : 'right';\r\n  }\r\n  return TEXT_ALIGN[align];\r\n}\r\n\r\n/**\r\n * @param {Array<string>} acc Accumulator.\r\n * @param {string} line Line of text.\r\n * @param {number} i Index\r\n * @return {Array<string>} Accumulator.\r\n */\r\nfunction createTextChunks(acc, line, i) {\r\n  if (i > 0) {\r\n    acc.push('\\n', '');\r\n  }\r\n  acc.push(line, '');\r\n  return acc;\r\n}\r\n\r\nclass Executor {\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The replay can have overlapping geometries.\r\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions\r\n   */\r\n  constructor(resolution, pixelRatio, overlaps, instructions) {\r\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps = overlaps;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.alignFill_;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = instructions.instructions;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = instructions.coordinates;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\r\n     */\r\n    this.coordinateCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"../../transform.js\").Transform}\r\n     */\r\n    this.renderedTransform_ = createTransform();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = 0;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = instructions.fillStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = instructions.strokeStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = instructions.textStates || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, number>>}\r\n     */\r\n    this.widths_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, import(\"../canvas.js\").Label>}\r\n     */\r\n    this.labels_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} text Text.\r\n   * @param {string} textKey Text style key.\r\n   * @param {string} fillKey Fill style key.\r\n   * @param {string} strokeKey Stroke style key.\r\n   * @return {import(\"../canvas.js\").Label} Label.\r\n   */\r\n  createLabel(text, textKey, fillKey, strokeKey) {\r\n    const key = text + textKey + fillKey + strokeKey;\r\n    if (this.labels_[key]) {\r\n      return this.labels_[key];\r\n    }\r\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\r\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\r\n    const textState = this.textStates[textKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const scale = [\r\n      textState.scale[0] * pixelRatio,\r\n      textState.scale[1] * pixelRatio,\r\n    ];\r\n    const textIsArray = Array.isArray(text);\r\n    const align = textState.justify\r\n      ? TEXT_ALIGN[textState.justify]\r\n      : horizontalTextAlign(\r\n          Array.isArray(text) ? text[0] : text,\r\n          textState.textAlign || defaultTextAlign\r\n        );\r\n    const strokeWidth =\r\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    const chunks = textIsArray\r\n      ? text\r\n      : text.split('\\n').reduce(createTextChunks, []);\r\n\r\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\r\n      textState,\r\n      chunks\r\n    );\r\n    const renderWidth = width + strokeWidth;\r\n    const contextInstructions = [];\r\n    // make canvas 2 pixels wider to account for italic text width measurement errors\r\n    const w = (renderWidth + 2) * scale[0];\r\n    const h = (height + strokeWidth) * scale[1];\r\n    /** @type {import(\"../canvas.js\").Label} */\r\n    const label = {\r\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\r\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\r\n      contextInstructions: contextInstructions,\r\n    };\r\n    if (scale[0] != 1 || scale[1] != 1) {\r\n      contextInstructions.push('scale', scale);\r\n    }\r\n    if (strokeKey) {\r\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\r\n      contextInstructions.push('lineWidth', strokeWidth);\r\n      contextInstructions.push('lineCap', strokeState.lineCap);\r\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\r\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\r\n      contextInstructions.push('setLineDash', [strokeState.lineDash]);\r\n      contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\r\n    }\r\n    if (fillKey) {\r\n      contextInstructions.push('fillStyle', fillState.fillStyle);\r\n    }\r\n    contextInstructions.push('textBaseline', 'middle');\r\n    contextInstructions.push('textAlign', 'center');\r\n    const leftRight = 0.5 - align;\r\n    let x = align * renderWidth + leftRight * strokeWidth;\r\n    const strokeInstructions = [];\r\n    const fillInstructions = [];\r\n    let lineHeight = 0;\r\n    let lineOffset = 0;\r\n    let widthHeightIndex = 0;\r\n    let lineWidthIndex = 0;\r\n    let previousFont;\r\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\r\n      const text = chunks[i];\r\n      if (text === '\\n') {\r\n        lineOffset += lineHeight;\r\n        lineHeight = 0;\r\n        x = align * renderWidth + leftRight * strokeWidth;\r\n        ++lineWidthIndex;\r\n        continue;\r\n      }\r\n      const font = chunks[i + 1] || textState.font;\r\n      if (font !== previousFont) {\r\n        if (strokeKey) {\r\n          strokeInstructions.push('font', font);\r\n        }\r\n        if (fillKey) {\r\n          fillInstructions.push('font', font);\r\n        }\r\n        previousFont = font;\r\n      }\r\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\r\n      const fillStrokeArgs = [\r\n        text,\r\n        x +\r\n          leftRight * widths[widthHeightIndex] +\r\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\r\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\r\n      ];\r\n      x += widths[widthHeightIndex];\r\n      if (strokeKey) {\r\n        strokeInstructions.push('strokeText', fillStrokeArgs);\r\n      }\r\n      if (fillKey) {\r\n        fillInstructions.push('fillText', fillStrokeArgs);\r\n      }\r\n      ++widthHeightIndex;\r\n    }\r\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\r\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\r\n    this.labels_[key] = label;\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   */\r\n  replayTextBackground_(\r\n    context,\r\n    p1,\r\n    p2,\r\n    p3,\r\n    p4,\r\n    fillInstruction,\r\n    strokeInstruction\r\n  ) {\r\n    context.beginPath();\r\n    context.moveTo.apply(context, p1);\r\n    context.lineTo.apply(context, p2);\r\n    context.lineTo.apply(context, p3);\r\n    context.lineTo.apply(context, p4);\r\n    context.lineTo.apply(context, p1);\r\n    if (fillInstruction) {\r\n      this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);\r\n      this.fill_(context);\r\n    }\r\n    if (strokeInstruction) {\r\n      this.setStrokeStyle_(\r\n        context,\r\n        /** @type {Array<*>} */ (strokeInstruction)\r\n      );\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} sheetWidth Width of the sprite sheet.\r\n   * @param {number} sheetHeight Height of the sprite sheet.\r\n   * @param {number} centerX X.\r\n   * @param {number} centerY Y.\r\n   * @param {number} width Width.\r\n   * @param {number} height Height.\r\n   * @param {number} anchorX Anchor X.\r\n   * @param {number} anchorY Anchor Y.\r\n   * @param {number} originX Origin X.\r\n   * @param {number} originY Origin Y.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"../../size.js\").Size} scale Scale.\r\n   * @param {boolean} snapToPixel Snap to pixel.\r\n   * @param {Array<number>} padding Padding.\r\n   * @param {boolean} fillStroke Background fill or stroke.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\r\n   */\r\n  calculateImageOrLabelDimensions_(\r\n    sheetWidth,\r\n    sheetHeight,\r\n    centerX,\r\n    centerY,\r\n    width,\r\n    height,\r\n    anchorX,\r\n    anchorY,\r\n    originX,\r\n    originY,\r\n    rotation,\r\n    scale,\r\n    snapToPixel,\r\n    padding,\r\n    fillStroke,\r\n    feature\r\n  ) {\r\n    anchorX *= scale[0];\r\n    anchorY *= scale[1];\r\n    let x = centerX - anchorX;\r\n    let y = centerY - anchorY;\r\n\r\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\r\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\r\n    const boxW = padding[3] + w * scale[0] + padding[1];\r\n    const boxH = padding[0] + h * scale[1] + padding[2];\r\n    const boxX = x - padding[3];\r\n    const boxY = y - padding[0];\r\n\r\n    if (fillStroke || rotation !== 0) {\r\n      p1[0] = boxX;\r\n      p4[0] = boxX;\r\n      p1[1] = boxY;\r\n      p2[1] = boxY;\r\n      p2[0] = boxX + boxW;\r\n      p3[0] = p2[0];\r\n      p3[1] = boxY + boxH;\r\n      p4[1] = p3[1];\r\n    }\r\n\r\n    let transform;\r\n    if (rotation !== 0) {\r\n      transform = composeTransform(\r\n        createTransform(),\r\n        centerX,\r\n        centerY,\r\n        1,\r\n        1,\r\n        rotation,\r\n        -centerX,\r\n        -centerY\r\n      );\r\n\r\n      applyTransform(transform, p1);\r\n      applyTransform(transform, p2);\r\n      applyTransform(transform, p3);\r\n      applyTransform(transform, p4);\r\n      createOrUpdate(\r\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\r\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\r\n        tmpExtent\r\n      );\r\n    } else {\r\n      createOrUpdate(\r\n        Math.min(boxX, boxX + boxW),\r\n        Math.min(boxY, boxY + boxH),\r\n        Math.max(boxX, boxX + boxW),\r\n        Math.max(boxY, boxY + boxH),\r\n        tmpExtent\r\n      );\r\n    }\r\n    if (snapToPixel) {\r\n      x = Math.round(x);\r\n      y = Math.round(y);\r\n    }\r\n    return {\r\n      drawImageX: x,\r\n      drawImageY: y,\r\n      drawImageW: w,\r\n      drawImageH: h,\r\n      originX: originX,\r\n      originY: originY,\r\n      declutterBox: {\r\n        minX: tmpExtent[0],\r\n        minY: tmpExtent[1],\r\n        maxX: tmpExtent[2],\r\n        maxY: tmpExtent[3],\r\n        value: feature,\r\n      },\r\n      canvasTransform: transform,\r\n      scale: scale,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\r\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\r\n   * @param {number} opacity Opacity.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   * @return {boolean} The image or label was rendered.\r\n   */\r\n  replayImageOrLabel_(\r\n    context,\r\n    contextScale,\r\n    imageOrLabel,\r\n    dimensions,\r\n    opacity,\r\n    fillInstruction,\r\n    strokeInstruction\r\n  ) {\r\n    const fillStroke = !!(fillInstruction || strokeInstruction);\r\n\r\n    const box = dimensions.declutterBox;\r\n    const canvas = context.canvas;\r\n    const strokePadding = strokeInstruction\r\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\r\n      : 0;\r\n    const intersects =\r\n      box.minX - strokePadding <= canvas.width / contextScale &&\r\n      box.maxX + strokePadding >= 0 &&\r\n      box.minY - strokePadding <= canvas.height / contextScale &&\r\n      box.maxY + strokePadding >= 0;\r\n\r\n    if (intersects) {\r\n      if (fillStroke) {\r\n        this.replayTextBackground_(\r\n          context,\r\n          p1,\r\n          p2,\r\n          p3,\r\n          p4,\r\n          /** @type {Array<*>} */ (fillInstruction),\r\n          /** @type {Array<*>} */ (strokeInstruction)\r\n        );\r\n      }\r\n      drawImageOrLabel(\r\n        context,\r\n        dimensions.canvasTransform,\r\n        opacity,\r\n        imageOrLabel,\r\n        dimensions.originX,\r\n        dimensions.originY,\r\n        dimensions.drawImageW,\r\n        dimensions.drawImageH,\r\n        dimensions.drawImageX,\r\n        dimensions.drawImageY,\r\n        dimensions.scale\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   */\r\n  fill_(context) {\r\n    if (this.alignFill_) {\r\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\r\n      const repeatSize = 512 * this.pixelRatio;\r\n      context.save();\r\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\r\n      context.rotate(this.viewRotation_);\r\n    }\r\n    context.fill();\r\n    if (this.alignFill_) {\r\n      context.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {Array<*>} instruction Instruction.\r\n   */\r\n  setStrokeStyle_(context, instruction) {\r\n    context['strokeStyle'] =\r\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\r\n    context.lineWidth = /** @type {number} */ (instruction[2]);\r\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\r\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\r\n    context.miterLimit = /** @type {number} */ (instruction[5]);\r\n    context.lineDashOffset = /** @type {number} */ (instruction[7]);\r\n    context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {string|Array<string>} text The text to draw.\r\n   * @param {string} textKey The key of the text state.\r\n   * @param {string} strokeKey The key for the stroke state.\r\n   * @param {string} fillKey The key for the fill state.\r\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\r\n   */\r\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\r\n    const textState = this.textStates[textKey];\r\n\r\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\r\n\r\n    const strokeState = this.strokeStates[strokeKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const align = horizontalTextAlign(\r\n      Array.isArray(text) ? text[0] : text,\r\n      textState.textAlign || defaultTextAlign\r\n    );\r\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\r\n    const strokeWidth =\r\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    // Remove the 2 pixels we added in createLabel() for the anchor\r\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\r\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\r\n    const anchorY =\r\n      (baseline * label.height) / pixelRatio +\r\n      2 * (0.5 - baseline) * strokeWidth;\r\n\r\n    return {\r\n      label: label,\r\n      anchorX: anchorX,\r\n      anchorY: anchorY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {Array<*>} instructions Instructions array.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  execute_(\r\n    context,\r\n    contextScale,\r\n    transform,\r\n    instructions,\r\n    snapToPixel,\r\n    featureCallback,\r\n    hitExtent,\r\n    declutterTree\r\n  ) {\r\n    /** @type {Array<number>} */\r\n    let pixelCoordinates;\r\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\r\n      pixelCoordinates = this.pixelCoordinates_;\r\n    } else {\r\n      if (!this.pixelCoordinates_) {\r\n        this.pixelCoordinates_ = [];\r\n      }\r\n      pixelCoordinates = transform2D(\r\n        this.coordinates,\r\n        0,\r\n        this.coordinates.length,\r\n        2,\r\n        transform,\r\n        this.pixelCoordinates_\r\n      );\r\n      transformSetFromArray(this.renderedTransform_, transform);\r\n    }\r\n    let i = 0; // instruction index\r\n    const ii = instructions.length; // end of instructions\r\n    let d = 0; // data index\r\n    let dd; // end of per-instruction data\r\n    let anchorX,\r\n      anchorY,\r\n      prevX,\r\n      prevY,\r\n      roundX,\r\n      roundY,\r\n      image,\r\n      text,\r\n      textKey,\r\n      strokeKey,\r\n      fillKey;\r\n    let pendingFill = 0;\r\n    let pendingStroke = 0;\r\n    let lastFillInstruction = null;\r\n    let lastStrokeInstruction = null;\r\n    const coordinateCache = this.coordinateCache_;\r\n    const viewRotation = this.viewRotation_;\r\n    const viewRotationFromTransform =\r\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\r\n\r\n    const state = /** @type {import(\"../../render.js\").State} */ ({\r\n      context: context,\r\n      pixelRatio: this.pixelRatio,\r\n      resolution: this.resolution,\r\n      rotation: viewRotation,\r\n    });\r\n\r\n    // When the batch size gets too big, performance decreases. 200 is a good\r\n    // balance between batch size and number of fill/stroke instructions.\r\n    const batchSize =\r\n      this.instructions != instructions || this.overlaps ? 0 : 200;\r\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\r\n    let x, y, currentGeometry;\r\n    while (i < ii) {\r\n      const instruction = instructions[i];\r\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\r\n        instruction[0]\r\n      );\r\n      switch (type) {\r\n        case CanvasInstruction.BEGIN_GEOMETRY:\r\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n            instruction[1]\r\n          );\r\n          currentGeometry = instruction[3];\r\n          if (!feature.getGeometry()) {\r\n            i = /** @type {number} */ (instruction[2]);\r\n          } else if (\r\n            hitExtent !== undefined &&\r\n            !intersects(hitExtent, currentGeometry.getExtent())\r\n          ) {\r\n            i = /** @type {number} */ (instruction[2]) + 1;\r\n          } else {\r\n            ++i;\r\n          }\r\n          break;\r\n        case CanvasInstruction.BEGIN_PATH:\r\n          if (pendingFill > batchSize) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n          }\r\n          if (pendingStroke > batchSize) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          if (!pendingFill && !pendingStroke) {\r\n            context.beginPath();\r\n            prevX = NaN;\r\n            prevY = NaN;\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CIRCLE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          const x1 = pixelCoordinates[d];\r\n          const y1 = pixelCoordinates[d + 1];\r\n          const x2 = pixelCoordinates[d + 2];\r\n          const y2 = pixelCoordinates[d + 3];\r\n          const dx = x2 - x1;\r\n          const dy = y2 - y1;\r\n          const r = Math.sqrt(dx * dx + dy * dy);\r\n          context.moveTo(x1 + r, y1);\r\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CLOSE_PATH:\r\n          context.closePath();\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CUSTOM:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = instruction[2];\r\n          const geometry =\r\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\r\n              instruction[3]\r\n            );\r\n          const renderer = instruction[4];\r\n          const fn = instruction.length == 6 ? instruction[5] : undefined;\r\n          state.geometry = geometry;\r\n          state.feature = feature;\r\n          if (!(i in coordinateCache)) {\r\n            coordinateCache[i] = [];\r\n          }\r\n          const coords = coordinateCache[i];\r\n          if (fn) {\r\n            fn(pixelCoordinates, d, dd, 2, coords);\r\n          } else {\r\n            coords[0] = pixelCoordinates[d];\r\n            coords[1] = pixelCoordinates[d + 1];\r\n            coords.length = 2;\r\n          }\r\n          renderer(coords, state);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_IMAGE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          image =\r\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\r\n              instruction[3]\r\n            );\r\n\r\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\r\n          anchorX = /** @type {number} */ (instruction[4]);\r\n          anchorY = /** @type {number} */ (instruction[5]);\r\n          let height = /** @type {number} */ (instruction[6]);\r\n          const opacity = /** @type {number} */ (instruction[7]);\r\n          const originX = /** @type {number} */ (instruction[8]);\r\n          const originY = /** @type {number} */ (instruction[9]);\r\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\r\n          let rotation = /** @type {number} */ (instruction[11]);\r\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\r\n            instruction[12]\r\n          );\r\n          let width = /** @type {number} */ (instruction[13]);\r\n          const declutterMode =\r\n            /** @type {\"declutter\"|\"obstacle\"|\"none\"|undefined} */ (\r\n              instruction[14]\r\n            );\r\n          const declutterImageWithText =\r\n            /** @type {import(\"../canvas.js\").DeclutterImageWithText} */ (\r\n              instruction[15]\r\n            );\r\n\r\n          if (!image && instruction.length >= 20) {\r\n            // create label images\r\n            text = /** @type {string} */ (instruction[19]);\r\n            textKey = /** @type {string} */ (instruction[20]);\r\n            strokeKey = /** @type {string} */ (instruction[21]);\r\n            fillKey = /** @type {string} */ (instruction[22]);\r\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\r\n              text,\r\n              textKey,\r\n              strokeKey,\r\n              fillKey\r\n            );\r\n            image = labelWithAnchor.label;\r\n            instruction[3] = image;\r\n            const textOffsetX = /** @type {number} */ (instruction[23]);\r\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\r\n            instruction[4] = anchorX;\r\n            const textOffsetY = /** @type {number} */ (instruction[24]);\r\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\r\n            instruction[5] = anchorY;\r\n            height = image.height;\r\n            instruction[6] = height;\r\n            width = image.width;\r\n            instruction[13] = width;\r\n          }\r\n\r\n          let geometryWidths;\r\n          if (instruction.length > 25) {\r\n            geometryWidths = /** @type {number} */ (instruction[25]);\r\n          }\r\n\r\n          let padding, backgroundFill, backgroundStroke;\r\n          if (instruction.length > 17) {\r\n            padding = /** @type {Array<number>} */ (instruction[16]);\r\n            backgroundFill = /** @type {boolean} */ (instruction[17]);\r\n            backgroundStroke = /** @type {boolean} */ (instruction[18]);\r\n          } else {\r\n            padding = defaultPadding;\r\n            backgroundFill = false;\r\n            backgroundStroke = false;\r\n          }\r\n\r\n          if (rotateWithView && viewRotationFromTransform) {\r\n            // Canvas is expected to be rotated to reverse view rotation.\r\n            rotation += viewRotation;\r\n          } else if (!rotateWithView && !viewRotationFromTransform) {\r\n            // Canvas is not rotated, images need to be rotated back to be north-up.\r\n            rotation -= viewRotation;\r\n          }\r\n          let widthIndex = 0;\r\n          for (; d < dd; d += 2) {\r\n            if (\r\n              geometryWidths &&\r\n              geometryWidths[widthIndex++] < width / this.pixelRatio\r\n            ) {\r\n              continue;\r\n            }\r\n            const dimensions = this.calculateImageOrLabelDimensions_(\r\n              image.width,\r\n              image.height,\r\n              pixelCoordinates[d],\r\n              pixelCoordinates[d + 1],\r\n              width,\r\n              height,\r\n              anchorX,\r\n              anchorY,\r\n              originX,\r\n              originY,\r\n              rotation,\r\n              scale,\r\n              snapToPixel,\r\n              padding,\r\n              backgroundFill || backgroundStroke,\r\n              feature\r\n            );\r\n            /** @type {ReplayImageOrLabelArgs} */\r\n            const args = [\r\n              context,\r\n              contextScale,\r\n              image,\r\n              dimensions,\r\n              opacity,\r\n              backgroundFill\r\n                ? /** @type {Array<*>} */ (lastFillInstruction)\r\n                : null,\r\n              backgroundStroke\r\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\r\n                : null,\r\n            ];\r\n            if (declutterTree) {\r\n              if (declutterMode === 'none') {\r\n                // not rendered in declutter group\r\n                continue;\r\n              } else if (declutterMode === 'obstacle') {\r\n                // will always be drawn, thus no collision detection, but insert as obstacle\r\n                declutterTree.insert(dimensions.declutterBox);\r\n                continue;\r\n              } else {\r\n                let imageArgs;\r\n                let imageDeclutterBox;\r\n                if (declutterImageWithText) {\r\n                  const index = dd - d;\r\n                  if (!declutterImageWithText[index]) {\r\n                    // We now have the image for an image+text combination.\r\n                    declutterImageWithText[index] = args;\r\n                    // Don't render anything for now, wait for the text.\r\n                    continue;\r\n                  }\r\n                  imageArgs = declutterImageWithText[index];\r\n                  delete declutterImageWithText[index];\r\n                  imageDeclutterBox = getDeclutterBox(imageArgs);\r\n                  if (declutterTree.collides(imageDeclutterBox)) {\r\n                    continue;\r\n                  }\r\n                }\r\n                if (declutterTree.collides(dimensions.declutterBox)) {\r\n                  continue;\r\n                }\r\n                if (imageArgs) {\r\n                  // We now have image and text for an image+text combination.\r\n                  declutterTree.insert(imageDeclutterBox);\r\n                  // Render the image before we render the text.\r\n                  this.replayImageOrLabel_.apply(this, imageArgs);\r\n                }\r\n                declutterTree.insert(dimensions.declutterBox);\r\n              }\r\n            }\r\n            this.replayImageOrLabel_.apply(this, args);\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_CHARS:\r\n          const begin = /** @type {number} */ (instruction[1]);\r\n          const end = /** @type {number} */ (instruction[2]);\r\n          const baseline = /** @type {number} */ (instruction[3]);\r\n          const overflow = /** @type {number} */ (instruction[4]);\r\n          fillKey = /** @type {string} */ (instruction[5]);\r\n          const maxAngle = /** @type {number} */ (instruction[6]);\r\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\r\n          const offsetY = /** @type {number} */ (instruction[8]);\r\n          strokeKey = /** @type {string} */ (instruction[9]);\r\n          const strokeWidth = /** @type {number} */ (instruction[10]);\r\n          text = /** @type {string} */ (instruction[11]);\r\n          textKey = /** @type {string} */ (instruction[12]);\r\n          const pixelRatioScale = [\r\n            /** @type {number} */ (instruction[13]),\r\n            /** @type {number} */ (instruction[13]),\r\n          ];\r\n\r\n          const textState = this.textStates[textKey];\r\n          const font = textState.font;\r\n          const textScale = [\r\n            textState.scale[0] * measurePixelRatio,\r\n            textState.scale[1] * measurePixelRatio,\r\n          ];\r\n\r\n          let cachedWidths;\r\n          if (font in this.widths_) {\r\n            cachedWidths = this.widths_[font];\r\n          } else {\r\n            cachedWidths = {};\r\n            this.widths_[font] = cachedWidths;\r\n          }\r\n\r\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\r\n          const textLength =\r\n            Math.abs(textScale[0]) *\r\n            measureAndCacheTextWidth(font, text, cachedWidths);\r\n          if (overflow || textLength <= pathLength) {\r\n            const textAlign = this.textStates[textKey].textAlign;\r\n            const startM =\r\n              (pathLength - textLength) * horizontalTextAlign(text, textAlign);\r\n            const parts = drawTextOnPath(\r\n              pixelCoordinates,\r\n              begin,\r\n              end,\r\n              2,\r\n              text,\r\n              startM,\r\n              maxAngle,\r\n              Math.abs(textScale[0]),\r\n              measureAndCacheTextWidth,\r\n              font,\r\n              cachedWidths,\r\n              viewRotationFromTransform ? 0 : this.viewRotation_\r\n            );\r\n            drawChars: if (parts) {\r\n              /** @type {Array<ReplayImageOrLabelArgs>} */\r\n              const replayImageOrLabelArgs = [];\r\n              let c, cc, chars, label, part;\r\n              if (strokeKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, '', strokeKey);\r\n                  anchorX =\r\n                    /** @type {number} */ (part[2]) +\r\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\r\n                  anchorY =\r\n                    baseline * label.height +\r\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\r\n                      textScale[0] -\r\n                    offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature\r\n                  );\r\n                  if (\r\n                    declutterTree &&\r\n                    declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    contextScale,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (fillKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, fillKey, '');\r\n                  anchorX = /** @type {number} */ (part[2]);\r\n                  anchorY = baseline * label.height - offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature\r\n                  );\r\n                  if (\r\n                    declutterTree &&\r\n                    declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    contextScale,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (declutterTree) {\r\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\r\n              }\r\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\r\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\r\n              }\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.END_GEOMETRY:\r\n          if (featureCallback !== undefined) {\r\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n              instruction[1]\r\n            );\r\n            const result = featureCallback(feature, currentGeometry);\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.FILL:\r\n          if (batchSize) {\r\n            pendingFill++;\r\n          } else {\r\n            this.fill_(context);\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.MOVE_TO_LINE_TO:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          x = pixelCoordinates[d];\r\n          y = pixelCoordinates[d + 1];\r\n          roundX = (x + 0.5) | 0;\r\n          roundY = (y + 0.5) | 0;\r\n          if (roundX !== prevX || roundY !== prevY) {\r\n            context.moveTo(x, y);\r\n            prevX = roundX;\r\n            prevY = roundY;\r\n          }\r\n          for (d += 2; d < dd; d += 2) {\r\n            x = pixelCoordinates[d];\r\n            y = pixelCoordinates[d + 1];\r\n            roundX = (x + 0.5) | 0;\r\n            roundY = (y + 0.5) | 0;\r\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\r\n              context.lineTo(x, y);\r\n              prevX = roundX;\r\n              prevY = roundY;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_FILL_STYLE:\r\n          lastFillInstruction = instruction;\r\n          this.alignFill_ = instruction[2];\r\n\r\n          if (pendingFill) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n            if (pendingStroke) {\r\n              context.stroke();\r\n              pendingStroke = 0;\r\n            }\r\n          }\r\n\r\n          context.fillStyle =\r\n            /** @type {import(\"../../colorlike.js\").ColorLike} */ (\r\n              instruction[1]\r\n            );\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_STROKE_STYLE:\r\n          lastStrokeInstruction = instruction;\r\n          if (pendingStroke) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.STROKE:\r\n          if (batchSize) {\r\n            pendingStroke++;\r\n          } else {\r\n            context.stroke();\r\n          }\r\n          ++i;\r\n          break;\r\n        default: // consume the instruction anyway, to avoid an infinite loop\r\n          ++i;\r\n          break;\r\n      }\r\n    }\r\n    if (pendingFill) {\r\n      this.fill_(context);\r\n    }\r\n    if (pendingStroke) {\r\n      context.stroke();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\r\n   */\r\n  execute(\r\n    context,\r\n    contextScale,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    declutterTree\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    this.execute_(\r\n      context,\r\n      contextScale,\r\n      transform,\r\n      this.instructions,\r\n      snapToPixel,\r\n      undefined,\r\n      undefined,\r\n      declutterTree\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  executeHitDetection(\r\n    context,\r\n    transform,\r\n    viewRotation,\r\n    featureCallback,\r\n    hitExtent\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    return this.execute_(\r\n      context,\r\n      1,\r\n      transform,\r\n      this.hitDetectionInstructions,\r\n      true,\r\n      featureCallback,\r\n      hitExtent\r\n    );\r\n  }\r\n}\r\n\r\nexport default Executor;\r\n", "/**\r\n * @module ol/render/canvas/ExecutorGroup\r\n */\r\n\r\nimport Executor from './Executor.js';\r\nimport {ascending} from '../../array.js';\r\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {isEmpty} from '../../obj.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"../canvas.js\").BuilderType>}\r\n */\r\nconst ORDER = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];\r\n\r\nclass ExecutorGroup {\r\n  /**\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\r\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\r\n   * should be set here, unless the target context does not exceed that extent (which\r\n   * can be the case when rendering to tiles).\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\r\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\r\n   * The serializable instructions.\r\n   * @param {number} [renderBuffer] Optional rendering buffer.\r\n   */\r\n  constructor(\r\n    maxExtent,\r\n    resolution,\r\n    pixelRatio,\r\n    overlaps,\r\n    allInstructions,\r\n    renderBuffer\r\n  ) {\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.renderBuffer_ = renderBuffer;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Executor\").default>>}\r\n     */\r\n    this.executorsByZIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.hitDetectionContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.hitDetectionTransform_ = createTransform();\r\n\r\n    this.createExecutors_(allInstructions);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  clip(context, transform) {\r\n    const flatClipCoords = this.getClipCoords(transform);\r\n    context.beginPath();\r\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\r\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\r\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\r\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\r\n    context.clip();\r\n  }\r\n\r\n  /**\r\n   * Create executors and populate them using the provided instructions.\r\n   * @private\r\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\r\n   */\r\n  createExecutors_(allInstructions) {\r\n    for (const zIndex in allInstructions) {\r\n      let executors = this.executorsByZIndex_[zIndex];\r\n      if (executors === undefined) {\r\n        executors = {};\r\n        this.executorsByZIndex_[zIndex] = executors;\r\n      }\r\n      const instructionByZindex = allInstructions[zIndex];\r\n      for (const builderType in instructionByZindex) {\r\n        const instructions = instructionByZindex[builderType];\r\n        executors[builderType] = new Executor(\r\n          this.resolution_,\r\n          this.pixelRatio_,\r\n          this.overlaps_,\r\n          instructions\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\r\n   * @return {boolean} Has executors of the provided types.\r\n   */\r\n  hasExecutors(executors) {\r\n    for (const zIndex in this.executorsByZIndex_) {\r\n      const candidates = this.executorsByZIndex_[zIndex];\r\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\r\n        if (executors[i] in candidates) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\r\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    resolution,\r\n    rotation,\r\n    hitTolerance,\r\n    callback,\r\n    declutteredFeatures\r\n  ) {\r\n    hitTolerance = Math.round(hitTolerance);\r\n    const contextSize = hitTolerance * 2 + 1;\r\n    const transform = composeTransform(\r\n      this.hitDetectionTransform_,\r\n      hitTolerance + 0.5,\r\n      hitTolerance + 0.5,\r\n      1 / resolution,\r\n      -1 / resolution,\r\n      -rotation,\r\n      -coordinate[0],\r\n      -coordinate[1]\r\n    );\r\n\r\n    const newContext = !this.hitDetectionContext_;\r\n    if (newContext) {\r\n      this.hitDetectionContext_ = createCanvasContext2D(\r\n        contextSize,\r\n        contextSize,\r\n        undefined,\r\n        {willReadFrequently: true}\r\n      );\r\n    }\r\n    const context = this.hitDetectionContext_;\r\n\r\n    if (\r\n      context.canvas.width !== contextSize ||\r\n      context.canvas.height !== contextSize\r\n    ) {\r\n      context.canvas.width = contextSize;\r\n      context.canvas.height = contextSize;\r\n    } else if (!newContext) {\r\n      context.clearRect(0, 0, contextSize, contextSize);\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    let hitExtent;\r\n    if (this.renderBuffer_ !== undefined) {\r\n      hitExtent = createEmpty();\r\n      extendCoordinate(hitExtent, coordinate);\r\n      buffer(\r\n        hitExtent,\r\n        resolution * (this.renderBuffer_ + hitTolerance),\r\n        hitExtent\r\n      );\r\n    }\r\n\r\n    const indexes = getPixelIndexArray(hitTolerance);\r\n\r\n    let builderType;\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    function featureCallback(feature, geometry) {\r\n      const imageData = context.getImageData(\r\n        0,\r\n        0,\r\n        contextSize,\r\n        contextSize\r\n      ).data;\r\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\r\n        if (imageData[indexes[i]] > 0) {\r\n          if (\r\n            !declutteredFeatures ||\r\n            (builderType !== 'Image' && builderType !== 'Text') ||\r\n            declutteredFeatures.includes(feature)\r\n          ) {\r\n            const idx = (indexes[i] - 3) / 4;\r\n            const x = hitTolerance - (idx % contextSize);\r\n            const y = hitTolerance - ((idx / contextSize) | 0);\r\n            const result = callback(feature, geometry, x * x + y * y);\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          context.clearRect(0, 0, contextSize, contextSize);\r\n          break;\r\n        }\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(ascending);\r\n\r\n    let i, j, executors, executor, result;\r\n    for (i = zs.length - 1; i >= 0; --i) {\r\n      const zIndexKey = zs[i].toString();\r\n      executors = this.executorsByZIndex_[zIndexKey];\r\n      for (j = ORDER.length - 1; j >= 0; --j) {\r\n        builderType = ORDER[j];\r\n        executor = executors[builderType];\r\n        if (executor !== undefined) {\r\n          result = executor.executeHitDetection(\r\n            context,\r\n            transform,\r\n            rotation,\r\n            featureCallback,\r\n            hitExtent\r\n          );\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @return {Array<number>|null} Clip coordinates.\r\n   */\r\n  getClipCoords(transform) {\r\n    const maxExtent = this.maxExtent_;\r\n    if (!maxExtent) {\r\n      return null;\r\n    }\r\n    const minX = maxExtent[0];\r\n    const minY = maxExtent[1];\r\n    const maxX = maxExtent[2];\r\n    const maxY = maxExtent[3];\r\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\r\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\r\n    return flatClipCoords;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.executorsByZIndex_);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} contextScale Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\r\n   *     Default is {@link module:ol/render/replay~ORDER}\r\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\r\n   */\r\n  execute(\r\n    context,\r\n    contextScale,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    builderTypes,\r\n    declutterTree\r\n  ) {\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(ascending);\r\n\r\n    // setup clipping so that the parts of over-simplified geometries are not\r\n    // visible outside the current extent when panning\r\n    if (this.maxExtent_) {\r\n      context.save();\r\n      this.clip(context, transform);\r\n    }\r\n\r\n    builderTypes = builderTypes ? builderTypes : ORDER;\r\n    let i, ii, j, jj, replays, replay;\r\n    if (declutterTree) {\r\n      zs.reverse();\r\n    }\r\n    for (i = 0, ii = zs.length; i < ii; ++i) {\r\n      const zIndexKey = zs[i].toString();\r\n      replays = this.executorsByZIndex_[zIndexKey];\r\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\r\n        const builderType = builderTypes[j];\r\n        replay = replays[builderType];\r\n        if (replay !== undefined) {\r\n          replay.execute(\r\n            context,\r\n            contextScale,\r\n            transform,\r\n            viewRotation,\r\n            snapToPixel,\r\n            declutterTree\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.maxExtent_) {\r\n      context.restore();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This cache is used to store arrays of indexes for calculated pixel circles\r\n * to increase performance.\r\n * It is a static property to allow each Replaygroup to access it.\r\n * @type {Object<number, Array<number>>}\r\n */\r\nconst circlePixelIndexArrayCache = {};\r\n\r\n/**\r\n * This methods creates an array with indexes of all pixels within a circle,\r\n * ordered by how close they are to the center.\r\n * A cache is used to increase performance.\r\n * @param {number} radius Radius.\r\n * @return {Array<number>} An array with indexes within a circle.\r\n */\r\nexport function getPixelIndexArray(radius) {\r\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\r\n    return circlePixelIndexArrayCache[radius];\r\n  }\r\n\r\n  const size = radius * 2 + 1;\r\n  const maxDistanceSq = radius * radius;\r\n  const distances = new Array(maxDistanceSq + 1);\r\n  for (let i = 0; i <= radius; ++i) {\r\n    for (let j = 0; j <= radius; ++j) {\r\n      const distanceSq = i * i + j * j;\r\n      if (distanceSq > maxDistanceSq) {\r\n        break;\r\n      }\r\n      let distance = distances[distanceSq];\r\n      if (!distance) {\r\n        distance = [];\r\n        distances[distanceSq] = distance;\r\n      }\r\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\r\n      if (i > 0) {\r\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\r\n      }\r\n      if (j > 0) {\r\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\r\n        if (i > 0) {\r\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const pixelIndex = [];\r\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\r\n    if (distances[i]) {\r\n      pixelIndex.push(...distances[i]);\r\n    }\r\n  }\r\n\r\n  circlePixelIndexArrayCache[radius] = pixelIndex;\r\n  return pixelIndex;\r\n}\r\n\r\nexport default ExecutorGroup;\r\n", "/**\r\n * @module ol/render/canvas/Immediate\r\n */\r\n// FIXME test, especially polygons with holes and multipolygons\r\n// FIXME need to handle large thick features (where pixel size matters)\r\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\r\n\r\nimport VectorContext from '../VectorContext.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n} from '../canvas.js';\r\nimport {equals} from '../../array.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {toFixed} from '../../math.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\r\n\r\n/**\r\n * @classdesc\r\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\r\n * direct rendering of features and geometries to an HTML5 Canvas context.\r\n * Instances of this class are created internally by the library and\r\n * provided to application code as vectorContext member of the\r\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\r\n * render events emitted by layers and maps.\r\n */\r\nclass CanvasImmediateRenderer extends VectorContext {\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\r\n   */\r\n  constructor(\r\n    context,\r\n    pixelRatio,\r\n    extent,\r\n    transform,\r\n    viewRotation,\r\n    squaredTolerance,\r\n    userTransform\r\n  ) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = context;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.transform_ = transform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.transformRotation_ = transform\r\n      ? toFixed(Math.atan2(transform[1], transform[0]), 10)\r\n      : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = viewRotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.squaredTolerance_ = squaredTolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj.js\").TransformFunction}\r\n     */\r\n    this.userTransform_ = userTransform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.contextFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.contextStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.contextTextState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.fillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.strokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageHeight_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOpacity_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.imageRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.imageScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageWidth_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.textRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.textScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tmpLocalTransform_ = createTransform();\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawImages_(flatCoordinates, offset, end, stride) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_\r\n    );\r\n    const context = this.context_;\r\n    const localTransform = this.tmpLocalTransform_;\r\n    const alpha = context.globalAlpha;\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha * this.imageOpacity_;\r\n    }\r\n    let rotation = this.imageRotation_;\r\n    if (this.transformRotation_ === 0) {\r\n      rotation -= this.viewRotation_;\r\n    }\r\n    if (this.imageRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\r\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\r\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.imageScale_[0] != 1 ||\r\n        this.imageScale_[1] != 1\r\n      ) {\r\n        const centerX = x + this.imageAnchorX_;\r\n        const centerY = y + this.imageAnchorY_;\r\n        composeTransform(\r\n          localTransform,\r\n          centerX,\r\n          centerY,\r\n          1,\r\n          1,\r\n          rotation,\r\n          -centerX,\r\n          -centerY\r\n        );\r\n        context.save();\r\n        context.transform.apply(context, localTransform);\r\n        context.translate(centerX, centerY);\r\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          -this.imageAnchorX_,\r\n          -this.imageAnchorY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_\r\n        );\r\n        context.restore();\r\n      } else {\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          x,\r\n          y,\r\n          this.imageWidth_,\r\n          this.imageHeight_\r\n        );\r\n      }\r\n    }\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawText_(flatCoordinates, offset, end, stride) {\r\n    if (!this.textState_ || this.text_ === '') {\r\n      return;\r\n    }\r\n    if (this.textFillState_) {\r\n      this.setContextFillState_(this.textFillState_);\r\n    }\r\n    if (this.textStrokeState_) {\r\n      this.setContextStrokeState_(this.textStrokeState_);\r\n    }\r\n    this.setContextTextState_(this.textState_);\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_\r\n    );\r\n    const context = this.context_;\r\n    let rotation = this.textRotation_;\r\n    if (this.transformRotation_ === 0) {\r\n      rotation -= this.viewRotation_;\r\n    }\r\n    if (this.textRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (; offset < end; offset += stride) {\r\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\r\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.textScale_[0] != 1 ||\r\n        this.textScale_[1] != 1\r\n      ) {\r\n        context.save();\r\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\r\n        context.rotate(rotation);\r\n        context.translate(this.textOffsetX_, this.textOffsetY_);\r\n        context.scale(this.textScale_[0], this.textScale_[1]);\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, 0, 0);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, 0, 0);\r\n        }\r\n        context.restore();\r\n      } else {\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, x, y);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, x, y);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} close Close.\r\n   * @private\r\n   * @return {number} end End.\r\n   */\r\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\r\n    const context = this.context_;\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_\r\n    );\r\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\r\n    let length = pixelCoordinates.length;\r\n    if (close) {\r\n      length -= 2;\r\n    }\r\n    for (let i = 2; i < length; i += 2) {\r\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\r\n    }\r\n    if (close) {\r\n      context.closePath();\r\n    }\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawRings_(flatCoordinates, offset, ends, stride) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.moveToLineTo_(\r\n        flatCoordinates,\r\n        offset,\r\n        ends[i],\r\n        stride,\r\n        true\r\n      );\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\r\n   * the current fill and stroke styles.\r\n   *\r\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\r\n   * @api\r\n   */\r\n  drawCircle(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Circle.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.fillState_ || this.strokeState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const pixelCoordinates = transformGeom2D(\r\n        geometry,\r\n        this.transform_,\r\n        this.pixelCoordinates_\r\n      );\r\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\r\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\r\n      const radius = Math.sqrt(dx * dx + dy * dy);\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      context.arc(\r\n        pixelCoordinates[0],\r\n        pixelCoordinates[1],\r\n        radius,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the rendering style.  Note that since this is an immediate rendering API,\r\n   * any `zIndex` on the provided style will be ignored.\r\n   *\r\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\r\n   * @api\r\n   */\r\n  setStyle(style) {\r\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\r\n    this.setImageStyle(style.getImage());\r\n    this.setTextStyle(style.getText());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  setTransform(transform) {\r\n    this.transform_ = transform;\r\n  }\r\n\r\n  /**\r\n   * Render a geometry into the canvas.  Call\r\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\r\n   *\r\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\r\n   * @api\r\n   */\r\n  drawGeometry(geometry) {\r\n    const type = geometry.getType();\r\n    switch (type) {\r\n      case 'Point':\r\n        this.drawPoint(\r\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case 'LineString':\r\n        this.drawLineString(\r\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case 'Polygon':\r\n        this.drawPolygon(\r\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case 'MultiPoint':\r\n        this.drawMultiPoint(\r\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case 'MultiLineString':\r\n        this.drawMultiLineString(\r\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          )\r\n        );\r\n        break;\r\n      case 'MultiPolygon':\r\n        this.drawMultiPolygon(\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      case 'GeometryCollection':\r\n        this.drawGeometryCollection(\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          )\r\n        );\r\n        break;\r\n      case 'Circle':\r\n        this.drawCircle(\r\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry)\r\n        );\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\r\n   * style will be ignored - features are rendered immediately in the order that\r\n   * this method is called.  If you need `zIndex` support, you should be using an\r\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\r\n   *\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../../style/Style.js\").default} style Style.\r\n   * @api\r\n   */\r\n  drawFeature(feature, style) {\r\n    const geometry = style.getGeometryFunction()(feature);\r\n    if (!geometry) {\r\n      return;\r\n    }\r\n    this.setStyle(style);\r\n    this.drawGeometry(geometry);\r\n  }\r\n\r\n  /**\r\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\r\n   * uses the current styles appropriate for each geometry in the collection.\r\n   *\r\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\r\n   */\r\n  drawGeometryCollection(geometry) {\r\n    const geometries = geometry.getGeometriesArray();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      this.drawGeometry(geometries[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\r\n   */\r\n  drawPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\r\n   */\r\n  drawMultiPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a LineString into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\r\n   */\r\n  drawLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      context.beginPath();\r\n      this.moveToLineTo_(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        geometry.getStride(),\r\n        false\r\n      );\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoint = geometry.getFlatMidpoint();\r\n      this.drawText_(flatMidpoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\r\n   * and uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\r\n   */\r\n  drawMultiLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry =\r\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry.simplifyTransformed(\r\n            this.squaredTolerance_,\r\n            this.userTransform_\r\n          )\r\n        );\r\n    }\r\n    const geometryExtent = geometry.getExtent();\r\n    if (!intersects(this.extent_, geometryExtent)) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      let offset = 0;\r\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        offset = this.moveToLineTo_(\r\n          flatCoordinates,\r\n          offset,\r\n          ends[i],\r\n          stride,\r\n          false\r\n        );\r\n      }\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoints = geometry.getFlatMidpoints();\r\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\r\n   */\r\n  drawPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      this.drawRings_(\r\n        geometry.getOrientedFlatCoordinates(),\r\n        0,\r\n        /** @type {Array<number>} */ (geometry.getEnds()),\r\n        geometry.getStride()\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\r\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\r\n   */\r\n  drawMultiPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\r\n      let offset = 0;\r\n      const endss = geometry.getEndss();\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n        const ends = endss[i];\r\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\r\n      }\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\r\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\r\n   * @private\r\n   */\r\n  setContextFillState_(fillState) {\r\n    const context = this.context_;\r\n    const contextFillState = this.contextFillState_;\r\n    if (!contextFillState) {\r\n      context.fillStyle = fillState.fillStyle;\r\n      this.contextFillState_ = {\r\n        fillStyle: fillState.fillStyle,\r\n      };\r\n    } else {\r\n      if (contextFillState.fillStyle != fillState.fillStyle) {\r\n        contextFillState.fillStyle = fillState.fillStyle;\r\n        context.fillStyle = fillState.fillStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\r\n   * @private\r\n   */\r\n  setContextStrokeState_(strokeState) {\r\n    const context = this.context_;\r\n    const contextStrokeState = this.contextStrokeState_;\r\n    if (!contextStrokeState) {\r\n      context.lineCap = strokeState.lineCap;\r\n      context.setLineDash(strokeState.lineDash);\r\n      context.lineDashOffset = strokeState.lineDashOffset;\r\n      context.lineJoin = strokeState.lineJoin;\r\n      context.lineWidth = strokeState.lineWidth;\r\n      context.miterLimit = strokeState.miterLimit;\r\n      context.strokeStyle = strokeState.strokeStyle;\r\n      this.contextStrokeState_ = {\r\n        lineCap: strokeState.lineCap,\r\n        lineDash: strokeState.lineDash,\r\n        lineDashOffset: strokeState.lineDashOffset,\r\n        lineJoin: strokeState.lineJoin,\r\n        lineWidth: strokeState.lineWidth,\r\n        miterLimit: strokeState.miterLimit,\r\n        strokeStyle: strokeState.strokeStyle,\r\n      };\r\n    } else {\r\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\r\n        contextStrokeState.lineCap = strokeState.lineCap;\r\n        context.lineCap = strokeState.lineCap;\r\n      }\r\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\r\n        context.setLineDash(\r\n          (contextStrokeState.lineDash = strokeState.lineDash)\r\n        );\r\n      }\r\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\r\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\r\n        context.lineDashOffset = strokeState.lineDashOffset;\r\n      }\r\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\r\n        contextStrokeState.lineJoin = strokeState.lineJoin;\r\n        context.lineJoin = strokeState.lineJoin;\r\n      }\r\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\r\n        contextStrokeState.lineWidth = strokeState.lineWidth;\r\n        context.lineWidth = strokeState.lineWidth;\r\n      }\r\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\r\n        contextStrokeState.miterLimit = strokeState.miterLimit;\r\n        context.miterLimit = strokeState.miterLimit;\r\n      }\r\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\r\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\r\n        context.strokeStyle = strokeState.strokeStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\r\n   * @private\r\n   */\r\n  setContextTextState_(textState) {\r\n    const context = this.context_;\r\n    const contextTextState = this.contextTextState_;\r\n    const textAlign = textState.textAlign\r\n      ? textState.textAlign\r\n      : defaultTextAlign;\r\n    if (!contextTextState) {\r\n      context.font = textState.font;\r\n      context.textAlign = textAlign;\r\n      context.textBaseline = textState.textBaseline;\r\n      this.contextTextState_ = {\r\n        font: textState.font,\r\n        textAlign: textAlign,\r\n        textBaseline: textState.textBaseline,\r\n      };\r\n    } else {\r\n      if (contextTextState.font != textState.font) {\r\n        contextTextState.font = textState.font;\r\n        context.font = textState.font;\r\n      }\r\n      if (contextTextState.textAlign != textAlign) {\r\n        contextTextState.textAlign = textAlign;\r\n        context.textAlign = textAlign;\r\n      }\r\n      if (contextTextState.textBaseline != textState.textBaseline) {\r\n        contextTextState.textBaseline = textState.textBaseline;\r\n        context.textBaseline = textState.textBaseline;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the fill and stroke style for subsequent draw operations.  To clear\r\n   * either fill or stroke styles, pass null for the appropriate parameter.\r\n   *\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    if (!fillStyle) {\r\n      this.fillState_ = null;\r\n    } else {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      this.fillState_ = {\r\n        fillStyle: asColorLike(\r\n          fillStyleColor ? fillStyleColor : defaultFillStyle\r\n        ),\r\n      };\r\n    }\r\n    if (!strokeStyle) {\r\n      this.strokeState_ = null;\r\n    } else {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      const lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash\r\n        : defaultLineDash;\r\n      this.strokeState_ = {\r\n        lineCap:\r\n          strokeStyleLineCap !== undefined\r\n            ? strokeStyleLineCap\r\n            : defaultLineCap,\r\n        lineDash:\r\n          this.pixelRatio_ === 1\r\n            ? lineDash\r\n            : lineDash.map((n) => n * this.pixelRatio_),\r\n        lineDashOffset:\r\n          (strokeStyleLineDashOffset\r\n            ? strokeStyleLineDashOffset\r\n            : defaultLineDashOffset) * this.pixelRatio_,\r\n        lineJoin:\r\n          strokeStyleLineJoin !== undefined\r\n            ? strokeStyleLineJoin\r\n            : defaultLineJoin,\r\n        lineWidth:\r\n          (strokeStyleWidth !== undefined\r\n            ? strokeStyleWidth\r\n            : defaultLineWidth) * this.pixelRatio_,\r\n        miterLimit:\r\n          strokeStyleMiterLimit !== undefined\r\n            ? strokeStyleMiterLimit\r\n            : defaultMiterLimit,\r\n        strokeStyle: asColorLike(\r\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\r\n        ),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the image style for subsequent draw operations.  Pass null to remove\r\n   * the image style.\r\n   *\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   */\r\n  setImageStyle(imageStyle) {\r\n    let imageSize;\r\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\r\n      this.image_ = null;\r\n      return;\r\n    }\r\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\r\n    const imageAnchor = imageStyle.getAnchor();\r\n    const imageOrigin = imageStyle.getOrigin();\r\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\r\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\r\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\r\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\r\n    this.imageOpacity_ = imageStyle.getOpacity();\r\n    this.imageOriginX_ = imageOrigin[0];\r\n    this.imageOriginY_ = imageOrigin[1];\r\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\r\n    this.imageRotation_ = imageStyle.getRotation();\r\n    const imageScale = imageStyle.getScaleArray();\r\n    this.imageScale_ = [\r\n      (imageScale[0] * this.pixelRatio_) / imagePixelRatio,\r\n      (imageScale[1] * this.pixelRatio_) / imagePixelRatio,\r\n    ];\r\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\r\n  }\r\n\r\n  /**\r\n   * Set the text style for subsequent draw operations.  Pass null to\r\n   * remove the text style.\r\n   *\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   */\r\n  setTextStyle(textStyle) {\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        this.textFillState_ = null;\r\n      } else {\r\n        const textFillStyleColor = textFillStyle.getColor();\r\n        this.textFillState_ = {\r\n          fillStyle: asColorLike(\r\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle\r\n          ),\r\n        };\r\n      }\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        this.textStrokeState_ = null;\r\n      } else {\r\n        const textStrokeStyleColor = textStrokeStyle.getColor();\r\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\r\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\r\n        const textStrokeStyleLineDashOffset =\r\n          textStrokeStyle.getLineDashOffset();\r\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\r\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\r\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\r\n        this.textStrokeState_ = {\r\n          lineCap:\r\n            textStrokeStyleLineCap !== undefined\r\n              ? textStrokeStyleLineCap\r\n              : defaultLineCap,\r\n          lineDash: textStrokeStyleLineDash\r\n            ? textStrokeStyleLineDash\r\n            : defaultLineDash,\r\n          lineDashOffset: textStrokeStyleLineDashOffset\r\n            ? textStrokeStyleLineDashOffset\r\n            : defaultLineDashOffset,\r\n          lineJoin:\r\n            textStrokeStyleLineJoin !== undefined\r\n              ? textStrokeStyleLineJoin\r\n              : defaultLineJoin,\r\n          lineWidth:\r\n            textStrokeStyleWidth !== undefined\r\n              ? textStrokeStyleWidth\r\n              : defaultLineWidth,\r\n          miterLimit:\r\n            textStrokeStyleMiterLimit !== undefined\r\n              ? textStrokeStyleMiterLimit\r\n              : defaultMiterLimit,\r\n          strokeStyle: asColorLike(\r\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle\r\n          ),\r\n        };\r\n      }\r\n      const textFont = textStyle.getFont();\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textRotation = textStyle.getRotation();\r\n      const textScale = textStyle.getScaleArray();\r\n      const textText = textStyle.getText();\r\n      const textTextAlign = textStyle.getTextAlign();\r\n      const textTextBaseline = textStyle.getTextBaseline();\r\n      this.textState_ = {\r\n        font: textFont !== undefined ? textFont : defaultFont,\r\n        textAlign:\r\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\r\n        textBaseline:\r\n          textTextBaseline !== undefined\r\n            ? textTextBaseline\r\n            : defaultTextBaseline,\r\n      };\r\n      this.text_ =\r\n        textText !== undefined\r\n          ? Array.isArray(textText)\r\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')\r\n            : textText\r\n          : '';\r\n      this.textOffsetX_ =\r\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\r\n      this.textOffsetY_ =\r\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView !== undefined ? textRotateWithView : false;\r\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\r\n      this.textScale_ = [\r\n        this.pixelRatio_ * textScale[0],\r\n        this.pixelRatio_ * textScale[1],\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasImmediateRenderer;\r\n", "/**\r\n * @module ol/render/canvas/hitdetect\r\n */\r\n\r\nimport CanvasImmediateRenderer from './Immediate.js';\r\nimport {Icon} from '../../style.js';\r\nimport {ascending} from '../../array.js';\r\nimport {clamp} from '../../math.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {intersects} from '../../extent.js';\r\n\r\nexport const HIT_DETECT_RESOLUTION = 0.5;\r\n\r\n/**\r\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\r\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\r\n * for rendering features to all worlds of the viewport, from coordinates to css\r\n * pixels.\r\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\r\n * Features to consider for hit detection.\r\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\r\n * Layer style function.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @return {ImageData} Hit detection image data.\r\n */\r\nexport function createHitDetectionImageData(\r\n  size,\r\n  transforms,\r\n  features,\r\n  styleFunction,\r\n  extent,\r\n  resolution,\r\n  rotation\r\n) {\r\n  const width = size[0] * HIT_DETECT_RESOLUTION;\r\n  const height = size[1] * HIT_DETECT_RESOLUTION;\r\n  const context = createCanvasContext2D(width, height);\r\n  context.imageSmoothingEnabled = false;\r\n  const canvas = context.canvas;\r\n  const renderer = new CanvasImmediateRenderer(\r\n    context,\r\n    HIT_DETECT_RESOLUTION,\r\n    extent,\r\n    null,\r\n    rotation\r\n  );\r\n  const featureCount = features.length;\r\n  // Stretch hit detection index to use the whole available color range\r\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\r\n  const featuresByZIndex = {};\r\n  for (let i = 1; i <= featureCount; ++i) {\r\n    const feature = features[i - 1];\r\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\r\n    if (!featureStyleFunction) {\r\n      continue;\r\n    }\r\n    let styles = featureStyleFunction(feature, resolution);\r\n    if (!styles) {\r\n      continue;\r\n    }\r\n    if (!Array.isArray(styles)) {\r\n      styles = [styles];\r\n    }\r\n    const index = i * indexFactor;\r\n    const color = index.toString(16).padStart(7, '#00000');\r\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\r\n      const originalStyle = styles[j];\r\n      const geometry = originalStyle.getGeometryFunction()(feature);\r\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\r\n        continue;\r\n      }\r\n      const style = originalStyle.clone();\r\n      const fill = style.getFill();\r\n      if (fill) {\r\n        fill.setColor(color);\r\n      }\r\n      const stroke = style.getStroke();\r\n      if (stroke) {\r\n        stroke.setColor(color);\r\n        stroke.setLineDash(null);\r\n      }\r\n      style.setText(undefined);\r\n      const image = originalStyle.getImage();\r\n      if (image) {\r\n        const imgSize = image.getImageSize();\r\n        if (!imgSize) {\r\n          continue;\r\n        }\r\n\r\n        const imgContext = createCanvasContext2D(\r\n          imgSize[0],\r\n          imgSize[1],\r\n          undefined,\r\n          {alpha: false}\r\n        );\r\n        const img = imgContext.canvas;\r\n        imgContext.fillStyle = color;\r\n        imgContext.fillRect(0, 0, img.width, img.height);\r\n        style.setImage(\r\n          new Icon({\r\n            img: img,\r\n            anchor: image.getAnchor(),\r\n            anchorXUnits: 'pixels',\r\n            anchorYUnits: 'pixels',\r\n            offset: image.getOrigin(),\r\n            opacity: 1,\r\n            size: image.getSize(),\r\n            scale: image.getScale(),\r\n            rotation: image.getRotation(),\r\n            rotateWithView: image.getRotateWithView(),\r\n          })\r\n        );\r\n      }\r\n      const zIndex = style.getZIndex() || 0;\r\n      let byGeometryType = featuresByZIndex[zIndex];\r\n      if (!byGeometryType) {\r\n        byGeometryType = {};\r\n        featuresByZIndex[zIndex] = byGeometryType;\r\n        byGeometryType['Polygon'] = [];\r\n        byGeometryType['Circle'] = [];\r\n        byGeometryType['LineString'] = [];\r\n        byGeometryType['Point'] = [];\r\n      }\r\n      const type = geometry.getType();\r\n      if (type === 'GeometryCollection') {\r\n        const geometries =\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          ).getGeometriesArrayRecursive();\r\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n          const geometry = geometries[i];\r\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\r\n            geometry,\r\n            style\r\n          );\r\n        }\r\n      } else {\r\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\r\n      }\r\n    }\r\n  }\r\n\r\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\r\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\r\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\r\n    for (const type in byGeometryType) {\r\n      const geomAndStyle = byGeometryType[type];\r\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\r\n        renderer.setStyle(geomAndStyle[j + 1]);\r\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\r\n          renderer.setTransform(transforms[k]);\r\n          renderer.drawGeometry(geomAndStyle[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return context.getImageData(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\n/**\r\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\r\n * detection canvas in css pixels.\r\n * @param {Array<F>} features Features. Has to\r\n * match the `features` array that was passed to `createHitDetectionImageData()`.\r\n * @param {ImageData} imageData Hit detection image data generated by\r\n * `createHitDetectionImageData()`.\r\n * @return {Array<F>} Features.\r\n * @template {import(\"../../Feature.js\").FeatureLike} F\r\n */\r\nexport function hitDetect(pixel, features, imageData) {\r\n  const resultFeatures = [];\r\n  if (imageData) {\r\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\r\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\r\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\r\n    // for browsers returning coordinates slightly larger than the actual canvas size\r\n    // due to a non-integer pixel ratio.\r\n    const index =\r\n      (clamp(x, 0, imageData.width - 1) +\r\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\r\n      4;\r\n    const r = imageData.data[index];\r\n    const g = imageData.data[index + 1];\r\n    const b = imageData.data[index + 2];\r\n    const i = b + 256 * (g + 256 * r);\r\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\r\n    if (i && i % indexFactor === 0) {\r\n      resultFeatures.push(features[i / indexFactor - 1]);\r\n    }\r\n  }\r\n  // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same\r\n  return resultFeatures;\r\n}\r\n", "/**\r\n * @module ol/renderer/vector\r\n */\r\nimport ImageState from '../ImageState.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * Feature callback. The callback will be called with three arguments. The first\r\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\r\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\r\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\r\n * @template T\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * Tolerance for geometry simplification in device pixels.\r\n * @type {number}\r\n */\r\nconst SIMPLIFY_TOLERANCE = 0.5;\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type,\r\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\r\n *                         import(\"../style/Style.js\").default, Object): void>}\r\n */\r\nconst GEOMETRY_RENDERERS = {\r\n  'Point': renderPointGeometry,\r\n  'LineString': renderLineStringGeometry,\r\n  'Polygon': renderPolygonGeometry,\r\n  'MultiPoint': renderMultiPointGeometry,\r\n  'MultiLineString': renderMultiLineStringGeometry,\r\n  'MultiPolygon': renderMultiPolygonGeometry,\r\n  'GeometryCollection': renderGeometryCollectionGeometry,\r\n  'Circle': renderCircleGeometry,\r\n};\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\r\n * @return {number} Order.\r\n */\r\nexport function defaultOrder(feature1, feature2) {\r\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Squared pixel tolerance.\r\n */\r\nexport function getSquaredTolerance(resolution, pixelRatio) {\r\n  const tolerance = getTolerance(resolution, pixelRatio);\r\n  return tolerance * tolerance;\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Pixel tolerance.\r\n */\r\nexport function getTolerance(resolution, pixelRatio) {\r\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderCircleGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\r\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    circleReplay.drawCircle(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      'Text'\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n * @param {import(\"../proj.js\").TransformFunction} [transform] Transform from user to view projection.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n * @return {boolean} `true` if style is loading.\r\n */\r\nexport function renderFeature(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  listener,\r\n  transform,\r\n  declutterBuilderGroup\r\n) {\r\n  let loading = false;\r\n  const imageStyle = style.getImage();\r\n  if (imageStyle) {\r\n    const imageState = imageStyle.getImageState();\r\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\r\n      imageStyle.unlistenImageChange(listener);\r\n    } else {\r\n      if (imageState == ImageState.IDLE) {\r\n        imageStyle.load();\r\n      }\r\n      imageStyle.listenImageChange(listener);\r\n      loading = true;\r\n    }\r\n  }\r\n  renderFeatureInternal(\r\n    replayGroup,\r\n    feature,\r\n    style,\r\n    squaredTolerance,\r\n    transform,\r\n    declutterBuilderGroup\r\n  );\r\n\r\n  return loading;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderFeatureInternal(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  transform,\r\n  declutterBuilderGroup\r\n) {\r\n  const geometry = style.getGeometryFunction()(feature);\r\n  if (!geometry) {\r\n    return;\r\n  }\r\n  const simplifiedGeometry = geometry.simplifyTransformed(\r\n    squaredTolerance,\r\n    transform\r\n  );\r\n  const renderer = style.getRenderer();\r\n  if (renderer) {\r\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\r\n  } else {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      simplifiedGeometry,\r\n      style,\r\n      feature,\r\n      declutterBuilderGroup\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n */\r\nfunction renderGeometry(replayGroup, geometry, style, feature) {\r\n  if (geometry.getType() == 'GeometryCollection') {\r\n    const geometries =\r\n      /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n        geometry\r\n      ).getGeometries();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      renderGeometry(replayGroup, geometries[i], style, feature);\r\n    }\r\n    return;\r\n  }\r\n  const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\r\n  replay.drawCustom(\r\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry),\r\n    feature,\r\n    style.getRenderer(),\r\n    style.getHitDetectionRenderer()\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderGeometryCollectionGeometry(\r\n  replayGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const geometries = geometry.getGeometriesArray();\r\n  let i, ii;\r\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      geometries[i],\r\n      style,\r\n      feature,\r\n      declutterBuilderGroup\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'LineString'\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawLineString(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      'Text'\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderMultiLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'LineString'\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawMultiLineString(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      'Text'\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderMultiPolygonGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle || fillStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawMultiPolygon(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      'Text'\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const textStyle = style.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  let declutterImageWithText;\r\n  if (imageStyle) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    let imageBuilderGroup = builderGroup;\r\n    if (declutterBuilderGroup) {\r\n      const declutterMode = imageStyle.getDeclutterMode();\r\n      if (declutterMode !== 'none') {\r\n        imageBuilderGroup = declutterBuilderGroup;\r\n        if (declutterMode === 'obstacle') {\r\n          // draw in non-declutter group:\r\n          const imageReplay = builderGroup.getBuilder(\r\n            style.getZIndex(),\r\n            'Image'\r\n          );\r\n          imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n          imageReplay.drawPoint(geometry, feature);\r\n        } else if (textStyle && textStyle.getText()) {\r\n          declutterImageWithText = {};\r\n        }\r\n      }\r\n    }\r\n    const imageReplay = imageBuilderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'Image'\r\n    );\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawPoint(geometry, feature);\r\n  }\r\n  if (textStyle && textStyle.getText()) {\r\n    let textBuilderGroup = builderGroup;\r\n    if (declutterBuilderGroup) {\r\n      textBuilderGroup = declutterBuilderGroup;\r\n    }\r\n    const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderMultiPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const textStyle = style.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  let declutterImageWithText;\r\n  if (imageStyle) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    let imageBuilderGroup = builderGroup;\r\n    if (declutterBuilderGroup) {\r\n      const declutterMode = imageStyle.getDeclutterMode();\r\n      if (declutterMode !== 'none') {\r\n        imageBuilderGroup = declutterBuilderGroup;\r\n        if (declutterMode === 'obstacle') {\r\n          // draw in non-declutter group:\r\n          const imageReplay = builderGroup.getBuilder(\r\n            style.getZIndex(),\r\n            'Image'\r\n          );\r\n          imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n          imageReplay.drawMultiPoint(geometry, feature);\r\n        } else if (textStyle && textStyle.getText()) {\r\n          declutterImageWithText = {};\r\n        }\r\n      }\r\n    }\r\n    const imageReplay = imageBuilderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'Image'\r\n    );\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawMultiPoint(geometry, feature);\r\n  }\r\n  if (textStyle && textStyle.getText()) {\r\n    let textBuilderGroup = builderGroup;\r\n    if (declutterBuilderGroup) {\r\n      textBuilderGroup = declutterBuilderGroup;\r\n    }\r\n    const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n */\r\nfunction renderPolygonGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawPolygon(geometry, feature);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\r\n      style.getZIndex(),\r\n      'Text'\r\n    );\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n", "/**\r\n * @module ol/renderer/canvas/VectorLayer\r\n */\r\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\r\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\r\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\r\nimport RenderEventType from '../../render/EventType.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {\r\n  HIT_DETECT_RESOLUTION,\r\n  createHitDetectionImageData,\r\n  hitDetect,\r\n} from '../../render/canvas/hitdetect.js';\r\nimport {\r\n  apply,\r\n  makeInverse,\r\n  makeScale,\r\n  toString as transformToString,\r\n} from '../../transform.js';\r\nimport {\r\n  buffer,\r\n  containsExtent,\r\n  createEmpty,\r\n  getWidth,\r\n  intersects as intersectsExtent,\r\n  wrapX as wrapExtentX,\r\n} from '../../extent.js';\r\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\r\nimport {\r\n  defaultOrder as defaultRenderOrder,\r\n  getTolerance as getRenderTolerance,\r\n  getSquaredTolerance as getSquaredRenderTolerance,\r\n  renderFeature,\r\n} from '../vector.js';\r\nimport {equals} from '../../array.js';\r\nimport {\r\n  fromUserExtent,\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n  toUserResolution,\r\n} from '../../proj.js';\r\nimport {getUid} from '../../util.js';\r\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for vector layers.\r\n * @api\r\n */\r\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\r\n   */\r\n  constructor(vectorLayer) {\r\n    super(vectorLayer);\r\n\r\n    /** @private */\r\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.animatingOrInteracting_;\r\n\r\n    /**\r\n     * @type {ImageData|null}\r\n     */\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    /**\r\n     * @type {Array<import(\"../../Feature.js\").default>}\r\n     */\r\n    this.renderedFeatures_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedResolution_ = NaN;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.renderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.wrappedRenderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate\").Coordinate}\r\n     */\r\n    this.renderedCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj/Projection\").default}\r\n     */\r\n    this.renderedProjection_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\r\n     */\r\n    this.renderedRenderOrder_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\r\n     */\r\n    this.replayGroup_ = null;\r\n\r\n    /**\r\n     * A new replay group had to be created by `prepareFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.replayGroupChanged = true;\r\n\r\n    /**\r\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\r\n     */\r\n    this.declutterExecutorGroup = null;\r\n\r\n    /**\r\n     * Clipping to be performed by `renderFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.clipping = true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.compositionContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.opacity_ = 1;\r\n  }\r\n\r\n  /**\r\n   * @param {ExecutorGroup} executorGroup Executor group.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\r\n   */\r\n  renderWorlds(executorGroup, frameState, declutterTree) {\r\n    const extent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const center = viewState.center;\r\n    const resolution = viewState.resolution;\r\n    const projection = viewState.projection;\r\n    const rotation = viewState.rotation;\r\n    const projectionExtent = projection.getExtent();\r\n    const vectorSource = this.getLayer().getSource();\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewHints = frameState.viewHints;\r\n    const snapToPixel = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    const context = this.compositionContext_;\r\n    const width = Math.round(frameState.size[0] * pixelRatio);\r\n    const height = Math.round(frameState.size[1] * pixelRatio);\r\n\r\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\r\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\r\n    const endWorld = multiWorld\r\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\r\n      : 1;\r\n    let world = multiWorld\r\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\r\n      : 0;\r\n    do {\r\n      const transform = this.getRenderTransform(\r\n        center,\r\n        resolution,\r\n        rotation,\r\n        pixelRatio,\r\n        width,\r\n        height,\r\n        world * worldWidth\r\n      );\r\n      executorGroup.execute(\r\n        context,\r\n        1,\r\n        transform,\r\n        rotation,\r\n        snapToPixel,\r\n        undefined,\r\n        declutterTree\r\n      );\r\n    } while (++world < endWorld);\r\n  }\r\n\r\n  setupCompositionContext_() {\r\n    if (this.opacity_ !== 1) {\r\n      const compositionContext = createCanvasContext2D(\r\n        this.context.canvas.width,\r\n        this.context.canvas.height,\r\n        canvasPool\r\n      );\r\n      this.compositionContext_ = compositionContext;\r\n    } else {\r\n      this.compositionContext_ = this.context;\r\n    }\r\n  }\r\n\r\n  releaseCompositionContext_() {\r\n    if (this.opacity_ !== 1) {\r\n      const alpha = this.context.globalAlpha;\r\n      this.context.globalAlpha = this.opacity_;\r\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\r\n      this.context.globalAlpha = alpha;\r\n      releaseCanvas(this.compositionContext_);\r\n      canvasPool.push(this.compositionContext_.canvas);\r\n      this.compositionContext_ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeclutter(frameState) {\r\n    if (this.declutterExecutorGroup) {\r\n      this.setupCompositionContext_();\r\n      this.renderWorlds(\r\n        this.declutterExecutorGroup,\r\n        frameState,\r\n        frameState.declutterTree\r\n      );\r\n      this.releaseCompositionContext_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement|null} target Target that may be used to render content to.\r\n   * @return {HTMLElement|null} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n\r\n    // set forward and inverse pixel transforms\r\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\r\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\r\n\r\n    const canvasTransform = transformToString(this.pixelTransform);\r\n\r\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\r\n    const context = this.context;\r\n    const canvas = context.canvas;\r\n\r\n    const replayGroup = this.replayGroup_;\r\n    const declutterExecutorGroup = this.declutterExecutorGroup;\r\n    let render =\r\n      (replayGroup && !replayGroup.isEmpty()) ||\r\n      (declutterExecutorGroup && !declutterExecutorGroup.isEmpty());\r\n    if (!render) {\r\n      const hasRenderListeners =\r\n        this.getLayer().hasListener(RenderEventType.PRERENDER) ||\r\n        this.getLayer().hasListener(RenderEventType.POSTRENDER);\r\n      if (!hasRenderListeners) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // resize and clear\r\n    const width = Math.round(frameState.size[0] * pixelRatio);\r\n    const height = Math.round(frameState.size[1] * pixelRatio);\r\n    if (canvas.width != width || canvas.height != height) {\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      if (canvas.style.transform !== canvasTransform) {\r\n        canvas.style.transform = canvasTransform;\r\n      }\r\n    } else if (!this.containerReused) {\r\n      context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    this.preRender(context, frameState);\r\n\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n\r\n    this.opacity_ = layerState.opacity;\r\n    this.setupCompositionContext_();\r\n\r\n    // clipped rendering if layer extent is set\r\n    let clipped = false;\r\n    if (render && layerState.extent && this.clipping) {\r\n      const layerExtent = fromUserExtent(layerState.extent, projection);\r\n      render = intersectsExtent(layerExtent, frameState.extent);\r\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\r\n      if (clipped) {\r\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\r\n      }\r\n    }\r\n\r\n    if (render) {\r\n      this.renderWorlds(replayGroup, frameState);\r\n    }\r\n\r\n    if (clipped) {\r\n      this.compositionContext_.restore();\r\n    }\r\n\r\n    this.releaseCompositionContext_();\r\n\r\n    this.postRender(context, frameState);\r\n\r\n    if (this.renderedRotation_ !== viewState.rotation) {\r\n      this.renderedRotation_ = viewState.rotation;\r\n      this.hitDetectionImageData_ = null;\r\n    }\r\n    return this.container;\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\r\n   * that resolves with an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    return new Promise((resolve) => {\r\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\r\n        const size = [this.context.canvas.width, this.context.canvas.height];\r\n        apply(this.pixelTransform, size);\r\n        const center = this.renderedCenter_;\r\n        const resolution = this.renderedResolution_;\r\n        const rotation = this.renderedRotation_;\r\n        const projection = this.renderedProjection_;\r\n        const extent = this.wrappedRenderedExtent_;\r\n        const layer = this.getLayer();\r\n        const transforms = [];\r\n        const width = size[0] * HIT_DETECT_RESOLUTION;\r\n        const height = size[1] * HIT_DETECT_RESOLUTION;\r\n        transforms.push(\r\n          this.getRenderTransform(\r\n            center,\r\n            resolution,\r\n            rotation,\r\n            HIT_DETECT_RESOLUTION,\r\n            width,\r\n            height,\r\n            0\r\n          ).slice()\r\n        );\r\n        const source = layer.getSource();\r\n        const projectionExtent = projection.getExtent();\r\n        if (\r\n          source.getWrapX() &&\r\n          projection.canWrapX() &&\r\n          !containsExtent(projectionExtent, extent)\r\n        ) {\r\n          let startX = extent[0];\r\n          const worldWidth = getWidth(projectionExtent);\r\n          let world = 0;\r\n          let offsetX;\r\n          while (startX < projectionExtent[0]) {\r\n            --world;\r\n            offsetX = worldWidth * world;\r\n            transforms.push(\r\n              this.getRenderTransform(\r\n                center,\r\n                resolution,\r\n                rotation,\r\n                HIT_DETECT_RESOLUTION,\r\n                width,\r\n                height,\r\n                offsetX\r\n              ).slice()\r\n            );\r\n            startX += worldWidth;\r\n          }\r\n          world = 0;\r\n          startX = extent[2];\r\n          while (startX > projectionExtent[2]) {\r\n            ++world;\r\n            offsetX = worldWidth * world;\r\n            transforms.push(\r\n              this.getRenderTransform(\r\n                center,\r\n                resolution,\r\n                rotation,\r\n                HIT_DETECT_RESOLUTION,\r\n                width,\r\n                height,\r\n                offsetX\r\n              ).slice()\r\n            );\r\n            startX -= worldWidth;\r\n          }\r\n        }\r\n\r\n        this.hitDetectionImageData_ = createHitDetectionImageData(\r\n          size,\r\n          transforms,\r\n          this.renderedFeatures_,\r\n          layer.getStyleFunction(),\r\n          extent,\r\n          resolution,\r\n          rotation\r\n        );\r\n      }\r\n      resolve(\r\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches\r\n  ) {\r\n    if (!this.replayGroup_) {\r\n      return undefined;\r\n    }\r\n    const resolution = frameState.viewState.resolution;\r\n    const rotation = frameState.viewState.rotation;\r\n    const layer = this.getLayer();\r\n\r\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\r\n    const features = {};\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {number} distanceSq The squared distance to the click position\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    const featureCallback = function (feature, geometry, distanceSq) {\r\n      const key = getUid(feature);\r\n      const match = features[key];\r\n      if (!match) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        matches.push(\r\n          (features[key] = {\r\n            feature: feature,\r\n            layer: layer,\r\n            geometry: geometry,\r\n            distanceSq: distanceSq,\r\n            callback: callback,\r\n          })\r\n        );\r\n      } else if (match !== true && distanceSq < match.distanceSq) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          matches.splice(matches.lastIndexOf(match), 1);\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        match.geometry = geometry;\r\n        match.distanceSq = distanceSq;\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    let result;\r\n    const executorGroups = [this.replayGroup_];\r\n    if (this.declutterExecutorGroup) {\r\n      executorGroups.push(this.declutterExecutorGroup);\r\n    }\r\n    executorGroups.some((executorGroup) => {\r\n      return (result = executorGroup.forEachFeatureAtCoordinate(\r\n        coordinate,\r\n        resolution,\r\n        rotation,\r\n        hitTolerance,\r\n        featureCallback,\r\n        executorGroup === this.declutterExecutorGroup &&\r\n          frameState.declutterTree\r\n          ? frameState.declutterTree.all().map((item) => item.value)\r\n          : null\r\n      ));\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   */\r\n  handleFontsChanged() {\r\n    const layer = this.getLayer();\r\n    if (layer.getVisible() && this.replayGroup_) {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle changes in image style state.\r\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\r\n   * @private\r\n   */\r\n  handleStyleImageChange_(event) {\r\n    this.renderIfReadyAndVisible();\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    const vectorLayer = this.getLayer();\r\n    const vectorSource = vectorLayer.getSource();\r\n    if (!vectorSource) {\r\n      return false;\r\n    }\r\n\r\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\r\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\r\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\r\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\r\n\r\n    if (\r\n      (this.ready && !updateWhileAnimating && animating) ||\r\n      (!updateWhileInteracting && interacting)\r\n    ) {\r\n      this.animatingOrInteracting_ = true;\r\n      return true;\r\n    }\r\n    this.animatingOrInteracting_ = false;\r\n\r\n    const frameStateExtent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const resolution = viewState.resolution;\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const vectorLayerRevision = vectorLayer.getRevision();\r\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\r\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\r\n\r\n    if (vectorLayerRenderOrder === undefined) {\r\n      vectorLayerRenderOrder = defaultRenderOrder;\r\n    }\r\n\r\n    const center = viewState.center.slice();\r\n    const extent = buffer(\r\n      frameStateExtent,\r\n      vectorLayerRenderBuffer * resolution\r\n    );\r\n    const renderedExtent = extent.slice();\r\n    const loadExtents = [extent.slice()];\r\n    const projectionExtent = projection.getExtent();\r\n\r\n    if (\r\n      vectorSource.getWrapX() &&\r\n      projection.canWrapX() &&\r\n      !containsExtent(projectionExtent, frameState.extent)\r\n    ) {\r\n      // For the replay group, we need an extent that intersects the real world\r\n      // (-180\u00B0 to +180\u00B0). To support geometries in a coordinate range from -540\u00B0\r\n      // to +540\u00B0, we add at least 1 world width on each side of the projection\r\n      // extent. If the viewport is wider than the world, we need to add half of\r\n      // the viewport width to make sure we cover the whole viewport.\r\n      const worldWidth = getWidth(projectionExtent);\r\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\r\n      extent[0] = projectionExtent[0] - gutter;\r\n      extent[2] = projectionExtent[2] + gutter;\r\n      wrapCoordinateX(center, projection);\r\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\r\n      // If the extent crosses the date line, we load data for both edges of the worlds\r\n      if (\r\n        loadExtent[0] < projectionExtent[0] &&\r\n        loadExtent[2] < projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] + worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] + worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      } else if (\r\n        loadExtent[0] > projectionExtent[0] &&\r\n        loadExtent[2] > projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] - worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] - worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.ready &&\r\n      this.renderedResolution_ == resolution &&\r\n      this.renderedRevision_ == vectorLayerRevision &&\r\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\r\n      containsExtent(this.wrappedRenderedExtent_, extent)\r\n    ) {\r\n      if (!equals(this.renderedExtent_, renderedExtent)) {\r\n        this.hitDetectionImageData_ = null;\r\n        this.renderedExtent_ = renderedExtent;\r\n      }\r\n      this.renderedCenter_ = center;\r\n      this.replayGroupChanged = false;\r\n      return true;\r\n    }\r\n\r\n    this.replayGroup_ = null;\r\n\r\n    const replayGroup = new CanvasBuilderGroup(\r\n      getRenderTolerance(resolution, pixelRatio),\r\n      extent,\r\n      resolution,\r\n      pixelRatio\r\n    );\r\n\r\n    let declutterBuilderGroup;\r\n    if (this.getLayer().getDeclutter()) {\r\n      declutterBuilderGroup = new CanvasBuilderGroup(\r\n        getRenderTolerance(resolution, pixelRatio),\r\n        extent,\r\n        resolution,\r\n        pixelRatio\r\n      );\r\n    }\r\n\r\n    const userProjection = getUserProjection();\r\n    let userTransform;\r\n    if (userProjection) {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        const extent = loadExtents[i];\r\n        const userExtent = toUserExtent(extent, projection);\r\n        vectorSource.loadFeatures(\r\n          userExtent,\r\n          toUserResolution(resolution, projection),\r\n          userProjection\r\n        );\r\n      }\r\n      userTransform = getTransformFromProjections(userProjection, projection);\r\n    } else {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\r\n      }\r\n    }\r\n\r\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\r\n    let ready = true;\r\n    const render =\r\n      /**\r\n       * @param {import(\"../../Feature.js\").default} feature Feature.\r\n       */\r\n      (feature) => {\r\n        let styles;\r\n        const styleFunction =\r\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\r\n        if (styleFunction) {\r\n          styles = styleFunction(feature, resolution);\r\n        }\r\n        if (styles) {\r\n          const dirty = this.renderFeature(\r\n            feature,\r\n            squaredTolerance,\r\n            styles,\r\n            replayGroup,\r\n            userTransform,\r\n            declutterBuilderGroup\r\n          );\r\n          ready = ready && !dirty;\r\n        }\r\n      };\r\n\r\n    const userExtent = toUserExtent(extent, projection);\r\n    /** @type {Array<import(\"../../Feature.js\").default>} */\r\n    const features = vectorSource.getFeaturesInExtent(userExtent);\r\n    if (vectorLayerRenderOrder) {\r\n      features.sort(vectorLayerRenderOrder);\r\n    }\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      render(features[i]);\r\n    }\r\n    this.renderedFeatures_ = features;\r\n    this.ready = ready;\r\n\r\n    const replayGroupInstructions = replayGroup.finish();\r\n    const executorGroup = new ExecutorGroup(\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      vectorSource.getOverlaps(),\r\n      replayGroupInstructions,\r\n      vectorLayer.getRenderBuffer()\r\n    );\r\n\r\n    if (declutterBuilderGroup) {\r\n      this.declutterExecutorGroup = new ExecutorGroup(\r\n        extent,\r\n        resolution,\r\n        pixelRatio,\r\n        vectorSource.getOverlaps(),\r\n        declutterBuilderGroup.finish(),\r\n        vectorLayer.getRenderBuffer()\r\n      );\r\n    }\r\n\r\n    this.renderedResolution_ = resolution;\r\n    this.renderedRevision_ = vectorLayerRevision;\r\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\r\n    this.renderedExtent_ = renderedExtent;\r\n    this.wrappedRenderedExtent_ = extent;\r\n    this.renderedCenter_ = center;\r\n    this.renderedProjection_ = projection;\r\n    this.replayGroup_ = executorGroup;\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    this.replayGroupChanged = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} squaredTolerance Squared render tolerance.\r\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n   * @return {boolean} `true` if an image is loading.\r\n   */\r\n  renderFeature(\r\n    feature,\r\n    squaredTolerance,\r\n    styles,\r\n    builderGroup,\r\n    transform,\r\n    declutterBuilderGroup\r\n  ) {\r\n    if (!styles) {\r\n      return false;\r\n    }\r\n    let loading = false;\r\n    if (Array.isArray(styles)) {\r\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\r\n        loading =\r\n          renderFeature(\r\n            builderGroup,\r\n            feature,\r\n            styles[i],\r\n            squaredTolerance,\r\n            this.boundHandleStyleImageChange_,\r\n            transform,\r\n            declutterBuilderGroup\r\n          ) || loading;\r\n      }\r\n    } else {\r\n      loading = renderFeature(\r\n        builderGroup,\r\n        feature,\r\n        styles,\r\n        squaredTolerance,\r\n        this.boundHandleStyleImageChange_,\r\n        transform,\r\n        declutterBuilderGroup\r\n      );\r\n    }\r\n    return loading;\r\n  }\r\n}\r\n\r\nexport default CanvasVectorLayerRenderer;\r\n", "/**\r\n * @module ol/layer/Vector\r\n */\r\nimport BaseVectorLayer from './BaseVector.js';\r\nimport CanvasVectorLayerRenderer from '../renderer/canvas/VectorLayer.js';\r\n\r\n/**\r\n * @classdesc\r\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\r\n * even during animations. Points and labels stay upright on rotated views. For very large\r\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\r\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default} VectorSourceType\r\n * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {import(\"./BaseVector.js\").Options<VectorSourceType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasVectorLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default VectorLayer;\r\n", "/**\r\n * @module ol/render\r\n */\r\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\r\nimport {DEVICE_PIXEL_RATIO} from './has.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n  multiply as multiplyTransform,\r\n  scale as scaleTransform,\r\n} from './transform.js';\r\nimport {getSquaredTolerance} from './renderer/vector.js';\r\nimport {getTransformFromProjections, getUserProjection} from './proj.js';\r\n\r\n/**\r\n * @typedef {Object} State\r\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\r\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\r\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\r\n * @property {number} resolution Resolution that the render batch was created and optimized for.\r\n * This is not the view's resolution that is being rendered.\r\n * @property {number} rotation Rotation of the rendered layer in radians.\r\n */\r\n\r\n/**\r\n * A function to be used when sorting features before rendering.\r\n * It takes two instances of {@link module:ol/Feature~Feature} or\r\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\r\n *\r\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} ToContextOptions\r\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\r\n * pixels. When provided, both canvas and css size will be set according to the\r\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\r\n * altered.\r\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\r\n * pixel to css pixel ratio) for the canvas.\r\n */\r\n\r\n/**\r\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\r\n * to the context's canvas.\r\n *\r\n * The units for geometry coordinates are css pixels relative to the top left\r\n * corner of the canvas element.\r\n * ```js\r\n * import {toContext} from 'ol/render.js';\r\n * import Fill from 'ol/style/Fill.js';\r\n * import Polygon from 'ol/geom/Polygon.js';\r\n *\r\n * const canvas = document.createElement('canvas');\r\n * const render = toContext(\r\n *     canvas.getContext('2d'),\r\n *     {size: [100, 100]}\r\n * );\r\n * render.setFillStrokeStyle(new Fill({ color: blue }));\r\n * render.drawPolygon(\r\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]])\r\n * );\r\n * ```\r\n *\r\n * @param {CanvasRenderingContext2D} context Canvas context.\r\n * @param {ToContextOptions} [options] Options.\r\n * @return {CanvasImmediateRenderer} Canvas Immediate.\r\n * @api\r\n */\r\nexport function toContext(context, options) {\r\n  const canvas = context.canvas;\r\n  options = options ? options : {};\r\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\r\n  const size = options.size;\r\n  if (size) {\r\n    canvas.width = size[0] * pixelRatio;\r\n    canvas.height = size[1] * pixelRatio;\r\n    canvas.style.width = size[0] + 'px';\r\n    canvas.style.height = size[1] + 'px';\r\n  }\r\n  const extent = [0, 0, canvas.width, canvas.height];\r\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\r\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\r\n}\r\n\r\n/**\r\n * Gets a vector context for drawing to the event's canvas.\r\n * @param {import(\"./render/Event.js\").default} event Render event.\r\n * @return {CanvasImmediateRenderer} Vector context.\r\n * @api\r\n */\r\nexport function getVectorContext(event) {\r\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\r\n    throw new Error('Only works for render events from Canvas 2D layers');\r\n  }\r\n\r\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\r\n  const a = event.inversePixelTransform[0];\r\n  const b = event.inversePixelTransform[1];\r\n  const canvasPixelRatio = Math.sqrt(a * a + b * b);\r\n  const frameState = event.frameState;\r\n  const transform = multiplyTransform(\r\n    event.inversePixelTransform.slice(),\r\n    frameState.coordinateToPixelTransform\r\n  );\r\n  const squaredTolerance = getSquaredTolerance(\r\n    frameState.viewState.resolution,\r\n    canvasPixelRatio\r\n  );\r\n  let userTransform;\r\n  const userProjection = getUserProjection();\r\n  if (userProjection) {\r\n    userTransform = getTransformFromProjections(\r\n      userProjection,\r\n      frameState.viewState.projection\r\n    );\r\n  }\r\n\r\n  return new CanvasImmediateRenderer(\r\n    event.context,\r\n    canvasPixelRatio,\r\n    frameState.extent,\r\n    transform,\r\n    frameState.viewState.rotation,\r\n    squaredTolerance,\r\n    userTransform\r\n  );\r\n}\r\n\r\n/**\r\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\r\n * @param {import(\"./render/Event.js\").default} event Render event.\r\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\r\n * corner of the map viewport.\r\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\r\n * @api\r\n */\r\nexport function getRenderPixel(event, pixel) {\r\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\r\n}\r\n", "/**\r\n * @module ol/geom/flat/geodesic\r\n */\r\nimport {get as getProjection, getTransform} from '../../proj.js';\r\nimport {squaredSegmentDistance, toDegrees, toRadians} from '../../math.js';\r\n\r\n/**\r\n * @param {function(number): import(\"../../coordinate.js\").Coordinate} interpolate Interpolate function.\r\n * @param {import(\"../../proj.js\").TransformFunction} transform Transform from longitude/latitude to\r\n *     projected coordinates.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nfunction line(interpolate, transform, squaredTolerance) {\r\n  // FIXME reduce garbage generation\r\n  // FIXME optimize stack operations\r\n\r\n  /** @type {Array<number>} */\r\n  const flatCoordinates = [];\r\n\r\n  let geoA = interpolate(0);\r\n  let geoB = interpolate(1);\r\n\r\n  let a = transform(geoA);\r\n  let b = transform(geoB);\r\n\r\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\r\n  const geoStack = [geoB, geoA];\r\n  /** @type {Array<import(\"../../coordinate.js\").Coordinate>} */\r\n  const stack = [b, a];\r\n  /** @type {Array<number>} */\r\n  const fractionStack = [1, 0];\r\n\r\n  /** @type {!Object<string, boolean>} */\r\n  const fractions = {};\r\n\r\n  let maxIterations = 1e5;\r\n  let geoM, m, fracA, fracB, fracM, key;\r\n\r\n  while (--maxIterations > 0 && fractionStack.length > 0) {\r\n    // Pop the a coordinate off the stack\r\n    fracA = fractionStack.pop();\r\n    geoA = geoStack.pop();\r\n    a = stack.pop();\r\n    // Add the a coordinate if it has not been added yet\r\n    key = fracA.toString();\r\n    if (!(key in fractions)) {\r\n      flatCoordinates.push(a[0], a[1]);\r\n      fractions[key] = true;\r\n    }\r\n    // Pop the b coordinate off the stack\r\n    fracB = fractionStack.pop();\r\n    geoB = geoStack.pop();\r\n    b = stack.pop();\r\n    // Find the m point between the a and b coordinates\r\n    fracM = (fracA + fracB) / 2;\r\n    geoM = interpolate(fracM);\r\n    m = transform(geoM);\r\n    if (\r\n      squaredSegmentDistance(m[0], m[1], a[0], a[1], b[0], b[1]) <\r\n      squaredTolerance\r\n    ) {\r\n      // If the m point is sufficiently close to the straight line, then we\r\n      // discard it.  Just use the b coordinate and move on to the next line\r\n      // segment.\r\n      flatCoordinates.push(b[0], b[1]);\r\n      key = fracB.toString();\r\n      fractions[key] = true;\r\n    } else {\r\n      // Otherwise, we need to subdivide the current line segment.  Split it\r\n      // into two and push the two line segments onto the stack.\r\n      fractionStack.push(fracB, fracM, fracM, fracA);\r\n      stack.push(b, m, m, a);\r\n      geoStack.push(geoB, geoM, geoM, geoA);\r\n    }\r\n  }\r\n\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * Generate a great-circle arcs between two lat/lon points.\r\n * @param {number} lon1 Longitude 1 in degrees.\r\n * @param {number} lat1 Latitude 1 in degrees.\r\n * @param {number} lon2 Longitude 2 in degrees.\r\n * @param {number} lat2 Latitude 2 in degrees.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function greatCircleArc(\r\n  lon1,\r\n  lat1,\r\n  lon2,\r\n  lat2,\r\n  projection,\r\n  squaredTolerance\r\n) {\r\n  const geoProjection = getProjection('EPSG:4326');\r\n\r\n  const cosLat1 = Math.cos(toRadians(lat1));\r\n  const sinLat1 = Math.sin(toRadians(lat1));\r\n  const cosLat2 = Math.cos(toRadians(lat2));\r\n  const sinLat2 = Math.sin(toRadians(lat2));\r\n  const cosDeltaLon = Math.cos(toRadians(lon2 - lon1));\r\n  const sinDeltaLon = Math.sin(toRadians(lon2 - lon1));\r\n  const d = sinLat1 * sinLat2 + cosLat1 * cosLat2 * cosDeltaLon;\r\n\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n     */\r\n    function (frac) {\r\n      if (1 <= d) {\r\n        return [lon2, lat2];\r\n      }\r\n      const D = frac * Math.acos(d);\r\n      const cosD = Math.cos(D);\r\n      const sinD = Math.sin(D);\r\n      const y = sinDeltaLon * cosLat2;\r\n      const x = cosLat1 * sinLat2 - sinLat1 * cosLat2 * cosDeltaLon;\r\n      const theta = Math.atan2(y, x);\r\n      const lat = Math.asin(sinLat1 * cosD + cosLat1 * sinD * Math.cos(theta));\r\n      const lon =\r\n        toRadians(lon1) +\r\n        Math.atan2(\r\n          Math.sin(theta) * sinD * cosLat1,\r\n          cosD - sinLat1 * Math.sin(lat)\r\n        );\r\n      return [toDegrees(lon), toDegrees(lat)];\r\n    },\r\n    getTransform(geoProjection, projection),\r\n    squaredTolerance\r\n  );\r\n}\r\n\r\n/**\r\n * Generate a meridian (line at constant longitude).\r\n * @param {number} lon Longitude.\r\n * @param {number} lat1 Latitude 1.\r\n * @param {number} lat2 Latitude 2.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function meridian(lon, lat1, lat2, projection, squaredTolerance) {\r\n  const epsg4326Projection = getProjection('EPSG:4326');\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n     */\r\n    function (frac) {\r\n      return [lon, lat1 + (lat2 - lat1) * frac];\r\n    },\r\n    getTransform(epsg4326Projection, projection),\r\n    squaredTolerance\r\n  );\r\n}\r\n\r\n/**\r\n * Generate a parallel (line at constant latitude).\r\n * @param {number} lat Latitude.\r\n * @param {number} lon1 Longitude 1.\r\n * @param {number} lon2 Longitude 2.\r\n * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nexport function parallel(lat, lon1, lon2, projection, squaredTolerance) {\r\n  const epsg4326Projection = getProjection('EPSG:4326');\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\r\n     */\r\n    function (frac) {\r\n      return [lon1 + (lon2 - lon1) * frac, lat];\r\n    },\r\n    getTransform(epsg4326Projection, projection),\r\n    squaredTolerance\r\n  );\r\n}\r\n", "/**\r\n * @module ol/layer/Graticule\r\n */\r\nimport Collection from '../Collection.js';\r\nimport EventType from '../render/EventType.js';\r\nimport Feature from '../Feature.js';\r\nimport Fill from '../style/Fill.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport Point from '../geom/Point.js';\r\nimport Stroke from '../style/Stroke.js';\r\nimport Style from '../style/Style.js';\r\nimport Text from '../style/Text.js';\r\nimport VectorLayer from './Vector.js';\r\nimport VectorSource from '../source/Vector.js';\r\nimport {\r\n  applyTransform,\r\n  approximatelyEquals,\r\n  containsCoordinate,\r\n  containsExtent,\r\n  equals,\r\n  getCenter,\r\n  getIntersection,\r\n  getWidth,\r\n  intersects,\r\n  isEmpty,\r\n  wrapX as wrapExtentX,\r\n} from '../extent.js';\r\nimport {clamp} from '../math.js';\r\nimport {degreesToStringHDMS} from '../coordinate.js';\r\nimport {\r\n  equivalent as equivalentProjection,\r\n  get as getProjection,\r\n  getTransform,\r\n} from '../proj.js';\r\nimport {getVectorContext} from '../render.js';\r\nimport {meridian, parallel} from '../geom/flat/geodesic.js';\r\n\r\n/**\r\n * @type {Stroke}\r\n * @private\r\n * @const\r\n */\r\nconst DEFAULT_STROKE_STYLE = new Stroke({\r\n  color: 'rgba(0,0,0,0.2)',\r\n});\r\n\r\n/**\r\n * @type {Array<number>}\r\n * @private\r\n */\r\nconst INTERVALS = [\r\n  90,\r\n  45,\r\n  30,\r\n  20,\r\n  10,\r\n  5,\r\n  2,\r\n  1,\r\n  30 / 60,\r\n  20 / 60,\r\n  10 / 60,\r\n  5 / 60,\r\n  2 / 60,\r\n  1 / 60,\r\n  30 / 3600,\r\n  20 / 3600,\r\n  10 / 3600,\r\n  5 / 3600,\r\n  2 / 3600,\r\n  1 / 3600,\r\n];\r\n\r\n/**\r\n * @typedef {Object} GraticuleLabelDataType\r\n * @property {Point} geom Geometry.\r\n * @property {string} text Text.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {number} [maxLines=100] The maximum number of meridians and\r\n * parallels from the center of the map. The default value of 100 means that at\r\n * most 200 meridians and 200 parallels will be displayed. The default value is\r\n * appropriate for conformal projections like Spherical Mercator. If you\r\n * increase the value, more lines will be drawn and the drawing performance will\r\n * decrease.\r\n * @property {Stroke} [strokeStyle] The\r\n * stroke style to use for drawing the graticule. If not provided, the following stroke will be used:\r\n * ```js\r\n * new Stroke({\r\n *   color: 'rgba(0, 0, 0, 0.2)' // a not fully opaque black\r\n * });\r\n * ```\r\n * @property {number} [targetSize=100] The target size of the graticule cells,\r\n * in pixels.\r\n * @property {boolean} [showLabels=false] Render a label with the respective\r\n * latitude/longitude for each graticule line.\r\n * @property {function(number):string} [lonLabelFormatter] Label formatter for\r\n * longitudes. This function is called with the longitude as argument, and\r\n * should return a formatted string representing the longitude. By default,\r\n * labels are formatted as degrees, minutes, seconds and hemisphere.\r\n * @property {function(number):string} [latLabelFormatter] Label formatter for\r\n * latitudes. This function is called with the latitude as argument, and\r\n * should return a formatted string representing the latitude. By default,\r\n * labels are formatted as degrees, minutes, seconds and hemisphere.\r\n * @property {number} [lonLabelPosition=0] Longitude label position in fractions\r\n * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the\r\n * top.\r\n * @property {number} [latLabelPosition=1] Latitude label position in fractions\r\n * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the\r\n * right.\r\n * @property {Text} [lonLabelStyle] Longitude label text\r\n * style. If not provided, the following style will be used:\r\n * ```js\r\n * new Text({\r\n *   font: '12px Calibri,sans-serif',\r\n *   textBaseline: 'bottom',\r\n *   fill: new Fill({\r\n *     color: 'rgba(0,0,0,1)'\r\n *   }),\r\n *   stroke: new Stroke({\r\n *     color: 'rgba(255,255,255,1)',\r\n *     width: 3\r\n *   })\r\n * });\r\n * ```\r\n * Note that the default's `textBaseline` configuration will not work well for\r\n * `lonLabelPosition` configurations that position labels close to the top of\r\n * the viewport.\r\n * @property {Text} [latLabelStyle] Latitude label text style.\r\n * If not provided, the following style will be used:\r\n * ```js\r\n * new Text({\r\n *   font: '12px Calibri,sans-serif',\r\n *   textAlign: 'end',\r\n *   fill: new Fill({\r\n *     color: 'rgba(0,0,0,1)'\r\n *   }),\r\n *   stroke: Stroke({\r\n *     color: 'rgba(255,255,255,1)',\r\n *     width: 3\r\n *   })\r\n * });\r\n * ```\r\n * Note that the default's `textAlign` configuration will not work well for\r\n * `latLabelPosition` configurations that position labels close to the left of\r\n * the viewport.\r\n * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 30/60, 20/60, 10/60, 5/60, 2/60, 1/60, 30/3600, 20/3600, 10/3600, 5/3600, 2/3600, 1/3600]]\r\n * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:\r\n * ```js\r\n * [30, 10]\r\n * ```\r\n * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer that renders a grid for a coordinate system (currently only EPSG:4326 is supported).\r\n * Note that the view projection must define both extent and worldExtent.\r\n *\r\n * @fires import(\"../render/Event.js\").RenderEvent\r\n * @extends {VectorLayer<import(\"../source/Vector.js\").default>}\r\n * @api\r\n */\r\nclass Graticule extends VectorLayer {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign(\r\n      {\r\n        updateWhileAnimating: true,\r\n        updateWhileInteracting: true,\r\n        renderBuffer: 0,\r\n      },\r\n      options\r\n    );\r\n\r\n    delete baseOptions.maxLines;\r\n    delete baseOptions.strokeStyle;\r\n    delete baseOptions.targetSize;\r\n    delete baseOptions.showLabels;\r\n    delete baseOptions.lonLabelFormatter;\r\n    delete baseOptions.latLabelFormatter;\r\n    delete baseOptions.lonLabelPosition;\r\n    delete baseOptions.latLabelPosition;\r\n    delete baseOptions.lonLabelStyle;\r\n    delete baseOptions.latLabelStyle;\r\n    delete baseOptions.intervals;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.projection_ = null;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxLat_ = Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxLon_ = Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.minLat_ = -Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.minLon_ = -Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxX_ = Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxY_ = Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.minX_ = -Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.minY_ = -Infinity;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.targetSize_ =\r\n      options.targetSize !== undefined ? options.targetSize : 100;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;\r\n\r\n    /**\r\n     * @type {Array<LineString>}\r\n     * @private\r\n     */\r\n    this.meridians_ = [];\r\n\r\n    /**\r\n     * @type {Array<LineString>}\r\n     * @private\r\n     */\r\n    this.parallels_ = [];\r\n\r\n    /**\r\n     * @type {Stroke}\r\n     * @private\r\n     */\r\n    this.strokeStyle_ =\r\n      options.strokeStyle !== undefined\r\n        ? options.strokeStyle\r\n        : DEFAULT_STROKE_STYLE;\r\n\r\n    /**\r\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\r\n     * @private\r\n     */\r\n    this.fromLonLatTransform_ = undefined;\r\n\r\n    /**\r\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\r\n     * @private\r\n     */\r\n    this.toLonLatTransform_ = undefined;\r\n\r\n    /**\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @private\r\n     */\r\n    this.projectionCenterLonLat_ = null;\r\n\r\n    /**\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @private\r\n     */\r\n    this.bottomLeft_ = null;\r\n\r\n    /**\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @private\r\n     */\r\n    this.bottomRight_ = null;\r\n\r\n    /**\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @private\r\n     */\r\n    this.topLeft_ = null;\r\n\r\n    /**\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @private\r\n     */\r\n    this.topRight_ = null;\r\n\r\n    /**\r\n     * @type {Array<GraticuleLabelDataType>}\r\n     * @private\r\n     */\r\n    this.meridiansLabels_ = null;\r\n\r\n    /**\r\n     * @type {Array<GraticuleLabelDataType>}\r\n     * @private\r\n     */\r\n    this.parallelsLabels_ = null;\r\n\r\n    if (options.showLabels) {\r\n      /**\r\n       * @type {null|function(number):string}\r\n       * @private\r\n       */\r\n      this.lonLabelFormatter_ =\r\n        options.lonLabelFormatter == undefined\r\n          ? degreesToStringHDMS.bind(this, 'EW')\r\n          : options.lonLabelFormatter;\r\n\r\n      /**\r\n       * @type {function(number):string}\r\n       * @private\r\n       */\r\n      this.latLabelFormatter_ =\r\n        options.latLabelFormatter == undefined\r\n          ? degreesToStringHDMS.bind(this, 'NS')\r\n          : options.latLabelFormatter;\r\n\r\n      /**\r\n       * Longitude label position in fractions (0..1) of view extent. 0 means\r\n       * bottom, 1 means top.\r\n       * @type {number}\r\n       * @private\r\n       */\r\n      this.lonLabelPosition_ =\r\n        options.lonLabelPosition == undefined ? 0 : options.lonLabelPosition;\r\n\r\n      /**\r\n       * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1\r\n       * means right.\r\n       * @type {number}\r\n       * @private\r\n       */\r\n      this.latLabelPosition_ =\r\n        options.latLabelPosition == undefined ? 1 : options.latLabelPosition;\r\n\r\n      /**\r\n       * @type {Style}\r\n       * @private\r\n       */\r\n      this.lonLabelStyleBase_ = new Style({\r\n        text:\r\n          options.lonLabelStyle !== undefined\r\n            ? options.lonLabelStyle.clone()\r\n            : new Text({\r\n                font: '12px Calibri,sans-serif',\r\n                textBaseline: 'bottom',\r\n                fill: new Fill({\r\n                  color: 'rgba(0,0,0,1)',\r\n                }),\r\n                stroke: new Stroke({\r\n                  color: 'rgba(255,255,255,1)',\r\n                  width: 3,\r\n                }),\r\n              }),\r\n      });\r\n\r\n      /**\r\n       * @private\r\n       * @param {import(\"../Feature\").default} feature Feature\r\n       * @return {Style} style\r\n       */\r\n      this.lonLabelStyle_ = (feature) => {\r\n        const label = feature.get('graticule_label');\r\n        this.lonLabelStyleBase_.getText().setText(label);\r\n        return this.lonLabelStyleBase_;\r\n      };\r\n\r\n      /**\r\n       * @type {Style}\r\n       * @private\r\n       */\r\n      this.latLabelStyleBase_ = new Style({\r\n        text:\r\n          options.latLabelStyle !== undefined\r\n            ? options.latLabelStyle.clone()\r\n            : new Text({\r\n                font: '12px Calibri,sans-serif',\r\n                textAlign: 'right',\r\n                fill: new Fill({\r\n                  color: 'rgba(0,0,0,1)',\r\n                }),\r\n                stroke: new Stroke({\r\n                  color: 'rgba(255,255,255,1)',\r\n                  width: 3,\r\n                }),\r\n              }),\r\n      });\r\n\r\n      /**\r\n       * @private\r\n       * @param {import(\"../Feature\").default} feature Feature\r\n       * @return {Style} style\r\n       */\r\n      this.latLabelStyle_ = (feature) => {\r\n        const label = feature.get('graticule_label');\r\n        this.latLabelStyleBase_.getText().setText(label);\r\n        return this.latLabelStyleBase_;\r\n      };\r\n\r\n      this.meridiansLabels_ = [];\r\n      this.parallelsLabels_ = [];\r\n\r\n      this.addEventListener(EventType.POSTRENDER, this.drawLabels_.bind(this));\r\n    }\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.intervals_ =\r\n      options.intervals !== undefined ? options.intervals : INTERVALS;\r\n\r\n    // use a source with a custom loader for lines & text\r\n    this.setSource(\r\n      new VectorSource({\r\n        loader: this.loaderFunction.bind(this),\r\n        strategy: this.strategyFunction.bind(this),\r\n        features: new Collection(),\r\n        overlaps: false,\r\n        useSpatialIndex: false,\r\n        wrapX: options.wrapX,\r\n      })\r\n    );\r\n\r\n    /**\r\n     * feature pool to use when updating graticule\r\n     * @type {Array<Feature>}\r\n     * @private\r\n     */\r\n    this.featurePool_ = [];\r\n\r\n    /**\r\n     * @type {Style}\r\n     * @private\r\n     */\r\n    this.lineStyle_ = new Style({\r\n      stroke: this.strokeStyle_,\r\n    });\r\n\r\n    /**\r\n     * @type {?import(\"../extent.js\").Extent}\r\n     * @private\r\n     */\r\n    this.loadedExtent_ = null;\r\n\r\n    /**\r\n     * @type {?import(\"../extent.js\").Extent}\r\n     * @private\r\n     */\r\n    this.renderedExtent_ = null;\r\n\r\n    /**\r\n     * @type {?number}\r\n     * @private\r\n     */\r\n    this.renderedResolution_ = null;\r\n\r\n    this.setRenderOrder(null);\r\n  }\r\n\r\n  /**\r\n   * Strategy function for loading features based on the view's extent and\r\n   * resolution.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @return {Array<import(\"../extent.js\").Extent>} Extents.\r\n   */\r\n  strategyFunction(extent, resolution) {\r\n    // extents may be passed in different worlds, to avoid endless loop we use only one\r\n    let realWorldExtent = extent.slice();\r\n    if (this.projection_ && this.getSource().getWrapX()) {\r\n      wrapExtentX(realWorldExtent, this.projection_);\r\n    }\r\n    if (this.loadedExtent_) {\r\n      if (\r\n        approximatelyEquals(this.loadedExtent_, realWorldExtent, resolution)\r\n      ) {\r\n        // make sure result is exactly equal to previous extent\r\n        realWorldExtent = this.loadedExtent_.slice();\r\n      } else {\r\n        // we should not keep track of loaded extents\r\n        this.getSource().removeLoadedExtent(this.loadedExtent_);\r\n      }\r\n    }\r\n    return [realWorldExtent];\r\n  }\r\n\r\n  /**\r\n   * Update geometries in the source based on current view\r\n   * @param {import(\"../extent\").Extent} extent Extent\r\n   * @param {number} resolution Resolution\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection\r\n   */\r\n  loaderFunction(extent, resolution, projection) {\r\n    this.loadedExtent_ = extent;\r\n    const source = this.getSource();\r\n\r\n    // only consider the intersection between our own extent & the requested one\r\n    const layerExtent = this.getExtent() || [\r\n      -Infinity,\r\n      -Infinity,\r\n      Infinity,\r\n      Infinity,\r\n    ];\r\n    const renderExtent = getIntersection(layerExtent, extent);\r\n\r\n    if (\r\n      this.renderedExtent_ &&\r\n      equals(this.renderedExtent_, renderExtent) &&\r\n      this.renderedResolution_ === resolution\r\n    ) {\r\n      return;\r\n    }\r\n    this.renderedExtent_ = renderExtent;\r\n    this.renderedResolution_ = resolution;\r\n\r\n    // bail out if nothing to render\r\n    if (isEmpty(renderExtent)) {\r\n      return;\r\n    }\r\n\r\n    // update projection info\r\n    const center = getCenter(renderExtent);\r\n    const squaredTolerance = (resolution * resolution) / 4;\r\n\r\n    const updateProjectionInfo =\r\n      !this.projection_ || !equivalentProjection(this.projection_, projection);\r\n\r\n    if (updateProjectionInfo) {\r\n      this.updateProjectionInfo_(projection);\r\n    }\r\n\r\n    this.createGraticule_(renderExtent, center, resolution, squaredTolerance);\r\n\r\n    // first make sure we have enough features in the pool\r\n    let featureCount = this.meridians_.length + this.parallels_.length;\r\n    if (this.meridiansLabels_) {\r\n      featureCount += this.meridians_.length;\r\n    }\r\n    if (this.parallelsLabels_) {\r\n      featureCount += this.parallels_.length;\r\n    }\r\n\r\n    let feature;\r\n    while (featureCount > this.featurePool_.length) {\r\n      feature = new Feature();\r\n      this.featurePool_.push(feature);\r\n    }\r\n\r\n    const featuresColl = source.getFeaturesCollection();\r\n    featuresColl.clear();\r\n    let poolIndex = 0;\r\n\r\n    // add features for the lines & labels\r\n    let i, l;\r\n    for (i = 0, l = this.meridians_.length; i < l; ++i) {\r\n      feature = this.featurePool_[poolIndex++];\r\n      feature.setGeometry(this.meridians_[i]);\r\n      feature.setStyle(this.lineStyle_);\r\n      featuresColl.push(feature);\r\n    }\r\n    for (i = 0, l = this.parallels_.length; i < l; ++i) {\r\n      feature = this.featurePool_[poolIndex++];\r\n      feature.setGeometry(this.parallels_[i]);\r\n      feature.setStyle(this.lineStyle_);\r\n      featuresColl.push(feature);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} lon Longitude.\r\n   * @param {number} minLat Minimal latitude.\r\n   * @param {number} maxLat Maximal latitude.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} index Index.\r\n   * @return {number} Index.\r\n   * @private\r\n   */\r\n  addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, index) {\r\n    const lineString = this.getMeridian_(\r\n      lon,\r\n      minLat,\r\n      maxLat,\r\n      squaredTolerance,\r\n      index\r\n    );\r\n    if (intersects(lineString.getExtent(), extent)) {\r\n      if (this.meridiansLabels_) {\r\n        const text = this.lonLabelFormatter_(lon);\r\n        if (index in this.meridiansLabels_) {\r\n          this.meridiansLabels_[index].text = text;\r\n        } else {\r\n          this.meridiansLabels_[index] = {\r\n            geom: new Point([]),\r\n            text: text,\r\n          };\r\n        }\r\n      }\r\n      this.meridians_[index++] = lineString;\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * @param {number} lat Latitude.\r\n   * @param {number} minLon Minimal longitude.\r\n   * @param {number} maxLon Maximal longitude.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} index Index.\r\n   * @return {number} Index.\r\n   * @private\r\n   */\r\n  addParallel_(lat, minLon, maxLon, squaredTolerance, extent, index) {\r\n    const lineString = this.getParallel_(\r\n      lat,\r\n      minLon,\r\n      maxLon,\r\n      squaredTolerance,\r\n      index\r\n    );\r\n    if (intersects(lineString.getExtent(), extent)) {\r\n      if (this.parallelsLabels_) {\r\n        const text = this.latLabelFormatter_(lat);\r\n        if (index in this.parallelsLabels_) {\r\n          this.parallelsLabels_[index].text = text;\r\n        } else {\r\n          this.parallelsLabels_[index] = {\r\n            geom: new Point([]),\r\n            text: text,\r\n          };\r\n        }\r\n      }\r\n      this.parallels_[index++] = lineString;\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../render/Event.js\").default} event Render event.\r\n   * @private\r\n   */\r\n  drawLabels_(event) {\r\n    const rotation = event.frameState.viewState.rotation;\r\n    const resolution = event.frameState.viewState.resolution;\r\n    const size = event.frameState.size;\r\n    const extent = event.frameState.extent;\r\n    const rotationCenter = getCenter(extent);\r\n    let rotationExtent = extent;\r\n    if (rotation) {\r\n      const unrotatedWidth = size[0] * resolution;\r\n      const unrotatedHeight = size[1] * resolution;\r\n      rotationExtent = [\r\n        rotationCenter[0] - unrotatedWidth / 2,\r\n        rotationCenter[1] - unrotatedHeight / 2,\r\n        rotationCenter[0] + unrotatedWidth / 2,\r\n        rotationCenter[1] + unrotatedHeight / 2,\r\n      ];\r\n    }\r\n\r\n    let startWorld = 0;\r\n    let endWorld = 0;\r\n    let labelsAtStart = this.latLabelPosition_ < 0.5;\r\n    const projectionExtent = this.projection_.getExtent();\r\n    const worldWidth = getWidth(projectionExtent);\r\n    if (\r\n      this.getSource().getWrapX() &&\r\n      this.projection_.canWrapX() &&\r\n      !containsExtent(projectionExtent, extent)\r\n    ) {\r\n      startWorld = Math.floor((extent[0] - projectionExtent[0]) / worldWidth);\r\n      endWorld = Math.ceil((extent[2] - projectionExtent[2]) / worldWidth);\r\n      const inverted = Math.abs(rotation) > Math.PI / 2;\r\n      labelsAtStart = labelsAtStart !== inverted;\r\n    }\r\n    const vectorContext = getVectorContext(event);\r\n\r\n    for (let world = startWorld; world <= endWorld; ++world) {\r\n      let poolIndex = this.meridians_.length + this.parallels_.length;\r\n      let feature, index, l, textPoint;\r\n\r\n      if (this.meridiansLabels_) {\r\n        for (index = 0, l = this.meridiansLabels_.length; index < l; ++index) {\r\n          const lineString = this.meridians_[index];\r\n          if (!rotation && world === 0) {\r\n            textPoint = this.getMeridianPoint_(lineString, extent, index);\r\n          } else {\r\n            const clone = lineString.clone();\r\n            clone.translate(world * worldWidth, 0);\r\n            clone.rotate(-rotation, rotationCenter);\r\n            textPoint = this.getMeridianPoint_(clone, rotationExtent, index);\r\n            textPoint.rotate(rotation, rotationCenter);\r\n          }\r\n          feature = this.featurePool_[poolIndex++];\r\n          feature.setGeometry(textPoint);\r\n          feature.set('graticule_label', this.meridiansLabels_[index].text);\r\n          vectorContext.drawFeature(feature, this.lonLabelStyle_(feature));\r\n        }\r\n      }\r\n      if (this.parallelsLabels_) {\r\n        if (\r\n          (world === startWorld && labelsAtStart) ||\r\n          (world === endWorld && !labelsAtStart)\r\n        ) {\r\n          for (index = 0, l = this.parallels_.length; index < l; ++index) {\r\n            const lineString = this.parallels_[index];\r\n            if (!rotation && world === 0) {\r\n              textPoint = this.getParallelPoint_(lineString, extent, index);\r\n            } else {\r\n              const clone = lineString.clone();\r\n              clone.translate(world * worldWidth, 0);\r\n              clone.rotate(-rotation, rotationCenter);\r\n              textPoint = this.getParallelPoint_(clone, rotationExtent, index);\r\n              textPoint.rotate(rotation, rotationCenter);\r\n            }\r\n            feature = this.featurePool_[poolIndex++];\r\n            feature.setGeometry(textPoint);\r\n            feature.set('graticule_label', this.parallelsLabels_[index].text);\r\n            vectorContext.drawFeature(feature, this.latLabelStyle_(feature));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @private\r\n   */\r\n  createGraticule_(extent, center, resolution, squaredTolerance) {\r\n    const interval = this.getInterval_(resolution);\r\n    if (interval == -1) {\r\n      this.meridians_.length = 0;\r\n      this.parallels_.length = 0;\r\n      if (this.meridiansLabels_) {\r\n        this.meridiansLabels_.length = 0;\r\n      }\r\n      if (this.parallelsLabels_) {\r\n        this.parallelsLabels_.length = 0;\r\n      }\r\n      return;\r\n    }\r\n\r\n    let wrapX = false;\r\n    const projectionExtent = this.projection_.getExtent();\r\n    const worldWidth = getWidth(projectionExtent);\r\n    if (\r\n      this.getSource().getWrapX() &&\r\n      this.projection_.canWrapX() &&\r\n      !containsExtent(projectionExtent, extent)\r\n    ) {\r\n      if (getWidth(extent) >= worldWidth) {\r\n        extent[0] = projectionExtent[0];\r\n        extent[2] = projectionExtent[2];\r\n      } else {\r\n        wrapX = true;\r\n      }\r\n    }\r\n\r\n    // Constrain the center to fit into the extent available to the graticule\r\n\r\n    const validCenterP = [\r\n      clamp(center[0], this.minX_, this.maxX_),\r\n      clamp(center[1], this.minY_, this.maxY_),\r\n    ];\r\n\r\n    // Transform the center to lon lat\r\n    // Some projections may have a void area at the poles\r\n    // so replace any NaN latitudes with the min or max value closest to a pole\r\n\r\n    const centerLonLat = this.toLonLatTransform_(validCenterP);\r\n    if (isNaN(centerLonLat[1])) {\r\n      centerLonLat[1] =\r\n        Math.abs(this.maxLat_) >= Math.abs(this.minLat_)\r\n          ? this.maxLat_\r\n          : this.minLat_;\r\n    }\r\n    let centerLon = clamp(centerLonLat[0], this.minLon_, this.maxLon_);\r\n    let centerLat = clamp(centerLonLat[1], this.minLat_, this.maxLat_);\r\n    const maxLines = this.maxLines_;\r\n    let cnt, idx, lat, lon;\r\n\r\n    // Limit the extent to fit into the extent available to the graticule\r\n\r\n    let validExtentP = extent;\r\n    if (!wrapX) {\r\n      validExtentP = [\r\n        clamp(extent[0], this.minX_, this.maxX_),\r\n        clamp(extent[1], this.minY_, this.maxY_),\r\n        clamp(extent[2], this.minX_, this.maxX_),\r\n        clamp(extent[3], this.minY_, this.maxY_),\r\n      ];\r\n    }\r\n\r\n    // Transform the extent to get the lon lat ranges for the edges of the extent\r\n\r\n    const validExtent = applyTransform(\r\n      validExtentP,\r\n      this.toLonLatTransform_,\r\n      undefined,\r\n      8\r\n    );\r\n\r\n    let maxLat = validExtent[3];\r\n    let maxLon = validExtent[2];\r\n    let minLat = validExtent[1];\r\n    let minLon = validExtent[0];\r\n\r\n    if (!wrapX) {\r\n      // Check if extremities of the world extent lie inside the extent\r\n      // (for example the pole in a polar projection)\r\n      // and extend the extent as appropriate\r\n\r\n      if (containsCoordinate(validExtentP, this.bottomLeft_)) {\r\n        minLon = this.minLon_;\r\n        minLat = this.minLat_;\r\n      }\r\n      if (containsCoordinate(validExtentP, this.bottomRight_)) {\r\n        maxLon = this.maxLon_;\r\n        minLat = this.minLat_;\r\n      }\r\n      if (containsCoordinate(validExtentP, this.topLeft_)) {\r\n        minLon = this.minLon_;\r\n        maxLat = this.maxLat_;\r\n      }\r\n      if (containsCoordinate(validExtentP, this.topRight_)) {\r\n        maxLon = this.maxLon_;\r\n        maxLat = this.maxLat_;\r\n      }\r\n\r\n      // The transformed center may also extend the lon lat ranges used for rendering\r\n\r\n      maxLat = clamp(maxLat, centerLat, this.maxLat_);\r\n      maxLon = clamp(maxLon, centerLon, this.maxLon_);\r\n      minLat = clamp(minLat, this.minLat_, centerLat);\r\n      minLon = clamp(minLon, this.minLon_, centerLon);\r\n    }\r\n\r\n    // Create meridians\r\n\r\n    centerLon = Math.floor(centerLon / interval) * interval;\r\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\r\n\r\n    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);\r\n\r\n    cnt = 0;\r\n    if (wrapX) {\r\n      while ((lon -= interval) >= minLon && cnt++ < maxLines) {\r\n        idx = this.addMeridian_(\r\n          lon,\r\n          minLat,\r\n          maxLat,\r\n          squaredTolerance,\r\n          extent,\r\n          idx\r\n        );\r\n      }\r\n    } else {\r\n      while (lon != this.minLon_ && cnt++ < maxLines) {\r\n        lon = Math.max(lon - interval, this.minLon_);\r\n        idx = this.addMeridian_(\r\n          lon,\r\n          minLat,\r\n          maxLat,\r\n          squaredTolerance,\r\n          extent,\r\n          idx\r\n        );\r\n      }\r\n    }\r\n\r\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\r\n\r\n    cnt = 0;\r\n    if (wrapX) {\r\n      while ((lon += interval) <= maxLon && cnt++ < maxLines) {\r\n        idx = this.addMeridian_(\r\n          lon,\r\n          minLat,\r\n          maxLat,\r\n          squaredTolerance,\r\n          extent,\r\n          idx\r\n        );\r\n      }\r\n    } else {\r\n      while (lon != this.maxLon_ && cnt++ < maxLines) {\r\n        lon = Math.min(lon + interval, this.maxLon_);\r\n        idx = this.addMeridian_(\r\n          lon,\r\n          minLat,\r\n          maxLat,\r\n          squaredTolerance,\r\n          extent,\r\n          idx\r\n        );\r\n      }\r\n    }\r\n\r\n    this.meridians_.length = idx;\r\n    if (this.meridiansLabels_) {\r\n      this.meridiansLabels_.length = idx;\r\n    }\r\n\r\n    // Create parallels\r\n\r\n    centerLat = Math.floor(centerLat / interval) * interval;\r\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\r\n\r\n    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);\r\n\r\n    cnt = 0;\r\n    while (lat != this.minLat_ && cnt++ < maxLines) {\r\n      lat = Math.max(lat - interval, this.minLat_);\r\n      idx = this.addParallel_(\r\n        lat,\r\n        minLon,\r\n        maxLon,\r\n        squaredTolerance,\r\n        extent,\r\n        idx\r\n      );\r\n    }\r\n\r\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\r\n\r\n    cnt = 0;\r\n    while (lat != this.maxLat_ && cnt++ < maxLines) {\r\n      lat = Math.min(lat + interval, this.maxLat_);\r\n      idx = this.addParallel_(\r\n        lat,\r\n        minLon,\r\n        maxLon,\r\n        squaredTolerance,\r\n        extent,\r\n        idx\r\n      );\r\n    }\r\n\r\n    this.parallels_.length = idx;\r\n    if (this.parallelsLabels_) {\r\n      this.parallelsLabels_.length = idx;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @return {number} The interval in degrees.\r\n   * @private\r\n   */\r\n  getInterval_(resolution) {\r\n    const centerLon = this.projectionCenterLonLat_[0];\r\n    const centerLat = this.projectionCenterLonLat_[1];\r\n    let interval = -1;\r\n    const target = Math.pow(this.targetSize_ * resolution, 2);\r\n    /** @type {Array<number>} **/\r\n    const p1 = [];\r\n    /** @type {Array<number>} **/\r\n    const p2 = [];\r\n    for (let i = 0, ii = this.intervals_.length; i < ii; ++i) {\r\n      const delta = clamp(this.intervals_[i] / 2, 0, 90);\r\n      // Don't attempt to transform latitudes beyond the poles!\r\n      const clampedLat = clamp(centerLat, -90 + delta, 90 - delta);\r\n      p1[0] = centerLon - delta;\r\n      p1[1] = clampedLat - delta;\r\n      p2[0] = centerLon + delta;\r\n      p2[1] = clampedLat + delta;\r\n      this.fromLonLatTransform_(p1, p1);\r\n      this.fromLonLatTransform_(p2, p2);\r\n      const dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);\r\n      if (dist <= target) {\r\n        break;\r\n      }\r\n      interval = this.intervals_[i];\r\n    }\r\n    return interval;\r\n  }\r\n\r\n  /**\r\n   * @param {number} lon Longitude.\r\n   * @param {number} minLat Minimal latitude.\r\n   * @param {number} maxLat Maximal latitude.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LineString} The meridian line string.\r\n   * @param {number} index Index.\r\n   * @private\r\n   */\r\n  getMeridian_(lon, minLat, maxLat, squaredTolerance, index) {\r\n    const flatCoordinates = meridian(\r\n      lon,\r\n      minLat,\r\n      maxLat,\r\n      this.projection_,\r\n      squaredTolerance\r\n    );\r\n    let lineString = this.meridians_[index];\r\n    if (!lineString) {\r\n      lineString = new LineString(flatCoordinates, 'XY');\r\n      this.meridians_[index] = lineString;\r\n    } else {\r\n      lineString.setFlatCoordinates('XY', flatCoordinates);\r\n      lineString.changed();\r\n    }\r\n    return lineString;\r\n  }\r\n\r\n  /**\r\n   * @param {LineString} lineString Meridian\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} index Index.\r\n   * @return {Point} Meridian point.\r\n   * @private\r\n   */\r\n  getMeridianPoint_(lineString, extent, index) {\r\n    const flatCoordinates = lineString.getFlatCoordinates();\r\n    let bottom = 1;\r\n    let top = flatCoordinates.length - 1;\r\n    if (flatCoordinates[bottom] > flatCoordinates[top]) {\r\n      bottom = top;\r\n      top = 1;\r\n    }\r\n    const clampedBottom = Math.max(extent[1], flatCoordinates[bottom]);\r\n    const clampedTop = Math.min(extent[3], flatCoordinates[top]);\r\n    const lat = clamp(\r\n      extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_,\r\n      clampedBottom,\r\n      clampedTop\r\n    );\r\n    const coordinate0 =\r\n      flatCoordinates[bottom - 1] +\r\n      ((flatCoordinates[top - 1] - flatCoordinates[bottom - 1]) *\r\n        (lat - flatCoordinates[bottom])) /\r\n        (flatCoordinates[top] - flatCoordinates[bottom]);\r\n    const coordinate = [coordinate0, lat];\r\n    const point = this.meridiansLabels_[index].geom;\r\n    point.setCoordinates(coordinate);\r\n    return point;\r\n  }\r\n\r\n  /**\r\n   * Get the list of meridians.  Meridians are lines of equal longitude.\r\n   * @return {Array<LineString>} The meridians.\r\n   * @api\r\n   */\r\n  getMeridians() {\r\n    return this.meridians_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} lat Latitude.\r\n   * @param {number} minLon Minimal longitude.\r\n   * @param {number} maxLon Maximal longitude.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LineString} The parallel line string.\r\n   * @param {number} index Index.\r\n   * @private\r\n   */\r\n  getParallel_(lat, minLon, maxLon, squaredTolerance, index) {\r\n    const flatCoordinates = parallel(\r\n      lat,\r\n      minLon,\r\n      maxLon,\r\n      this.projection_,\r\n      squaredTolerance\r\n    );\r\n    let lineString = this.parallels_[index];\r\n    if (!lineString) {\r\n      lineString = new LineString(flatCoordinates, 'XY');\r\n    } else {\r\n      lineString.setFlatCoordinates('XY', flatCoordinates);\r\n      lineString.changed();\r\n    }\r\n    return lineString;\r\n  }\r\n\r\n  /**\r\n   * @param {LineString} lineString Parallels.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} index Index.\r\n   * @return {Point} Parallel point.\r\n   * @private\r\n   */\r\n  getParallelPoint_(lineString, extent, index) {\r\n    const flatCoordinates = lineString.getFlatCoordinates();\r\n    let left = 0;\r\n    let right = flatCoordinates.length - 2;\r\n    if (flatCoordinates[left] > flatCoordinates[right]) {\r\n      left = right;\r\n      right = 0;\r\n    }\r\n    const clampedLeft = Math.max(extent[0], flatCoordinates[left]);\r\n    const clampedRight = Math.min(extent[2], flatCoordinates[right]);\r\n    const lon = clamp(\r\n      extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_,\r\n      clampedLeft,\r\n      clampedRight\r\n    );\r\n    const coordinate1 =\r\n      flatCoordinates[left + 1] +\r\n      ((flatCoordinates[right + 1] - flatCoordinates[left + 1]) *\r\n        (lon - flatCoordinates[left])) /\r\n        (flatCoordinates[right] - flatCoordinates[left]);\r\n    const coordinate = [lon, coordinate1];\r\n    const point = this.parallelsLabels_[index].geom;\r\n    point.setCoordinates(coordinate);\r\n    return point;\r\n  }\r\n\r\n  /**\r\n   * Get the list of parallels.  Parallels are lines of equal latitude.\r\n   * @return {Array<LineString>} The parallels.\r\n   * @api\r\n   */\r\n  getParallels() {\r\n    return this.parallels_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @private\r\n   */\r\n  updateProjectionInfo_(projection) {\r\n    const epsg4326Projection = getProjection('EPSG:4326');\r\n\r\n    const worldExtent = projection.getWorldExtent();\r\n\r\n    this.maxLat_ = worldExtent[3];\r\n    this.maxLon_ = worldExtent[2];\r\n    this.minLat_ = worldExtent[1];\r\n    this.minLon_ = worldExtent[0];\r\n\r\n    // If the world extent crosses the dateline define a custom transform to\r\n    // return longitudes which wrap the dateline\r\n\r\n    const toLonLatTransform = getTransform(projection, epsg4326Projection);\r\n    if (this.minLon_ < this.maxLon_) {\r\n      this.toLonLatTransform_ = toLonLatTransform;\r\n    } else {\r\n      const split = this.minLon_ + this.maxLon_ / 2;\r\n      this.maxLon_ += 360;\r\n      this.toLonLatTransform_ = function (coordinates, output, dimension) {\r\n        dimension = dimension || 2;\r\n        const lonLatCoordinates = toLonLatTransform(\r\n          coordinates,\r\n          output,\r\n          dimension\r\n        );\r\n        for (let i = 0, l = lonLatCoordinates.length; i < l; i += dimension) {\r\n          if (lonLatCoordinates[i] < split) {\r\n            lonLatCoordinates[i] += 360;\r\n          }\r\n        }\r\n        return lonLatCoordinates;\r\n      };\r\n    }\r\n\r\n    // Transform the extent to get the limits of the view projection extent\r\n    // which should be available to the graticule\r\n\r\n    this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);\r\n    const worldExtentP = applyTransform(\r\n      [this.minLon_, this.minLat_, this.maxLon_, this.maxLat_],\r\n      this.fromLonLatTransform_,\r\n      undefined,\r\n      8\r\n    );\r\n\r\n    this.minX_ = worldExtentP[0];\r\n    this.maxX_ = worldExtentP[2];\r\n    this.minY_ = worldExtentP[1];\r\n    this.maxY_ = worldExtentP[3];\r\n\r\n    // Determine the view projection coordinates of the extremities of the world extent\r\n    // as these may lie inside a view extent (for example the pole in a polar projection)\r\n\r\n    this.bottomLeft_ = this.fromLonLatTransform_([this.minLon_, this.minLat_]);\r\n    this.bottomRight_ = this.fromLonLatTransform_([this.maxLon_, this.minLat_]);\r\n    this.topLeft_ = this.fromLonLatTransform_([this.minLon_, this.maxLat_]);\r\n    this.topRight_ = this.fromLonLatTransform_([this.maxLon_, this.maxLat_]);\r\n\r\n    // Transform the projection center to lon lat\r\n    // Some projections may have a void area at the poles\r\n    // so replace any NaN latitudes with the min or max value closest to a pole\r\n\r\n    this.projectionCenterLonLat_ = this.toLonLatTransform_(\r\n      getCenter(projection.getExtent())\r\n    );\r\n    if (isNaN(this.projectionCenterLonLat_[1])) {\r\n      this.projectionCenterLonLat_[1] =\r\n        Math.abs(this.maxLat_) >= Math.abs(this.minLat_)\r\n          ? this.maxLat_\r\n          : this.minLat_;\r\n    }\r\n\r\n    this.projection_ = projection;\r\n  }\r\n}\r\n\r\nexport default Graticule;\r\n", "/**\r\n * @module ol/webgl\r\n */\r\n\r\nimport {SAFARI_BUG_237906} from './has.js';\r\n\r\n/**\r\n * Constants taken from goog.webgl\r\n */\r\n\r\n/**\r\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\r\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\r\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const ARRAY_BUFFER = 0x8892;\r\n\r\n/**\r\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\r\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\r\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\r\n\r\n/**\r\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const STREAM_DRAW = 0x88e0;\r\n\r\n/**\r\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const STATIC_DRAW = 0x88e4;\r\n\r\n/**\r\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const DYNAMIC_DRAW = 0x88e8;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const UNSIGNED_BYTE = 0x1401;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const UNSIGNED_SHORT = 0x1403;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const UNSIGNED_INT = 0x1405;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const FLOAT = 0x1406;\r\n\r\n/** end of goog.webgl constants\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\r\n\r\n/**\r\n * @param {HTMLCanvasElement} canvas Canvas.\r\n * @param {Object} [attributes] Attributes.\r\n * @return {WebGLRenderingContext} WebGL rendering context.\r\n */\r\nexport function getContext(canvas, attributes) {\r\n  attributes = Object.assign(\r\n    {\r\n      preserveDrawingBuffer: true,\r\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\r\n    },\r\n    attributes\r\n  );\r\n  const ii = CONTEXT_IDS.length;\r\n  for (let i = 0; i < ii; ++i) {\r\n    try {\r\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\r\n      if (context) {\r\n        return /** @type {!WebGLRenderingContext} */ (context);\r\n      }\r\n    } catch (e) {\r\n      // pass\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * @type {Array<string>}\r\n */\r\nlet supportedExtensions;\r\n\r\n/**\r\n * @return {Array<string>} List of supported WebGL extensions.\r\n */\r\nexport function getSupportedExtensions() {\r\n  if (!supportedExtensions) {\r\n    const canvas = document.createElement('canvas');\r\n    const gl = getContext(canvas);\r\n    if (gl) {\r\n      supportedExtensions = gl.getSupportedExtensions();\r\n    }\r\n  }\r\n  return supportedExtensions;\r\n}\r\n", "/**\r\n * @module ol/webgl/Buffer\r\n */\r\nimport {\r\n  ARRAY_BUFFER,\r\n  DYNAMIC_DRAW,\r\n  ELEMENT_ARRAY_BUFFER,\r\n  STATIC_DRAW,\r\n  STREAM_DRAW,\r\n} from '../webgl.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\r\n * or `DYNAMIC_DRAW`.\r\n * @enum {number}\r\n */\r\nexport const BufferUsage = {\r\n  STATIC_DRAW: STATIC_DRAW,\r\n  STREAM_DRAW: STREAM_DRAW,\r\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Object used to store an array of data as well as usage information for that data.\r\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\r\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\r\n *\r\n * To populate the array, you can either use:\r\n * * A size using `#ofSize(buffer)`\r\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\r\n * * A plain array using `#fromArray(array)`\r\n *\r\n * Note:\r\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\r\n * for more info on buffer usage.\r\n */\r\nclass WebGLArrayBuffer {\r\n  /**\r\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\r\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\r\n   * Default is `DYNAMIC_DRAW`.\r\n   */\r\n  constructor(type, usage) {\r\n    /**\r\n     * @private\r\n     * @type {Float32Array|Uint32Array}\r\n     */\r\n    this.array = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.type = type;\r\n\r\n    assert(\r\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\r\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`'\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.usage = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\r\n  }\r\n\r\n  /**\r\n   * Populates the buffer with an array of the given size (all values will be zeroes).\r\n   * @param {number} size Array size\r\n   * @return {WebGLArrayBuffer} This\r\n   */\r\n  ofSize(size) {\r\n    this.array = new (getArrayClassForType(this.type))(size);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Populates the buffer with an array of the given size.\r\n   * @param {Array<number>} array Numerical array\r\n   * @return {WebGLArrayBuffer} This\r\n   */\r\n  fromArray(array) {\r\n    this.array = getArrayClassForType(this.type).from(array);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Populates the buffer with a raw binary array buffer.\r\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\r\n   * initialized for the same typed array class.\r\n   * @return {WebGLArrayBuffer} This\r\n   */\r\n  fromArrayBuffer(buffer) {\r\n    this.array = new (getArrayClassForType(this.type))(buffer);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Buffer type.\r\n   */\r\n  getType() {\r\n    return this.type;\r\n  }\r\n\r\n  /**\r\n   * Will return null if the buffer was not initialized\r\n   * @return {Float32Array|Uint32Array} Array.\r\n   */\r\n  getArray() {\r\n    return this.array;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Usage.\r\n   */\r\n  getUsage() {\r\n    return this.usage;\r\n  }\r\n\r\n  /**\r\n   * Will return 0 if the buffer is not initialized\r\n   * @return {number} Array size\r\n   */\r\n  getSize() {\r\n    return this.array ? this.array.length : 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a typed array constructor based on the given buffer type\r\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\r\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\r\n */\r\nexport function getArrayClassForType(type) {\r\n  switch (type) {\r\n    case ARRAY_BUFFER:\r\n      return Float32Array;\r\n    case ELEMENT_ARRAY_BUFFER:\r\n      return Uint32Array;\r\n    default:\r\n      return Float32Array;\r\n  }\r\n}\r\n\r\nexport default WebGLArrayBuffer;\r\n", "/**\r\n * @module ol/webgl/ContextEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  LOST: 'webglcontextlost',\r\n  RESTORED: 'webglcontextrestored',\r\n};\r\n", "/**\r\n * @module ol/webgl/PostProcessingPass\r\n */\r\n\r\nimport {getUid} from '../util.js';\r\n\r\nconst DEFAULT_VERTEX_SHADER = `\r\n  precision mediump float;\r\n  \r\n  attribute vec2 a_position;\r\n  varying vec2 v_texCoord;\r\n  varying vec2 v_screenCoord;\r\n  \r\n  uniform vec2 u_screenSize;\r\n   \r\n  void main() {\r\n    v_texCoord = a_position * 0.5 + 0.5;\r\n    v_screenCoord = v_texCoord * u_screenSize;\r\n    gl_Position = vec4(a_position, 0.0, 1.0);\r\n  }\r\n`;\r\n\r\nconst DEFAULT_FRAGMENT_SHADER = `\r\n  precision mediump float;\r\n   \r\n  uniform sampler2D u_image;\r\n  uniform float u_opacity;\r\n   \r\n  varying vec2 v_texCoord;\r\n   \r\n  void main() {\r\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\r\n  }\r\n`;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\r\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\r\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\r\n * @property {string} [vertexShader] Vertex shader source\r\n * @property {string} [fragmentShader] Fragment shader source\r\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\r\n */\r\n\r\n/**\r\n * @typedef {Object} UniformInternalDescription\r\n * @property {import(\"./Helper\").UniformValue} value Value\r\n * @property {WebGLUniformLocation} location Location\r\n * @property {WebGLTexture} [texture] Texture\r\n * @private\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * This class is used to define Post Processing passes with custom shaders and uniforms.\r\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\r\n *\r\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\r\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\r\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\r\n *\r\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\r\n * premultiplied.\r\n *\r\n * Default shaders are shown hereafter:\r\n *\r\n * * Vertex shader:\r\n *\r\n *   ```\r\n *   precision mediump float;\r\n *\r\n *   attribute vec2 a_position;\r\n *   varying vec2 v_texCoord;\r\n *   varying vec2 v_screenCoord;\r\n *\r\n *   uniform vec2 u_screenSize;\r\n *\r\n *   void main() {\r\n *     v_texCoord = a_position * 0.5 + 0.5;\r\n *     v_screenCoord = v_texCoord * u_screenSize;\r\n *     gl_Position = vec4(a_position, 0.0, 1.0);\r\n *   }\r\n *   ```\r\n *\r\n * * Fragment shader:\r\n *\r\n *   ```\r\n *   precision mediump float;\r\n *\r\n *   uniform sampler2D u_image;\r\n *   uniform float u_opacity;\r\n *\r\n *   varying vec2 v_texCoord;\r\n *\r\n *   void main() {\r\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\r\n *   }\r\n *   ```\r\n */\r\nclass WebGLPostProcessingPass {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    this.gl_ = options.webGlContext;\r\n    const gl = this.gl_;\r\n\r\n    this.scaleRatio_ = options.scaleRatio || 1;\r\n\r\n    this.renderTargetTexture_ = gl.createTexture();\r\n    this.renderTargetTextureSize_ = null;\r\n\r\n    this.frameBuffer_ = gl.createFramebuffer();\r\n    this.depthBuffer_ = gl.createRenderbuffer();\r\n\r\n    // compile the program for the frame buffer\r\n    // TODO: make compilation errors show up\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(\r\n      vertexShader,\r\n      options.vertexShader || DEFAULT_VERTEX_SHADER\r\n    );\r\n    gl.compileShader(vertexShader);\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(\r\n      fragmentShader,\r\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER\r\n    );\r\n    gl.compileShader(fragmentShader);\r\n    this.renderTargetProgram_ = gl.createProgram();\r\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\r\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\r\n    gl.linkProgram(this.renderTargetProgram_);\r\n\r\n    // bind the vertices buffer for the frame buffer\r\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\r\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array(verticesArray),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\r\n      this.renderTargetProgram_,\r\n      'a_position'\r\n    );\r\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\r\n      this.renderTargetProgram_,\r\n      'u_screenSize'\r\n    );\r\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\r\n      this.renderTargetProgram_,\r\n      'u_opacity'\r\n    );\r\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\r\n      this.renderTargetProgram_,\r\n      'u_image'\r\n    );\r\n\r\n    /**\r\n     * Holds info about custom uniforms used in the post processing pass\r\n     * @type {Array<UniformInternalDescription>}\r\n     * @private\r\n     */\r\n    this.uniforms_ = [];\r\n    options.uniforms &&\r\n      Object.keys(options.uniforms).forEach((name) => {\r\n        this.uniforms_.push({\r\n          value: options.uniforms[name],\r\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get the WebGL rendering context\r\n   * @return {WebGLRenderingContext} The rendering context.\r\n   */\r\n  getGL() {\r\n    return this.gl_;\r\n  }\r\n\r\n  /**\r\n   * Initialize the render target texture of the post process, make sure it is at the\r\n   * right size and bind it as a render target for the next draw calls.\r\n   * The last step to be initialized will be the one where the primitives are rendered.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   */\r\n  init(frameState) {\r\n    const gl = this.getGL();\r\n    const textureSize = [\r\n      gl.drawingBufferWidth * this.scaleRatio_,\r\n      gl.drawingBufferHeight * this.scaleRatio_,\r\n    ];\r\n\r\n    // rendering goes to my buffer\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\r\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\r\n\r\n    // if size has changed: adjust canvas & render target texture\r\n    if (\r\n      !this.renderTargetTextureSize_ ||\r\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\r\n      this.renderTargetTextureSize_[1] !== textureSize[1]\r\n    ) {\r\n      this.renderTargetTextureSize_ = textureSize;\r\n\r\n      // create a new texture\r\n      const level = 0;\r\n      const internalFormat = gl.RGBA;\r\n      const border = 0;\r\n      const format = gl.RGBA;\r\n      const type = gl.UNSIGNED_BYTE;\r\n      const data = null;\r\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        level,\r\n        internalFormat,\r\n        textureSize[0],\r\n        textureSize[1],\r\n        border,\r\n        format,\r\n        type,\r\n        data\r\n      );\r\n\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n      // bind the texture to the framebuffer\r\n      gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER,\r\n        gl.COLOR_ATTACHMENT0,\r\n        gl.TEXTURE_2D,\r\n        this.renderTargetTexture_,\r\n        0\r\n      );\r\n\r\n      gl.renderbufferStorage(\r\n        gl.RENDERBUFFER,\r\n        gl.DEPTH_COMPONENT16,\r\n        textureSize[0],\r\n        textureSize[1]\r\n      );\r\n      gl.framebufferRenderbuffer(\r\n        gl.FRAMEBUFFER,\r\n        gl.DEPTH_ATTACHMENT,\r\n        gl.RENDERBUFFER,\r\n        this.depthBuffer_\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render to the next postprocessing pass (or to the canvas if final pass).\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\r\n   */\r\n  apply(frameState, nextPass, preCompose, postCompose) {\r\n    const gl = this.getGL();\r\n    const size = frameState.size;\r\n\r\n    gl.bindFramebuffer(\r\n      gl.FRAMEBUFFER,\r\n      nextPass ? nextPass.getFrameBuffer() : null\r\n    );\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\r\n\r\n    if (!nextPass) {\r\n      // clear the canvas if we are the first to render to it\r\n      // and preserveDrawingBuffer is true\r\n      const canvasId = getUid(gl.canvas);\r\n      if (!frameState.renderTargets[canvasId]) {\r\n        const attributes = gl.getContextAttributes();\r\n        if (attributes && attributes.preserveDrawingBuffer) {\r\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n          gl.clearDepth(1.0);\r\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        }\r\n\r\n        frameState.renderTargets[canvasId] = true;\r\n      }\r\n    }\r\n\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\r\n\r\n    gl.useProgram(this.renderTargetProgram_);\r\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\r\n    gl.vertexAttribPointer(\r\n      this.renderTargetAttribLocation_,\r\n      2,\r\n      gl.FLOAT,\r\n      false,\r\n      0,\r\n      0\r\n    );\r\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\r\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\r\n\r\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\r\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\r\n\r\n    this.applyUniforms(frameState);\r\n\r\n    if (preCompose) {\r\n      preCompose(gl, frameState);\r\n    }\r\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n    if (postCompose) {\r\n      postCompose(gl, frameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLFramebuffer} Frame buffer\r\n   */\r\n  getFrameBuffer() {\r\n    return this.frameBuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLRenderbuffer} Depth buffer\r\n   */\r\n  getDepthBuffer() {\r\n    return this.depthBuffer_;\r\n  }\r\n\r\n  /**\r\n   * Sets the custom uniforms based on what was given in the constructor.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  applyUniforms(frameState) {\r\n    const gl = this.getGL();\r\n\r\n    let value;\r\n    let textureSlot = 1;\r\n    this.uniforms_.forEach(function (uniform) {\r\n      value =\r\n        typeof uniform.value === 'function'\r\n          ? uniform.value(frameState)\r\n          : uniform.value;\r\n\r\n      // apply value based on type\r\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\r\n        // create a texture & put data\r\n        if (!uniform.texture) {\r\n          uniform.texture = gl.createTexture();\r\n        }\r\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\r\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        if (value instanceof ImageData) {\r\n          gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            gl.RGBA,\r\n            value.width,\r\n            value.height,\r\n            0,\r\n            gl.UNSIGNED_BYTE,\r\n            new Uint8Array(value.data)\r\n          );\r\n        } else {\r\n          gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            gl.RGBA,\r\n            gl.UNSIGNED_BYTE,\r\n            value\r\n          );\r\n        }\r\n\r\n        // fill texture slots\r\n        gl.uniform1i(uniform.location, textureSlot++);\r\n      } else if (Array.isArray(value)) {\r\n        switch (value.length) {\r\n          case 2:\r\n            gl.uniform2f(uniform.location, value[0], value[1]);\r\n            return;\r\n          case 3:\r\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\r\n            return;\r\n          case 4:\r\n            gl.uniform4f(\r\n              uniform.location,\r\n              value[0],\r\n              value[1],\r\n              value[2],\r\n              value[3]\r\n            );\r\n            return;\r\n          default:\r\n            return;\r\n        }\r\n      } else if (typeof value === 'number') {\r\n        gl.uniform1f(uniform.location, value);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default WebGLPostProcessingPass;\r\n", "/**\r\n * @module ol/vec/mat4\r\n */\r\n\r\n/**\r\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\r\n */\r\nexport function create() {\r\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n}\r\n\r\n/**\r\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\r\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\r\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\r\n */\r\nexport function fromTransform(mat4, transform) {\r\n  mat4[0] = transform[0];\r\n  mat4[1] = transform[1];\r\n  mat4[4] = transform[2];\r\n  mat4[5] = transform[3];\r\n  mat4[12] = transform[4];\r\n  mat4[13] = transform[5];\r\n  return mat4;\r\n}\r\n", "/**\r\n * @module ol/webgl/Helper\r\n */\r\nimport ContextEventType from '../webgl/ContextEventType.js';\r\nimport Disposable from '../Disposable.js';\r\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\r\nimport {\r\n  FLOAT,\r\n  UNSIGNED_BYTE,\r\n  UNSIGNED_INT,\r\n  UNSIGNED_SHORT,\r\n  getContext,\r\n} from '../webgl.js';\r\nimport {clear} from '../obj.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {create, fromTransform} from '../vec/mat4.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {Object} BufferCacheEntry\r\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\r\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\r\n */\r\n\r\n/**\r\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\r\n * @enum {number}\r\n */\r\nexport const ShaderType = {\r\n  FRAGMENT_SHADER: 0x8b30,\r\n  VERTEX_SHADER: 0x8b31,\r\n};\r\n\r\n/**\r\n * Names of uniforms made available to all shaders.\r\n * Please note: changing these *will* break custom shaders!\r\n * @enum {string}\r\n */\r\nexport const DefaultUniform = {\r\n  PROJECTION_MATRIX: 'u_projectionMatrix',\r\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\r\n  TIME: 'u_time',\r\n  ZOOM: 'u_zoom',\r\n  RESOLUTION: 'u_resolution',\r\n  ROTATION: 'u_rotation',\r\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\r\n  PIXEL_RATIO: 'u_pixelRatio',\r\n  HIT_DETECTION: 'u_hitDetection',\r\n};\r\n\r\n/**\r\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\r\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\r\n * @enum {number}\r\n */\r\nexport const AttributeType = {\r\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\r\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\r\n  UNSIGNED_INT: UNSIGNED_INT,\r\n  FLOAT: FLOAT,\r\n};\r\n\r\n/**\r\n * Description of an attribute in a buffer\r\n * @typedef {Object} AttributeDescription\r\n * @property {string} name Attribute name to use in shaders\r\n * @property {number} size Number of components per attributes\r\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\r\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\r\n * Default is `FLOAT`.\r\n */\r\n\r\n/**\r\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\r\n */\r\n\r\n/**\r\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\r\n * one of the previous types.\r\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\r\n */\r\n\r\n/**\r\n * @typedef {Object} PostProcessesOptions\r\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\r\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\r\n * @property {string} [vertexShader] Vertex shader source\r\n * @property {string} [fragmentShader] Fragment shader source\r\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\r\n * names in the provided or default shaders.\r\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n * @property {string} [canvasCacheKey] The cache key for the canvas.\r\n */\r\n\r\n/**\r\n * @typedef {Object} UniformInternalDescription\r\n * @property {string} name Name\r\n * @property {UniformValue} [value] Value\r\n * @property {UniformValue} [prevValue] The previous value.\r\n * @property {WebGLTexture} [texture] Texture\r\n * @private\r\n */\r\n\r\n/**\r\n * @typedef {Object} CanvasCacheItem\r\n * @property {WebGLRenderingContext} context The context of this canvas.\r\n * @property {number} users The count of users of this canvas.\r\n */\r\n\r\n/**\r\n * @type {Object<string,CanvasCacheItem>}\r\n */\r\nconst canvasCache = {};\r\n\r\n/**\r\n * @param {string} key The cache key for the canvas.\r\n * @return {string} The shared cache key.\r\n */\r\nfunction getSharedCanvasCacheKey(key) {\r\n  return 'shared/' + key;\r\n}\r\n\r\nlet uniqueCanvasCacheKeyCount = 0;\r\n\r\n/**\r\n * @return {string} The unique cache key.\r\n */\r\nfunction getUniqueCanvasCacheKey() {\r\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\r\n  uniqueCanvasCacheKeyCount += 1;\r\n  return key;\r\n}\r\n\r\n/**\r\n * @param {string} key The cache key for the canvas.\r\n * @return {WebGLRenderingContext} The canvas.\r\n */\r\nfunction getOrCreateContext(key) {\r\n  let cacheItem = canvasCache[key];\r\n  if (!cacheItem) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    canvas.style.position = 'absolute';\r\n    canvas.style.left = '0';\r\n    const context = getContext(canvas);\r\n    cacheItem = {users: 0, context};\r\n    canvasCache[key] = cacheItem;\r\n  }\r\n\r\n  cacheItem.users += 1;\r\n  return cacheItem.context;\r\n}\r\n\r\n/**\r\n * @param {string} key The cache key for the canvas.\r\n */\r\nfunction releaseCanvas(key) {\r\n  const cacheItem = canvasCache[key];\r\n  if (!cacheItem) {\r\n    return;\r\n  }\r\n\r\n  cacheItem.users -= 1;\r\n  if (cacheItem.users > 0) {\r\n    return;\r\n  }\r\n\r\n  const gl = cacheItem.context;\r\n  const extension = gl.getExtension('WEBGL_lose_context');\r\n  if (extension) {\r\n    extension.loseContext();\r\n  }\r\n  const canvas = gl.canvas;\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n\r\n  delete canvasCache[key];\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\r\n * directly the WebGL API should not be required anymore.\r\n *\r\n * Several operations are handled by the `WebGLHelper` class:\r\n *\r\n * ### Define custom shaders and uniforms\r\n *\r\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\r\n *\r\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\r\n *   Outputs are:\r\n *\r\n *   * `gl_Position`: position of the vertex in screen space\r\n *\r\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\r\n *\r\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\r\n *\r\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\r\n *   can be changed at every frame and can be of type float, arrays of float or images.\r\n *\r\n *   Shaders must be compiled and assembled into a program like so:\r\n *   ```js\r\n *   // here we simply create two shaders and assemble them in a program which is then used\r\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\r\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\r\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\r\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\r\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\r\n *   helper.useProgram(this.program, frameState);\r\n *   ```\r\n *\r\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\r\n *   You can also change their value along the way like so:\r\n *   ```js\r\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\r\n *   ```\r\n *\r\n * ### Defining post processing passes\r\n *\r\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\r\n *   while applying special effects in screen space.\r\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\r\n *\r\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\r\n *   A post process step accepts the following options:\r\n *\r\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\r\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\r\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\r\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\r\n *\r\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\r\n *\r\n * ### Binding WebGL buffers and flushing data into them\r\n *\r\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\r\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\r\n *   This is done using {@link bindBuffer}.\r\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\r\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\r\n *\r\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\r\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\r\n *\r\n *   Examples below:\r\n *   ```js\r\n *   // at initialization phase\r\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\r\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\r\n *\r\n *   // when array values have changed\r\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\r\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n *\r\n *   // at rendering phase\r\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\r\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n *   ```\r\n *\r\n * ### Specifying attributes\r\n *\r\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\r\n *   Attributes are used to specify these uses. Specify the attribute names with\r\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\r\n *\r\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\r\n *   ```js\r\n *   // here we indicate that the data array has the following structure:\r\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\r\n *   helper.enableAttributes([\r\n *     {\r\n *        name: 'a_position',\r\n *        size: 2\r\n *     },\r\n *     {\r\n *       name: 'a_offset',\r\n *       size: 2\r\n *     },\r\n *     {\r\n *       name: 'a_texCoord',\r\n *       size: 2\r\n *     }\r\n *   ])\r\n *   ```\r\n *\r\n * ### Rendering primitives\r\n *\r\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\r\n *   ```js\r\n *   // frame preparation step\r\n *   helper.prepareDraw(frameState);\r\n *\r\n *   // call this for every data array that has to be rendered on screen\r\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\r\n *\r\n *   // finalize the rendering by applying post processes\r\n *   helper.finalizeDraw(frameState);\r\n *   ```\r\n *\r\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\r\n */\r\nclass WebGLHelper extends Disposable {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    options = options || {};\r\n\r\n    /** @private */\r\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\r\n\r\n    /** @private */\r\n    this.boundHandleWebGLContextRestored_ =\r\n      this.handleWebGLContextRestored.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.canvasCacheKey_ = options.canvasCacheKey\r\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\r\n      : getUniqueCanvasCacheKey();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLRenderingContext}\r\n     */\r\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, BufferCacheEntry>}\r\n     */\r\n    this.bufferCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object>}\r\n     */\r\n    this.extensionCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLProgram}\r\n     */\r\n    this.currentProgram_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type boolean\r\n     */\r\n    this.needsToBeRecreated_ = false;\r\n\r\n    const canvas = this.gl_.canvas;\r\n\r\n    canvas.addEventListener(\r\n      ContextEventType.LOST,\r\n      this.boundHandleWebGLContextLost_\r\n    );\r\n    canvas.addEventListener(\r\n      ContextEventType.RESTORED,\r\n      this.boundHandleWebGLContextRestored_\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../transform.js\").Transform}\r\n     */\r\n    this.offsetRotateMatrix_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../transform.js\").Transform}\r\n     */\r\n    this.offsetScaleMatrix_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.tmpMat4_ = create();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\r\n     */\r\n    this.uniformLocationsByProgram_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, number>>}\r\n     */\r\n    this.attribLocationsByProgram_ = {};\r\n\r\n    /**\r\n     * Holds info about custom uniforms used in the post processing pass.\r\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\r\n     * @type {Array<UniformInternalDescription>}\r\n     * @private\r\n     */\r\n    this.uniforms_ = [];\r\n    if (options.uniforms) {\r\n      this.setUniforms(options.uniforms);\r\n    }\r\n\r\n    /**\r\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\r\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\r\n     * the frame buffer logic).\r\n     * @type {Array<WebGLPostProcessingPass>}\r\n     * @private\r\n     */\r\n    this.postProcessPasses_ = options.postProcesses\r\n      ? options.postProcesses.map(\r\n          (options) =>\r\n            new WebGLPostProcessingPass({\r\n              webGlContext: this.gl_,\r\n              scaleRatio: options.scaleRatio,\r\n              vertexShader: options.vertexShader,\r\n              fragmentShader: options.fragmentShader,\r\n              uniforms: options.uniforms,\r\n            })\r\n        )\r\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\r\n\r\n    /**\r\n     * @type {string|null}\r\n     * @private\r\n     */\r\n    this.shaderCompileErrors_ = null;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.startTime_ = Date.now();\r\n  }\r\n\r\n  /**\r\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\r\n   */\r\n  setUniforms(uniforms) {\r\n    this.uniforms_ = [];\r\n    this.addUniforms(uniforms);\r\n  }\r\n\r\n  /**\r\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\r\n   */\r\n  addUniforms(uniforms) {\r\n    for (const name in uniforms) {\r\n      this.uniforms_.push({\r\n        name: name,\r\n        value: uniforms[name],\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} canvasCacheKey The canvas cache key.\r\n   * @return {boolean} The provided key matches the one this helper was constructed with.\r\n   */\r\n  canvasCacheKeyMatches(canvasCacheKey) {\r\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\r\n  }\r\n\r\n  /**\r\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\r\n   * Extensions are cached after they are enabled for the first time.\r\n   * @param {string} name The extension name.\r\n   * @return {Object|null} The extension or null if not supported.\r\n   */\r\n  getExtension(name) {\r\n    if (name in this.extensionCache_) {\r\n      return this.extensionCache_[name];\r\n    }\r\n    const extension = this.gl_.getExtension(name);\r\n    this.extensionCache_[name] = extension;\r\n    return extension;\r\n  }\r\n\r\n  /**\r\n   * Just bind the buffer if it's in the cache. Otherwise create\r\n   * the WebGL buffer, bind it, populate it, and add an entry to\r\n   * the cache.\r\n   * @param {import(\"./Buffer\").default} buffer Buffer.\r\n   */\r\n  bindBuffer(buffer) {\r\n    const gl = this.gl_;\r\n    const bufferKey = getUid(buffer);\r\n    let bufferCache = this.bufferCache_[bufferKey];\r\n    if (!bufferCache) {\r\n      const webGlBuffer = gl.createBuffer();\r\n      bufferCache = {\r\n        buffer: buffer,\r\n        webGlBuffer: webGlBuffer,\r\n      };\r\n      this.bufferCache_[bufferKey] = bufferCache;\r\n    }\r\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\r\n  }\r\n\r\n  /**\r\n   * Update the data contained in the buffer array; this is required for the\r\n   * new data to be rendered\r\n   * @param {import(\"./Buffer\").default} buffer Buffer.\r\n   */\r\n  flushBufferData(buffer) {\r\n    const gl = this.gl_;\r\n    this.bindBuffer(buffer);\r\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\r\n   */\r\n  deleteBuffer(buf) {\r\n    const gl = this.gl_;\r\n    const bufferKey = getUid(buf);\r\n    const bufferCacheEntry = this.bufferCache_[bufferKey];\r\n    if (bufferCacheEntry && !gl.isContextLost()) {\r\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\r\n    }\r\n    delete this.bufferCache_[bufferKey];\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    const canvas = this.gl_.canvas;\r\n    canvas.removeEventListener(\r\n      ContextEventType.LOST,\r\n      this.boundHandleWebGLContextLost_\r\n    );\r\n    canvas.removeEventListener(\r\n      ContextEventType.RESTORED,\r\n      this.boundHandleWebGLContextRestored_\r\n    );\r\n\r\n    releaseCanvas(this.canvasCacheKey_);\r\n\r\n    delete this.gl_;\r\n  }\r\n\r\n  /**\r\n   * Clear the buffer & set the viewport to draw.\r\n   * Post process passes will be initialized here, the first one being bound as a render target for\r\n   * subsequent draw calls.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\r\n   * @param {boolean} [enableDepth] If true, enables depth testing.\r\n   */\r\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\r\n    const gl = this.gl_;\r\n    const canvas = this.getCanvas();\r\n    const size = frameState.size;\r\n    const pixelRatio = frameState.pixelRatio;\r\n\r\n    if (\r\n      canvas.width !== size[0] * pixelRatio ||\r\n      canvas.height !== size[1] * pixelRatio\r\n    ) {\r\n      canvas.width = size[0] * pixelRatio;\r\n      canvas.height = size[1] * pixelRatio;\r\n      canvas.style.width = size[0] + 'px';\r\n      canvas.style.height = size[1] + 'px';\r\n    }\r\n\r\n    // loop backwards in post processes list\r\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\r\n      this.postProcessPasses_[i].init(frameState);\r\n    }\r\n\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n    gl.depthRange(0.0, 1.0);\r\n    gl.clearDepth(1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\r\n    if (enableDepth) {\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.depthFunc(gl.LEQUAL);\r\n    } else {\r\n      gl.disable(gl.DEPTH_TEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepare a program to use a texture.\r\n   * @param {WebGLTexture} texture The texture.\r\n   * @param {number} slot The texture slot.\r\n   * @param {string} uniformName The corresponding uniform name.\r\n   */\r\n  bindTexture(texture, slot, uniformName) {\r\n    const gl = this.gl_;\r\n    gl.activeTexture(gl.TEXTURE0 + slot);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\r\n  }\r\n\r\n  /**\r\n   * Clear the render target & bind it for future draw operations.\r\n   * This is similar to `prepareDraw`, only post processes will not be applied.\r\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\r\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\r\n   * @param {boolean} [enableDepth] If true, enables depth testing.\r\n   */\r\n  prepareDrawToRenderTarget(\r\n    frameState,\r\n    renderTarget,\r\n    disableAlphaBlend,\r\n    enableDepth\r\n  ) {\r\n    const gl = this.gl_;\r\n    const size = renderTarget.getSize();\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\r\n    gl.viewport(0, 0, size[0], size[1]);\r\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\r\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n    gl.depthRange(0.0, 1.0);\r\n    gl.clearDepth(1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    gl.enable(gl.BLEND);\r\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\r\n    if (enableDepth) {\r\n      gl.enable(gl.DEPTH_TEST);\r\n      gl.depthFunc(gl.LEQUAL);\r\n    } else {\r\n      gl.disable(gl.DEPTH_TEST);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\r\n   * @param {number} start Start index.\r\n   * @param {number} end End index.\r\n   */\r\n  drawElements(start, end) {\r\n    const gl = this.gl_;\r\n    this.getExtension('OES_element_index_uint');\r\n\r\n    const elementType = gl.UNSIGNED_INT;\r\n    const elementSize = 4;\r\n\r\n    const numItems = end - start;\r\n    const offsetInBytes = start * elementSize;\r\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\r\n  }\r\n\r\n  /**\r\n   * Apply the successive post process passes which will eventually render to the actual canvas.\r\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\r\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\r\n   */\r\n  finalizeDraw(frameState, preCompose, postCompose) {\r\n    // apply post processes using the next one as target\r\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\r\n      if (i === ii - 1) {\r\n        this.postProcessPasses_[i].apply(\r\n          frameState,\r\n          null,\r\n          preCompose,\r\n          postCompose\r\n        );\r\n      } else {\r\n        this.postProcessPasses_[i].apply(\r\n          frameState,\r\n          this.postProcessPasses_[i + 1]\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getCanvas() {\r\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\r\n  }\r\n\r\n  /**\r\n   * Get the WebGL rendering context\r\n   * @return {WebGLRenderingContext} The rendering context.\r\n   */\r\n  getGL() {\r\n    return this.gl_;\r\n  }\r\n\r\n  /**\r\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  applyFrameState(frameState) {\r\n    const size = frameState.size;\r\n    const rotation = frameState.viewState.rotation;\r\n    const pixelRatio = frameState.pixelRatio;\r\n\r\n    this.setUniformFloatValue(\r\n      DefaultUniform.TIME,\r\n      (Date.now() - this.startTime_) * 0.001\r\n    );\r\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\r\n    this.setUniformFloatValue(\r\n      DefaultUniform.RESOLUTION,\r\n      frameState.viewState.resolution\r\n    );\r\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\r\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\r\n      size[0],\r\n      size[1],\r\n    ]);\r\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\r\n  }\r\n\r\n  /**\r\n   * Sets the `u_hitDetection` uniform.\r\n   * @param {boolean} enabled Whether to enable the hit detection code path\r\n   */\r\n  applyHitDetectionUniform(enabled) {\r\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\r\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\r\n\r\n    // hit detection uses a fixed pixel ratio\r\n    if (enabled) {\r\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  applyUniforms(frameState) {\r\n    const gl = this.gl_;\r\n\r\n    let value;\r\n    let textureSlot = 0;\r\n    this.uniforms_.forEach((uniform) => {\r\n      value =\r\n        typeof uniform.value === 'function'\r\n          ? uniform.value(frameState)\r\n          : uniform.value;\r\n\r\n      // apply value based on type\r\n      if (\r\n        value instanceof HTMLCanvasElement ||\r\n        value instanceof HTMLImageElement ||\r\n        value instanceof ImageData\r\n      ) {\r\n        // create a texture & put data\r\n        if (!uniform.texture) {\r\n          uniform.prevValue = undefined;\r\n          uniform.texture = gl.createTexture();\r\n        }\r\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        const imageReady =\r\n          !(value instanceof HTMLImageElement) ||\r\n          /** @type {HTMLImageElement} */ (value).complete;\r\n        if (imageReady && uniform.prevValue !== value) {\r\n          uniform.prevValue = value;\r\n          gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            gl.RGBA,\r\n            gl.UNSIGNED_BYTE,\r\n            value\r\n          );\r\n        }\r\n        textureSlot++;\r\n      } else if (Array.isArray(value) && value.length === 6) {\r\n        this.setUniformMatrixValue(\r\n          uniform.name,\r\n          fromTransform(this.tmpMat4_, value)\r\n        );\r\n      } else if (Array.isArray(value) && value.length <= 4) {\r\n        switch (value.length) {\r\n          case 2:\r\n            gl.uniform2f(\r\n              this.getUniformLocation(uniform.name),\r\n              value[0],\r\n              value[1]\r\n            );\r\n            return;\r\n          case 3:\r\n            gl.uniform3f(\r\n              this.getUniformLocation(uniform.name),\r\n              value[0],\r\n              value[1],\r\n              value[2]\r\n            );\r\n            return;\r\n          case 4:\r\n            gl.uniform4f(\r\n              this.getUniformLocation(uniform.name),\r\n              value[0],\r\n              value[1],\r\n              value[2],\r\n              value[3]\r\n            );\r\n            return;\r\n          default:\r\n            return;\r\n        }\r\n      } else if (typeof value === 'number') {\r\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\r\n   * in the program will be set based on the current frame state and the helper configuration.\r\n   * @param {WebGLProgram} program Program.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  useProgram(program, frameState) {\r\n    const gl = this.gl_;\r\n    gl.useProgram(program);\r\n    this.currentProgram_ = program;\r\n    this.applyFrameState(frameState);\r\n    this.applyUniforms(frameState);\r\n  }\r\n\r\n  /**\r\n   * Will attempt to compile a vertex or fragment shader based on source\r\n   * On error, the shader will be returned but\r\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\r\n   * Use `gl.getShaderInfoLog(shader)` to have details\r\n   * @param {string} source Shader source\r\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\r\n   * @return {WebGLShader} Shader object\r\n   */\r\n  compileShader(source, type) {\r\n    const gl = this.gl_;\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, source);\r\n    gl.compileShader(shader);\r\n    return shader;\r\n  }\r\n\r\n  /**\r\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\r\n   * @param {string} fragmentShaderSource Fragment shader source.\r\n   * @param {string} vertexShaderSource Vertex shader source.\r\n   * @return {WebGLProgram} Program\r\n   */\r\n  getProgram(fragmentShaderSource, vertexShaderSource) {\r\n    const gl = this.gl_;\r\n\r\n    const fragmentShader = this.compileShader(\r\n      fragmentShaderSource,\r\n      gl.FRAGMENT_SHADER\r\n    );\r\n\r\n    const vertexShader = this.compileShader(\r\n      vertexShaderSource,\r\n      gl.VERTEX_SHADER\r\n    );\r\n\r\n    const program = gl.createProgram();\r\n    gl.attachShader(program, fragmentShader);\r\n    gl.attachShader(program, vertexShader);\r\n    gl.linkProgram(program);\r\n\r\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\r\n        fragmentShader\r\n      )}`;\r\n      throw new Error(message);\r\n    }\r\n    gl.deleteShader(fragmentShader);\r\n\r\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\r\n        vertexShader\r\n      )}`;\r\n      throw new Error(message);\r\n    }\r\n    gl.deleteShader(vertexShader);\r\n\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\r\n        program\r\n      )}`;\r\n      throw new Error(message);\r\n    }\r\n\r\n    return program;\r\n  }\r\n\r\n  /**\r\n   * Will get the location from the shader or the cache\r\n   * @param {string} name Uniform name\r\n   * @return {WebGLUniformLocation} uniformLocation\r\n   */\r\n  getUniformLocation(name) {\r\n    const programUid = getUid(this.currentProgram_);\r\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\r\n      this.uniformLocationsByProgram_[programUid] = {};\r\n    }\r\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\r\n      this.uniformLocationsByProgram_[programUid][name] =\r\n        this.gl_.getUniformLocation(this.currentProgram_, name);\r\n    }\r\n    return this.uniformLocationsByProgram_[programUid][name];\r\n  }\r\n\r\n  /**\r\n   * Will get the location from the shader or the cache\r\n   * @param {string} name Attribute name\r\n   * @return {number} attribLocation\r\n   */\r\n  getAttributeLocation(name) {\r\n    const programUid = getUid(this.currentProgram_);\r\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\r\n      this.attribLocationsByProgram_[programUid] = {};\r\n    }\r\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\r\n      this.attribLocationsByProgram_[programUid][name] =\r\n        this.gl_.getAttribLocation(this.currentProgram_, name);\r\n    }\r\n    return this.attribLocationsByProgram_[programUid][name];\r\n  }\r\n\r\n  /**\r\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\r\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../transform\").Transform} transform Transform to update.\r\n   * @return {import(\"../transform\").Transform} The updated transform object.\r\n   */\r\n  makeProjectionTransform(frameState, transform) {\r\n    const size = frameState.size;\r\n    const rotation = frameState.viewState.rotation;\r\n    const resolution = frameState.viewState.resolution;\r\n    const center = frameState.viewState.center;\r\n    composeTransform(\r\n      transform,\r\n      0,\r\n      0,\r\n      2 / (resolution * size[0]),\r\n      2 / (resolution * size[1]),\r\n      -rotation,\r\n      -center[0],\r\n      -center[1]\r\n    );\r\n    return transform;\r\n  }\r\n\r\n  /**\r\n   * Give a value for a standard float uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {number} value Value\r\n   */\r\n  setUniformFloatValue(uniform, value) {\r\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\r\n  }\r\n\r\n  /**\r\n   * Give a value for a vec2 uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {Array<number>} value Array of length 4.\r\n   */\r\n  setUniformFloatVec2(uniform, value) {\r\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\r\n  }\r\n\r\n  /**\r\n   * Give a value for a vec4 uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {Array<number>} value Array of length 4.\r\n   */\r\n  setUniformFloatVec4(uniform, value) {\r\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\r\n  }\r\n\r\n  /**\r\n   * Give a value for a standard matrix4 uniform\r\n   * @param {string} uniform Uniform name\r\n   * @param {Array<number>} value Matrix value\r\n   */\r\n  setUniformMatrixValue(uniform, value) {\r\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\r\n  }\r\n\r\n  /**\r\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\r\n   * internally.\r\n   * @param {string} attribName Attribute name\r\n   * @param {number} size Number of components per attributes\r\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\r\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\r\n   * @param {number} offset Offset in bytes\r\n   * @private\r\n   */\r\n  enableAttributeArray_(attribName, size, type, stride, offset) {\r\n    const location = this.getAttributeLocation(attribName);\r\n    // the attribute has not been found in the shaders or is not used; do not enable it\r\n    if (location < 0) {\r\n      return;\r\n    }\r\n    this.gl_.enableVertexAttribArray(location);\r\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\r\n  }\r\n\r\n  /**\r\n   * Will enable the following attributes to be read from the currently bound buffer,\r\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\r\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\r\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\r\n   */\r\n  enableAttributes(attributes) {\r\n    const stride = computeAttributesStride(attributes);\r\n    let offset = 0;\r\n    for (let i = 0; i < attributes.length; i++) {\r\n      const attr = attributes[i];\r\n      this.enableAttributeArray_(\r\n        attr.name,\r\n        attr.size,\r\n        attr.type || FLOAT,\r\n        stride,\r\n        offset\r\n      );\r\n      offset += attr.size * getByteSizeFromType(attr.type);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * WebGL context was lost\r\n   * @param {WebGLContextEvent} event The context loss event.\r\n   * @private\r\n   */\r\n  handleWebGLContextLost(event) {\r\n    clear(this.bufferCache_);\r\n    this.currentProgram_ = null;\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * WebGL context was restored\r\n   * @private\r\n   */\r\n  handleWebGLContextRestored() {\r\n    this.needsToBeRecreated_ = true;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\r\n   * @return {boolean} Whether this helper needs to be recreated.\r\n   */\r\n  needsToBeRecreated() {\r\n    return this.needsToBeRecreated_;\r\n  }\r\n\r\n  /**\r\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\r\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\r\n   * parameter will be ignored.\r\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\r\n   * @param {Array<number>} size Expected size of the texture\r\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [data] Image data/object to bind to the texture\r\n   * @param {WebGLTexture} [texture] Existing texture to reuse\r\n   * @return {WebGLTexture} The generated texture\r\n   */\r\n  createTexture(size, data, texture) {\r\n    const gl = this.gl_;\r\n    texture = texture || gl.createTexture();\r\n\r\n    // set params & size\r\n    const level = 0;\r\n    const internalFormat = gl.RGBA;\r\n    const border = 0;\r\n    const format = gl.RGBA;\r\n    const type = gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    if (data) {\r\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\r\n    } else {\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        level,\r\n        internalFormat,\r\n        size[0],\r\n        size[1],\r\n        border,\r\n        format,\r\n        type,\r\n        null\r\n      );\r\n    }\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    return texture;\r\n  }\r\n}\r\n\r\n/**\r\n * Compute a stride in bytes based on a list of attributes\r\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\r\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\r\n */\r\nexport function computeAttributesStride(attributes) {\r\n  let stride = 0;\r\n  for (let i = 0; i < attributes.length; i++) {\r\n    const attr = attributes[i];\r\n    stride += attr.size * getByteSizeFromType(attr.type);\r\n  }\r\n  return stride;\r\n}\r\n\r\n/**\r\n * Computes the size in byte of an attribute type.\r\n * @param {AttributeType} type Attribute type\r\n * @return {number} The size in bytes\r\n */\r\nfunction getByteSizeFromType(type) {\r\n  switch (type) {\r\n    case AttributeType.UNSIGNED_BYTE:\r\n      return Uint8Array.BYTES_PER_ELEMENT;\r\n    case AttributeType.UNSIGNED_SHORT:\r\n      return Uint16Array.BYTES_PER_ELEMENT;\r\n    case AttributeType.UNSIGNED_INT:\r\n      return Uint32Array.BYTES_PER_ELEMENT;\r\n    case AttributeType.FLOAT:\r\n    default:\r\n      return Float32Array.BYTES_PER_ELEMENT;\r\n  }\r\n}\r\n\r\nexport default WebGLHelper;\r\n", "/**\r\n * @module ol/renderer/webgl/Layer\r\n */\r\nimport LayerProperty from '../../layer/Property.js';\r\nimport LayerRenderer from '../Layer.js';\r\nimport RenderEvent from '../../render/Event.js';\r\nimport RenderEventType from '../../render/EventType.js';\r\nimport WebGLHelper from '../../webgl/Helper.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\n\r\n/**\r\n * @typedef {Object} PostProcessesOptions\r\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\r\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\r\n * @property {string} [vertexShader] Vertex shader source\r\n * @property {string} [fragmentShader] Fragment shader source\r\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\r\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base WebGL renderer class.\r\n * Holds all logic related to data manipulation & some common rendering logic\r\n * @template {import(\"../../layer/Layer.js\").default} LayerType\r\n * @extends {LayerRenderer<LayerType>}\r\n */\r\nclass WebGLLayerRenderer extends LayerRenderer {\r\n  /**\r\n   * @param {LayerType} layer Layer.\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(layer, options) {\r\n    super(layer);\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\r\n     * set before dispatching rendering events.\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.inversePixelTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.pixelContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.postProcesses_ = options.postProcesses;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.uniforms_ = options.uniforms;\r\n\r\n    /**\r\n     * @type {WebGLHelper}\r\n     * @protected\r\n     */\r\n    this.helper;\r\n\r\n    layer.addChangeListener(LayerProperty.MAP, this.removeHelper.bind(this));\r\n\r\n    this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);\r\n    this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  dispatchPreComposeEvent(context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\r\n      const event = new RenderEvent(\r\n        RenderEventType.PRECOMPOSE,\r\n        undefined,\r\n        frameState,\r\n        context\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  dispatchPostComposeEvent(context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\r\n      const event = new RenderEvent(\r\n        RenderEventType.POSTCOMPOSE,\r\n        undefined,\r\n        frameState,\r\n        context\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset options (only handles uniforms).\r\n   * @param {Options} options Options.\r\n   */\r\n  reset(options) {\r\n    this.uniforms_ = options.uniforms;\r\n    if (this.helper) {\r\n      this.helper.setUniforms(this.uniforms_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  removeHelper() {\r\n    if (this.helper) {\r\n      this.helper.dispose();\r\n      delete this.helper;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    if (this.getLayer().getRenderSource()) {\r\n      let incrementGroup = true;\r\n      let groupNumber = -1;\r\n      let className;\r\n      for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\r\n        const layer = frameState.layerStatesArray[i].layer;\r\n        const renderer = layer.getRenderer();\r\n        if (!(renderer instanceof WebGLLayerRenderer)) {\r\n          incrementGroup = true;\r\n          continue;\r\n        }\r\n        const layerClassName = layer.getClassName();\r\n        if (incrementGroup || layerClassName !== className) {\r\n          groupNumber += 1;\r\n          incrementGroup = false;\r\n        }\r\n        className = layerClassName;\r\n        if (renderer === this) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      const canvasCacheKey =\r\n        'map/' + frameState.mapId + '/group/' + groupNumber;\r\n\r\n      if (\r\n        !this.helper ||\r\n        !this.helper.canvasCacheKeyMatches(canvasCacheKey) ||\r\n        this.helper.needsToBeRecreated()\r\n      ) {\r\n        this.removeHelper();\r\n\r\n        this.helper = new WebGLHelper({\r\n          postProcesses: this.postProcesses_,\r\n          uniforms: this.uniforms_,\r\n          canvasCacheKey: canvasCacheKey,\r\n        });\r\n\r\n        if (className) {\r\n          this.helper.getCanvas().className = className;\r\n        }\r\n\r\n        this.afterHelperCreated();\r\n      }\r\n    }\r\n\r\n    return this.prepareFrameInternal(frameState);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  afterHelperCreated() {}\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @protected\r\n   */\r\n  prepareFrameInternal(frameState) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.removeHelper();\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\r\n   * @param {WebGLRenderingContext} context The rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  dispatchRenderEvent_(type, context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(type)) {\r\n      composeTransform(\r\n        this.inversePixelTransform_,\r\n        0,\r\n        0,\r\n        frameState.pixelRatio,\r\n        -frameState.pixelRatio,\r\n        0,\r\n        0,\r\n        -frameState.size[1]\r\n      );\r\n\r\n      const event = new RenderEvent(\r\n        type,\r\n        this.inversePixelTransform_,\r\n        frameState,\r\n        context\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  preRender(context, frameState) {\r\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} context The rendering context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  postRender(context, frameState) {\r\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\r\n  }\r\n}\r\n\r\nexport default WebGLLayerRenderer;\r\n", "/**\r\n * A wrapper class to simplify rendering to a texture instead of the final canvas\r\n * @module ol/webgl/RenderTarget\r\n */\r\nimport {equals} from '../array.js';\r\n\r\n// for pixel color reading\r\nconst tmpArray4 = new Uint8Array(4);\r\n\r\n/**\r\n * @classdesc\r\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\r\n * simplifying initialization and binding for rendering.\r\n */\r\nclass WebGLRenderTarget {\r\n  /**\r\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\r\n   * @param {Array<number>} [size] Expected size of the render target texture; note: this can be changed later on.\r\n   */\r\n  constructor(helper, size) {\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Helper.js\").default}\r\n     */\r\n    this.helper_ = helper;\r\n    const gl = helper.getGL();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLTexture}\r\n     */\r\n    this.texture_ = gl.createTexture();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLFramebuffer}\r\n     */\r\n    this.framebuffer_ = gl.createFramebuffer();\r\n\r\n    /**\r\n     * @private\r\n     * @type {WebGLRenderbuffer}\r\n     */\r\n    this.depthbuffer_ = gl.createRenderbuffer();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.size_ = size || [1, 1];\r\n\r\n    /**\r\n     * @type {Uint8Array}\r\n     * @private\r\n     */\r\n    this.data_ = new Uint8Array(0);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.dataCacheDirty_ = true;\r\n\r\n    this.updateSize_();\r\n  }\r\n\r\n  /**\r\n   * Changes the size of the render target texture. Note: will do nothing if the size\r\n   * is already the same.\r\n   * @param {Array<number>} size Expected size of the render target texture\r\n   */\r\n  setSize(size) {\r\n    if (equals(size, this.size_)) {\r\n      return;\r\n    }\r\n    this.size_[0] = size[0];\r\n    this.size_[1] = size[1];\r\n    this.updateSize_();\r\n  }\r\n\r\n  /**\r\n   * Returns the size of the render target texture\r\n   * @return {Array<number>} Size of the render target texture\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\r\n   * render target into memory, which is an expensive operation.\r\n   * This content will be kept in cache but should be cleared after each new render.\r\n   */\r\n  clearCachedData() {\r\n    this.dataCacheDirty_ = true;\r\n  }\r\n\r\n  /**\r\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\r\n   * in the 0-255 range (unsigned byte).\r\n   * @return {Uint8Array} Integer array of color values\r\n   */\r\n  readAll() {\r\n    if (this.dataCacheDirty_) {\r\n      const size = this.size_;\r\n      const gl = this.helper_.getGL();\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\r\n      gl.readPixels(\r\n        0,\r\n        0,\r\n        size[0],\r\n        size[1],\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        this.data_\r\n      );\r\n      this.dataCacheDirty_ = false;\r\n    }\r\n    return this.data_;\r\n  }\r\n\r\n  /**\r\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\r\n   * in the 0-255 range (unsigned byte).\r\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\r\n   * @param {number} x Pixel coordinate\r\n   * @param {number} y Pixel coordinate\r\n   * @return {Uint8Array} Integer array with one color value (4 components)\r\n   */\r\n  readPixel(x, y) {\r\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\r\n      tmpArray4[0] = 0;\r\n      tmpArray4[1] = 0;\r\n      tmpArray4[2] = 0;\r\n      tmpArray4[3] = 0;\r\n      return tmpArray4;\r\n    }\r\n\r\n    this.readAll();\r\n    const index =\r\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\r\n    tmpArray4[0] = this.data_[index * 4];\r\n    tmpArray4[1] = this.data_[index * 4 + 1];\r\n    tmpArray4[2] = this.data_[index * 4 + 2];\r\n    tmpArray4[3] = this.data_[index * 4 + 3];\r\n    return tmpArray4;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLTexture} Texture to render to\r\n   */\r\n  getTexture() {\r\n    return this.texture_;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLFramebuffer} Frame buffer of the render target\r\n   */\r\n  getFramebuffer() {\r\n    return this.framebuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {WebGLRenderbuffer} Depth buffer of the render target\r\n   */\r\n  getDepthbuffer() {\r\n    return this.depthbuffer_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateSize_() {\r\n    const size = this.size_;\r\n    const gl = this.helper_.getGL();\r\n\r\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\r\n    gl.viewport(0, 0, size[0], size[1]);\r\n    gl.framebufferTexture2D(\r\n      gl.FRAMEBUFFER,\r\n      gl.COLOR_ATTACHMENT0,\r\n      gl.TEXTURE_2D,\r\n      this.texture_,\r\n      0\r\n    );\r\n\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.depthbuffer_);\r\n    gl.renderbufferStorage(\r\n      gl.RENDERBUFFER,\r\n      gl.DEPTH_COMPONENT16,\r\n      size[0],\r\n      size[1]\r\n    );\r\n    gl.framebufferRenderbuffer(\r\n      gl.FRAMEBUFFER,\r\n      gl.DEPTH_ATTACHMENT,\r\n      gl.RENDERBUFFER,\r\n      this.depthbuffer_\r\n    );\r\n\r\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\r\n  }\r\n}\r\n\r\nexport default WebGLRenderTarget;\r\n", "/**\r\n * @module ol/render/webgl/constants\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport const WebGLWorkerMessageType = {\r\n  GENERATE_POLYGON_BUFFERS: 'GENERATE_POLYGON_BUFFERS',\r\n  GENERATE_POINT_BUFFERS: 'GENERATE_POINT_BUFFERS',\r\n  GENERATE_LINE_STRING_BUFFERS: 'GENERATE_LINE_STRING_BUFFERS',\r\n};\r\n\r\n/**\r\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\r\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\r\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\r\n * the generated buffers in it.\r\n * Note that any addition properties present in the message *will* be sent back to the main thread.\r\n * @property {number} id Message id; will be used both in request and response as a means of identification\r\n * @property {WebGLWorkerMessageType} type Message type\r\n * @property {ArrayBuffer} renderInstructions Polygon render instructions raw binary buffer.\r\n * @property {number} [customAttributesSize] Amount of custom attributes count in the polygon render instructions.\r\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\r\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\r\n * @property {import(\"../../transform\").Transform} [renderInstructionsTransform] Transformation matrix used to project the instructions coordinates\r\n */\r\n", "/**\r\n * @module ol/render/webgl/utils\r\n */\r\nimport earcut from 'earcut';\r\nimport {apply as applyTransform} from '../../transform.js';\r\nimport {clamp} from '../../math.js';\r\n\r\nconst tmpArray_ = [];\r\n\r\n/**\r\n * An object holding positions both in an index and a vertex buffer.\r\n * @typedef {Object} BufferPositions\r\n * @property {number} vertexPosition Position in the vertex buffer\r\n * @property {number} indexPosition Position in the index buffer\r\n */\r\nconst bufferPositions_ = {vertexPosition: 0, indexPosition: 0};\r\n\r\nfunction writePointVertex(buffer, pos, x, y, index) {\r\n  buffer[pos + 0] = x;\r\n  buffer[pos + 1] = y;\r\n  buffer[pos + 2] = index;\r\n}\r\n\r\n/**\r\n * Pushes a quad (two triangles) based on a point geometry\r\n * @param {Float32Array} instructions Array of render instructions for points.\r\n * @param {number} elementIndex Index from which render instructions will be read.\r\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\r\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\r\n * @param {number} customAttributesSize Amount of custom attributes for each element.\r\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\r\n * @return {BufferPositions} New buffer positions where to write next\r\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\r\n * @property {number} indexPosition New position in the index buffer where future writes should start.\r\n * @private\r\n */\r\nexport function writePointFeatureToBuffers(\r\n  instructions,\r\n  elementIndex,\r\n  vertexBuffer,\r\n  indexBuffer,\r\n  customAttributesSize,\r\n  bufferPositions\r\n) {\r\n  // This is for x, y and index\r\n  const baseVertexAttrsCount = 3;\r\n  const baseInstructionsCount = 2;\r\n  const stride = baseVertexAttrsCount + customAttributesSize;\r\n\r\n  const x = instructions[elementIndex + 0];\r\n  const y = instructions[elementIndex + 1];\r\n\r\n  // read custom numerical attributes on the feature\r\n  const customAttrs = tmpArray_;\r\n  customAttrs.length = customAttributesSize;\r\n  for (let i = 0; i < customAttrs.length; i++) {\r\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\r\n  }\r\n\r\n  let vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\r\n  let iPos = bufferPositions ? bufferPositions.indexPosition : 0;\r\n  const baseIndex = vPos / stride;\r\n\r\n  // push vertices for each of the four quad corners (first standard then custom attributes)\r\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\r\n  customAttrs.length &&\r\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\r\n  vPos += stride;\r\n\r\n  indexBuffer[iPos++] = baseIndex;\r\n  indexBuffer[iPos++] = baseIndex + 1;\r\n  indexBuffer[iPos++] = baseIndex + 3;\r\n  indexBuffer[iPos++] = baseIndex + 1;\r\n  indexBuffer[iPos++] = baseIndex + 2;\r\n  indexBuffer[iPos++] = baseIndex + 3;\r\n\r\n  bufferPositions_.vertexPosition = vPos;\r\n  bufferPositions_.indexPosition = iPos;\r\n\r\n  return bufferPositions_;\r\n}\r\n\r\n/**\r\n * Pushes a single quad to form a line segment; also includes a computation for the join angles with previous and next\r\n * segment, in order to be able to offset the vertices correctly in the shader\r\n * @param {Float32Array} instructions Array of render instructions for lines.\r\n * @param {number} segmentStartIndex Index of the segment start point from which render instructions will be read.\r\n * @param {number} segmentEndIndex Index of the segment end point from which render instructions will be read.\r\n * @param {number|null} beforeSegmentIndex Index of the point right before the segment (null if none, e.g this is a line start)\r\n * @param {number|null} afterSegmentIndex Index of the point right after the segment (null if none, e.g this is a line end)\r\n * @param {Array<number>} vertexArray Array containing vertices.\r\n * @param {Array<number>} indexArray Array containing indices.\r\n * @param {Array<number>} customAttributes Array of custom attributes value\r\n * @param {import('../../transform.js').Transform} toWorldTransform Transform matrix used to obtain world coordinates from instructions\r\n * @param {number} currentLength Cumulated length of segments processed so far\r\n * @return {number} Cumulated length with the newly processed segment (in world units)\r\n * @private\r\n */\r\nexport function writeLineSegmentToBuffers(\r\n  instructions,\r\n  segmentStartIndex,\r\n  segmentEndIndex,\r\n  beforeSegmentIndex,\r\n  afterSegmentIndex,\r\n  vertexArray,\r\n  indexArray,\r\n  customAttributes,\r\n  toWorldTransform,\r\n  currentLength\r\n) {\r\n  // compute the stride to determine how many vertices were already pushed\r\n  const baseVertexAttrsCount = 8; // base attributes: x0, y0, x1, y1, angle0, angle1, distance, params\r\n  const stride = baseVertexAttrsCount + customAttributes.length;\r\n  const baseIndex = vertexArray.length / stride;\r\n\r\n  // The segment is composed of two positions called P0[x0, y0] and P1[x1, y1]\r\n  // Depending on whether there are points before and after the segment, its final shape\r\n  // will be different\r\n  const p0 = [\r\n    instructions[segmentStartIndex + 0],\r\n    instructions[segmentStartIndex + 1],\r\n  ];\r\n  const p1 = [instructions[segmentEndIndex], instructions[segmentEndIndex + 1]];\r\n\r\n  // to compute join angles we need to reproject coordinates back in world units\r\n  const p0world = applyTransform(toWorldTransform, [...p0]);\r\n  const p1world = applyTransform(toWorldTransform, [...p1]);\r\n\r\n  // compute the angle between p0pA and p0pB\r\n  // returns a value in [0, 2PI]\r\n  function angleBetween(p0, pA, pB) {\r\n    const lenA = Math.sqrt(\r\n      (pA[0] - p0[0]) * (pA[0] - p0[0]) + (pA[1] - p0[1]) * (pA[1] - p0[1])\r\n    );\r\n    const tangentA = [(pA[0] - p0[0]) / lenA, (pA[1] - p0[1]) / lenA];\r\n    const orthoA = [-tangentA[1], tangentA[0]];\r\n    const lenB = Math.sqrt(\r\n      (pB[0] - p0[0]) * (pB[0] - p0[0]) + (pB[1] - p0[1]) * (pB[1] - p0[1])\r\n    );\r\n    const tangentB = [(pB[0] - p0[0]) / lenB, (pB[1] - p0[1]) / lenB];\r\n\r\n    // this angle can be clockwise or anticlockwise; hence the computation afterwards\r\n    const angle =\r\n      lenA === 0 || lenB === 0\r\n        ? 0\r\n        : Math.acos(\r\n            clamp(tangentB[0] * tangentA[0] + tangentB[1] * tangentA[1], -1, 1)\r\n          );\r\n    const isClockwise = tangentB[0] * orthoA[0] + tangentB[1] * orthoA[1] > 0;\r\n    return !isClockwise ? Math.PI * 2 - angle : angle;\r\n  }\r\n\r\n  // a negative angle indicates a line cap\r\n  let angle0 = -1;\r\n  let angle1 = -1;\r\n\r\n  const joinBefore = beforeSegmentIndex !== null;\r\n  const joinAfter = afterSegmentIndex !== null;\r\n\r\n  // add vertices and adapt offsets for P0 in case of join\r\n  if (joinBefore) {\r\n    // B for before\r\n    const pB = [\r\n      instructions[beforeSegmentIndex],\r\n      instructions[beforeSegmentIndex + 1],\r\n    ];\r\n    const pBworld = applyTransform(toWorldTransform, [...pB]);\r\n    angle0 = angleBetween(p0world, p1world, pBworld);\r\n  }\r\n  // adapt offsets for P1 in case of join\r\n  if (joinAfter) {\r\n    // A for after\r\n    const pA = [\r\n      instructions[afterSegmentIndex],\r\n      instructions[afterSegmentIndex + 1],\r\n    ];\r\n    const pAworld = applyTransform(toWorldTransform, [...pA]);\r\n    angle1 = angleBetween(p1world, p0world, pAworld);\r\n  }\r\n\r\n  // add main segment triangles\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    p1[0],\r\n    p1[1],\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    0\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    p1[0],\r\n    p1[1],\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    1\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    p1[0],\r\n    p1[1],\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    2\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  vertexArray.push(\r\n    p0[0],\r\n    p0[1],\r\n    p1[0],\r\n    p1[1],\r\n    angle0,\r\n    angle1,\r\n    currentLength,\r\n    3\r\n  );\r\n  vertexArray.push(...customAttributes);\r\n\r\n  indexArray.push(\r\n    baseIndex,\r\n    baseIndex + 1,\r\n    baseIndex + 2,\r\n    baseIndex + 1,\r\n    baseIndex + 3,\r\n    baseIndex + 2\r\n  );\r\n\r\n  return (\r\n    currentLength +\r\n    Math.sqrt(\r\n      (p1world[0] - p0world[0]) * (p1world[0] - p0world[0]) +\r\n        (p1world[1] - p0world[1]) * (p1world[1] - p0world[1])\r\n    )\r\n  );\r\n}\r\n\r\n/**\r\n * Pushes several triangles to form a polygon, including holes\r\n * @param {Float32Array} instructions Array of render instructions for lines.\r\n * @param {number} polygonStartIndex Index of the polygon start point from which render instructions will be read.\r\n * @param {Array<number>} vertexArray Array containing vertices.\r\n * @param {Array<number>} indexArray Array containing indices.\r\n * @param {number} customAttributesSize Amount of custom attributes for each element.\r\n * @return {number} Next polygon instructions index\r\n * @private\r\n */\r\nexport function writePolygonTrianglesToBuffers(\r\n  instructions,\r\n  polygonStartIndex,\r\n  vertexArray,\r\n  indexArray,\r\n  customAttributesSize\r\n) {\r\n  const instructionsPerVertex = 2; // x, y\r\n  const attributesPerVertex = 2 + customAttributesSize;\r\n  let instructionsIndex = polygonStartIndex;\r\n  const customAttributes = instructions.slice(\r\n    instructionsIndex,\r\n    instructionsIndex + customAttributesSize\r\n  );\r\n  instructionsIndex += customAttributesSize;\r\n  const ringsCount = instructions[instructionsIndex++];\r\n  let verticesCount = 0;\r\n  const holes = new Array(ringsCount - 1);\r\n  for (let i = 0; i < ringsCount; i++) {\r\n    verticesCount += instructions[instructionsIndex++];\r\n    if (i < ringsCount - 1) {\r\n      holes[i] = verticesCount;\r\n    }\r\n  }\r\n  const flatCoords = instructions.slice(\r\n    instructionsIndex,\r\n    instructionsIndex + verticesCount * instructionsPerVertex\r\n  );\r\n\r\n  // pushing to vertices and indices!! this is where the magic happens\r\n  const result = earcut(flatCoords, holes, instructionsPerVertex);\r\n  for (let i = 0; i < result.length; i++) {\r\n    indexArray.push(result[i] + vertexArray.length / attributesPerVertex);\r\n  }\r\n  for (let i = 0; i < flatCoords.length; i += 2) {\r\n    vertexArray.push(flatCoords[i], flatCoords[i + 1], ...customAttributes);\r\n  }\r\n\r\n  return instructionsIndex + verticesCount * instructionsPerVertex;\r\n}\r\n\r\n/**\r\n * Returns a texture of 1x1 pixel, white\r\n * @private\r\n * @return {ImageData} Image data.\r\n */\r\nexport function getBlankImageData() {\r\n  const canvas = document.createElement('canvas');\r\n  const image = canvas.getContext('2d').createImageData(1, 1);\r\n  image.data[0] = 255;\r\n  image.data[1] = 255;\r\n  image.data[2] = 255;\r\n  image.data[3] = 255;\r\n  return image;\r\n}\r\n\r\n/**\r\n * Generates a color array based on a numerical id\r\n * Note: the range for each component is 0 to 1 with 256 steps\r\n * @param {number} id Id\r\n * @param {Array<number>} [array] Reusable array\r\n * @return {Array<number>} Color array containing the encoded id\r\n */\r\nexport function colorEncodeId(id, array) {\r\n  array = array || [];\r\n  const radix = 256;\r\n  const divide = radix - 1;\r\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\r\n  array[1] = (Math.floor(id / radix / radix) % radix) / divide;\r\n  array[2] = (Math.floor(id / radix) % radix) / divide;\r\n  array[3] = (id % radix) / divide;\r\n  return array;\r\n}\r\n\r\n/**\r\n * Reads an id from a color-encoded array\r\n * Note: the expected range for each component is 0 to 1 with 256 steps.\r\n * @param {Array<number>} color Color array containing the encoded id\r\n * @return {number} Decoded id\r\n */\r\nexport function colorDecodeId(color) {\r\n  let id = 0;\r\n  const radix = 256;\r\n  const mult = radix - 1;\r\n  id += Math.round(color[0] * radix * radix * radix * mult);\r\n  id += Math.round(color[1] * radix * radix * mult);\r\n  id += Math.round(color[2] * radix * mult);\r\n  id += Math.round(color[3] * mult);\r\n  return id;\r\n}\r\n", "\r\n        export function create() {\r\n          const source = \"const e=\\\"GENERATE_POLYGON_BUFFERS\\\",t=\\\"GENERATE_POINT_BUFFERS\\\",n=\\\"GENERATE_LINE_STRING_BUFFERS\\\";function r(e,t){const n=t[0],r=t[1];return t[0]=e[0]*n+e[2]*r+e[4],t[1]=e[1]*n+e[3]*r+e[5],t}function x(e,t){const n=(r=t)[0]*r[3]-r[1]*r[2];var r;!function(e,t){if(!e)throw new Error(t)}(0!==n,\\\"Transformation matrix cannot be inverted\\\");const x=t[0],i=t[1],u=t[2],o=t[3],f=t[4],s=t[5];return e[0]=o/n,e[1]=-i/n,e[2]=-u/n,e[3]=x/n,e[4]=(u*s-o*f)/n,e[5]=-(x*s-i*f)/n,e}function i(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}new Array(6);var u={exports:{}};function o(e,t,n){n=n||2;var r,x,i,u,o,s,l,v=t&&t.length,c=v?t[0]*n:e.length,h=f(e,0,c,n,!0),g=[];if(!h||h.next===h.prev)return g;if(v&&(h=function(e,t,n,r){var x,i,u,o=[];for(x=0,i=t.length;x<i;x++)(u=f(e,t[x]*r,x<i-1?t[x+1]*r:e.length,r,!1))===u.next&&(u.steiner=!0),o.push(d(u));for(o.sort(p),x=0;x<o.length;x++)n=y(o[x],n);return n}(e,t,h,n)),e.length>80*n){r=i=e[0],x=u=e[1];for(var b=n;b<c;b+=n)(o=e[b])<r&&(r=o),(s=e[b+1])<x&&(x=s),o>i&&(i=o),s>u&&(u=s);l=0!==(l=Math.max(i-r,u-x))?32767/l:0}return a(h,g,n,r,x,l,0),g}function f(e,t,n,r,x){var i,u;if(x===O(e,t,n,r)>0)for(i=t;i<n;i+=r)u=P(i,e[i],e[i+1],u);else for(i=n-r;i>=t;i-=r)u=P(i,e[i],e[i+1],u);return u&&m(u,u.next)&&(B(u),u=u.next),u}function s(e,t){if(!e)return e;t||(t=e);var n,r=e;do{if(n=!1,r.steiner||!m(r,r.next)&&0!==M(r.prev,r,r.next))r=r.next;else{if(B(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function a(e,t,n,r,x,i,u){if(e){!u&&i&&function(e,t,n,r){var x=e;do{0===x.z&&(x.z=b(x.x,x.y,t,n,r)),x.prevZ=x.prev,x.nextZ=x.next,x=x.next}while(x!==e);x.prevZ.nextZ=null,x.prevZ=null,function(e){var t,n,r,x,i,u,o,f,s=1;do{for(n=e,e=null,i=null,u=0;n;){for(u++,r=n,o=0,t=0;t<s&&(o++,r=r.nextZ);t++);for(f=s;o>0||f>0&&r;)0!==o&&(0===f||!r||n.z<=r.z)?(x=n,n=n.nextZ,o--):(x=r,r=r.nextZ,f--),i?i.nextZ=x:e=x,x.prevZ=i,i=x;n=r}i.nextZ=null,s*=2}while(u>1)}(x)}(e,r,x,i);for(var o,f,p=e;e.prev!==e.next;)if(o=e.prev,f=e.next,i?v(e,r,x,i):l(e))t.push(o.i/n|0),t.push(e.i/n|0),t.push(f.i/n|0),B(e),e=f.next,p=f.next;else if((e=f)===p){u?1===u?a(e=c(s(e),t,n),t,n,r,x,i,2):2===u&&h(e,t,n,r,x,i):a(s(e),t,n,r,x,i,1);break}}}function l(e){var t=e.prev,n=e,r=e.next;if(M(t,n,r)>=0)return!1;for(var x=t.x,i=n.x,u=r.x,o=t.y,f=n.y,s=r.y,a=x<i?x<u?x:u:i<u?i:u,l=o<f?o<s?o:s:f<s?f:s,v=x>i?x>u?x:u:i>u?i:u,c=o>f?o>s?o:s:f>s?f:s,h=r.next;h!==t;){if(h.x>=a&&h.x<=v&&h.y>=l&&h.y<=c&&Z(x,o,i,f,u,s,h.x,h.y)&&M(h.prev,h,h.next)>=0)return!1;h=h.next}return!0}function v(e,t,n,r){var x=e.prev,i=e,u=e.next;if(M(x,i,u)>=0)return!1;for(var o=x.x,f=i.x,s=u.x,a=x.y,l=i.y,v=u.y,c=o<f?o<s?o:s:f<s?f:s,h=a<l?a<v?a:v:l<v?l:v,p=o>f?o>s?o:s:f>s?f:s,y=a>l?a>v?a:v:l>v?l:v,g=b(c,h,t,n,r),d=b(p,y,t,n,r),w=e.prevZ,m=e.nextZ;w&&w.z>=g&&m&&m.z<=d;){if(w.x>=c&&w.x<=p&&w.y>=h&&w.y<=y&&w!==x&&w!==u&&Z(o,a,f,l,s,v,w.x,w.y)&&M(w.prev,w,w.next)>=0)return!1;if(w=w.prevZ,m.x>=c&&m.x<=p&&m.y>=h&&m.y<=y&&m!==x&&m!==u&&Z(o,a,f,l,s,v,m.x,m.y)&&M(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;w&&w.z>=g;){if(w.x>=c&&w.x<=p&&w.y>=h&&w.y<=y&&w!==x&&w!==u&&Z(o,a,f,l,s,v,w.x,w.y)&&M(w.prev,w,w.next)>=0)return!1;w=w.prevZ}for(;m&&m.z<=d;){if(m.x>=c&&m.x<=p&&m.y>=h&&m.y<=y&&m!==x&&m!==u&&Z(o,a,f,l,s,v,m.x,m.y)&&M(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function c(e,t,n){var r=e;do{var x=r.prev,i=r.next.next;!m(x,i)&&A(x,r,r.next,i)&&F(x,i)&&F(i,x)&&(t.push(x.i/n|0),t.push(r.i/n|0),t.push(i.i/n|0),B(r),B(r.next),r=e=i),r=r.next}while(r!==e);return s(r)}function h(e,t,n,r,x,i){var u=e;do{for(var o=u.next.next;o!==u.prev;){if(u.i!==o.i&&w(u,o)){var f=I(u,o);return u=s(u,u.next),f=s(f,f.next),a(u,t,n,r,x,i,0),void a(f,t,n,r,x,i,0)}o=o.next}u=u.next}while(u!==e)}function p(e,t){return e.x-t.x}function y(e,t){var n=function(e,t){var n,r=t,x=e.x,i=e.y,u=-1/0;do{if(i<=r.y&&i>=r.next.y&&r.next.y!==r.y){var o=r.x+(i-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(o<=x&&o>u&&(u=o,n=r.x<r.next.x?r:r.next,o===x))return n}r=r.next}while(r!==t);if(!n)return null;var f,s=n,a=n.x,l=n.y,v=1/0;r=n;do{x>=r.x&&r.x>=a&&x!==r.x&&Z(i<l?x:u,i,a,l,i<l?u:x,i,r.x,r.y)&&(f=Math.abs(i-r.y)/(x-r.x),F(r,e)&&(f<v||f===v&&(r.x>n.x||r.x===n.x&&g(n,r)))&&(n=r,v=f)),r=r.next}while(r!==s);return n}(e,t);if(!n)return t;var r=I(n,e);return s(r,r.next),s(n,n.next)}function g(e,t){return M(e.prev,e,t.prev)<0&&M(t.next,e,e.next)<0}function b(e,t,n,r,x){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-n)*x|0)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-r)*x|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function d(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function Z(e,t,n,r,x,i,u,o){return(x-u)*(t-o)>=(e-u)*(i-o)&&(e-u)*(r-o)>=(n-u)*(t-o)&&(n-u)*(i-o)>=(x-u)*(r-o)}function w(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&A(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&(F(e,t)&&F(t,e)&&function(e,t){var n=e,r=!1,x=(e.x+t.x)/2,i=(e.y+t.y)/2;do{n.y>i!=n.next.y>i&&n.next.y!==n.y&&x<(n.next.x-n.x)*(i-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==e);return r}(e,t)&&(M(e.prev,e,t.prev)||M(e,t.prev,t))||m(e,t)&&M(e.prev,e,e.next)>0&&M(t.prev,t,t.next)>0)}function M(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function m(e,t){return e.x===t.x&&e.y===t.y}function A(e,t,n,r){var x=z(M(e,t,n)),i=z(M(e,t,r)),u=z(M(n,r,e)),o=z(M(n,r,t));return x!==i&&u!==o||(!(0!==x||!E(e,n,t))||(!(0!==i||!E(e,r,t))||(!(0!==u||!E(n,e,r))||!(0!==o||!E(n,t,r)))))}function E(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function z(e){return e>0?1:e<0?-1:0}function F(e,t){return M(e.prev,e,e.next)<0?M(e,t,e.next)>=0&&M(e,e.prev,t)>=0:M(e,t,e.prev)<0||M(e,e.next,t)<0}function I(e,t){var n=new _(e.i,e.x,e.y),r=new _(t.i,t.x,t.y),x=e.next,i=t.prev;return e.next=t,t.prev=e,n.next=x,x.prev=n,r.next=n,n.prev=r,i.next=r,r.prev=i,r}function P(e,t,n,r){var x=new _(e,t,n);return r?(x.next=r.next,x.prev=r,r.next.prev=x,r.next=x):(x.prev=x,x.next=x),x}function B(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function _(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function O(e,t,n,r){for(var x=0,i=t,u=n-r;i<n;i+=r)x+=(e[u]-e[i])*(e[i+1]+e[u+1]),u=i;return x}u.exports=o,u.exports.default=o,o.deviation=function(e,t,n,r){var x=t&&t.length,i=x?t[0]*n:e.length,u=Math.abs(O(e,0,i,n));if(x)for(var o=0,f=t.length;o<f;o++){var s=t[o]*n,a=o<f-1?t[o+1]*n:e.length;u-=Math.abs(O(e,s,a,n))}var l=0;for(o=0;o<r.length;o+=3){var v=r[o]*n,c=r[o+1]*n,h=r[o+2]*n;l+=Math.abs((e[v]-e[h])*(e[c+1]-e[v+1])-(e[v]-e[c])*(e[h+1]-e[v+1]))}return 0===u&&0===l?0:Math.abs((l-u)/u)},o.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},r=0,x=0;x<e.length;x++){for(var i=0;i<e[x].length;i++)for(var u=0;u<t;u++)n.vertices.push(e[x][i][u]);x>0&&(r+=e[x-1].length,n.holes.push(r))}return n};var N=i(u.exports);const R=[],S={vertexPosition:0,indexPosition:0};function T(e,t,n,r,x){e[t+0]=n,e[t+1]=r,e[t+2]=x}function U(e,t,n,r,x,i){const u=3+x,o=e[t+0],f=e[t+1],s=R;s.length=x;for(let n=0;n<s.length;n++)s[n]=e[t+2+n];let a=i?i.vertexPosition:0,l=i?i.indexPosition:0;const v=a/u;return T(n,a,o,f,0),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,1),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,2),s.length&&n.set(s,a+3),a+=u,T(n,a,o,f,3),s.length&&n.set(s,a+3),a+=u,r[l++]=v,r[l++]=v+1,r[l++]=v+3,r[l++]=v+1,r[l++]=v+2,r[l++]=v+3,S.vertexPosition=a,S.indexPosition=l,S}function k(e,t,n,x,i,u,o,f,s,a){const l=8+f.length,v=u.length/l,c=[e[t+0],e[t+1]],h=[e[n],e[n+1]],p=r(s,[...c]),y=r(s,[...h]);function g(e,t,n){const r=Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])),x=[(t[0]-e[0])/r,(t[1]-e[1])/r],i=[-x[1],x[0]],u=Math.sqrt((n[0]-e[0])*(n[0]-e[0])+(n[1]-e[1])*(n[1]-e[1])),o=[(n[0]-e[0])/u,(n[1]-e[1])/u],f=0===r||0===u?0:Math.acos((s=o[0]*x[0]+o[1]*x[1],a=-1,l=1,Math.min(Math.max(s,a),l)));var s,a,l;return o[0]*i[0]+o[1]*i[1]>0?f:2*Math.PI-f}let b=-1,d=-1;const Z=null!==i;if(null!==x){b=g(p,y,r(s,[...[e[x],e[x+1]]]))}if(Z){d=g(y,p,r(s,[...[e[i],e[i+1]]]))}return u.push(c[0],c[1],h[0],h[1],b,d,a,0),u.push(...f),u.push(c[0],c[1],h[0],h[1],b,d,a,1),u.push(...f),u.push(c[0],c[1],h[0],h[1],b,d,a,2),u.push(...f),u.push(c[0],c[1],h[0],h[1],b,d,a,3),u.push(...f),o.push(v,v+1,v+2,v+1,v+3,v+2),a+Math.sqrt((y[0]-p[0])*(y[0]-p[0])+(y[1]-p[1])*(y[1]-p[1]))}function G(e,t,n,r,x){const i=2+x;let u=t;const o=e.slice(u,u+x);u+=x;const f=e[u++];let s=0;const a=new Array(f-1);for(let t=0;t<f;t++)s+=e[u++],t<f-1&&(a[t]=s);const l=e.slice(u,u+2*s),v=N(l,a,2);for(let e=0;e<v.length;e++)r.push(v[e]+n.length/i);for(let e=0;e<l.length;e+=2)n.push(l[e],l[e+1],...o);return u+2*s}const j=self;j.onmessage=r=>{const i=r.data;switch(i.type){case t:{const e=3,t=2,n=i.customAttributesSize,r=t+n,x=new Float32Array(i.renderInstructions),u=x.length/r,o=4*u*(n+e),f=new Uint32Array(6*u),s=new Float32Array(o);let a;for(let e=0;e<x.length;e+=r)a=U(x,e,s,f,n,a);const l=Object.assign({vertexBuffer:s.buffer,indexBuffer:f.buffer,renderInstructions:x.buffer},i);j.postMessage(l,[s.buffer,f.buffer,x.buffer]);break}case n:{const e=[],t=[],n=i.customAttributesSize,r=2,u=new Float32Array(i.renderInstructions);let o=0;const f=[1,0,0,1,0,0];let s,a;for(x(f,i.renderInstructionsTransform);o<u.length;){a=Array.from(u.slice(o,o+n)),o+=n,s=u[o++];const x=o,i=o+(s-1)*r,l=u[x]===u[i]&&u[x+1]===u[i+1];let v=0;for(let n=0;n<s-1;n++){let c=null;n>0?c=o+(n-1)*r:l&&(c=i-r);let h=null;n<s-2?h=o+(n+2)*r:l&&(h=x+r),v=k(u,o+n*r,o+(n+1)*r,c,h,e,t,a,f,v)}o+=s*r}const l=Uint32Array.from(t),v=Float32Array.from(e),c=Object.assign({vertexBuffer:v.buffer,indexBuffer:l.buffer,renderInstructions:u.buffer},i);j.postMessage(c,[v.buffer,l.buffer,u.buffer]);break}case e:{const e=[],t=[],n=i.customAttributesSize,r=new Float32Array(i.renderInstructions);let x=0;for(;x<r.length;)x=G(r,x,e,t,n);const u=Uint32Array.from(t),o=Float32Array.from(e),f=Object.assign({vertexBuffer:o.buffer,indexBuffer:u.buffer,renderInstructions:r.buffer},i);j.postMessage(f,[o.buffer,u.buffer,r.buffer]);break}}};\";\r\n          return new Worker(typeof Blob === 'undefined'\r\n            ? 'data:application/javascript;base64,' + Buffer.from(source, 'binary').toString('base64')\r\n            : URL.createObjectURL(new Blob([source], {type: 'application/javascript'})));\r\n        }\r\n      \r\n", "/**\r\n * @module ol/renderer/webgl/PointsLayer\r\n */\r\nimport BaseVector from '../../layer/BaseVector.js';\r\nimport VectorEventType from '../../source/VectorEventType.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\r\nimport WebGLLayerRenderer from './Layer.js';\r\nimport WebGLRenderTarget from '../../webgl/RenderTarget.js';\r\nimport {ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER} from '../../webgl.js';\r\nimport {AttributeType, DefaultUniform} from '../../webgl/Helper.js';\r\nimport {WebGLWorkerMessageType} from '../../render/webgl/constants.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n  makeInverse as makeInverseTransform,\r\n  multiply as multiplyTransform,\r\n  translate as translateTransform,\r\n} from '../../transform.js';\r\nimport {assert} from '../../asserts.js';\r\nimport {buffer, createEmpty, equals, getWidth} from '../../extent.js';\r\nimport {colorDecodeId, colorEncodeId} from '../../render/webgl/utils.js';\r\nimport {create as createWebGLWorker} from '../../worker/webgl.js';\r\nimport {getUid} from '../../util.js';\r\nimport {listen, unlistenByKey} from '../../events.js';\r\n\r\n/**\r\n * @typedef {Object} CustomAttribute A description of a custom attribute to be passed on to the GPU, with a value different\r\n * for each feature.\r\n * @property {string} name Attribute name.\r\n * @property {function(import(\"../../Feature\").default, Object<string, *>):number} callback This callback computes the numerical value of the\r\n * attribute for a given feature (properties are available as 2nd arg for quicker access).\r\n */\r\n\r\n/**\r\n * @typedef {Object} FeatureCacheItem Object that holds a reference to a feature, its geometry and properties. Used to optimize\r\n * rebuildBuffers by accessing these objects quicker.\r\n * @property {import(\"../../Feature\").default} feature Feature\r\n * @property {Object<string, *>} properties Feature properties\r\n * @property {import(\"../../geom\").Geometry} geometry Feature geometry\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the canvas element.\r\n * @property {Array<CustomAttribute>} [attributes] These attributes will be read from the features in the source and then\r\n * passed to the GPU. The `name` property of each attribute will serve as its identifier:\r\n *  * In the vertex shader as an `attribute` by prefixing it with `a_`\r\n *  * In the fragment shader as a `varying` by prefixing it with `v_`\r\n * Please note that these can only be numerical values.\r\n * @property {string} vertexShader Vertex shader source, mandatory.\r\n * @property {string} fragmentShader Fragment shader source, mandatory.\r\n * @property {boolean} [hitDetectionEnabled] Whether shader is hit detection aware.\r\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\r\n * Please note that `u_texture` is reserved for the main texture slot and `u_opacity` is reserved for the layer opacity.\r\n * @property {Array<import(\"./Layer\").PostProcessesOptions>} [postProcesses] Post-processes definitions\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * WebGL vector renderer optimized for points.\r\n * All features will be rendered as quads (two triangles forming a square). New data will be flushed to the GPU\r\n * every time the vector source changes.\r\n *\r\n * You need to provide vertex and fragment shaders for rendering. This can be done using\r\n * {@link module:ol/webgl/ShaderBuilder~ShaderBuilder} utilities. These shaders shall expect a `a_position` attribute\r\n * containing the screen-space projected center of the quad, as well as a `a_index` attribute\r\n * whose value (0, 1, 2 or 3) indicates which quad vertex is currently getting processed (see structure below).\r\n *\r\n * To include variable attributes in the shaders, you need to declare them using the `attributes` property of\r\n * the options object like so:\r\n * ```js\r\n * new WebGLPointsLayerRenderer(layer, {\r\n *   attributes: [\r\n *     {\r\n *       name: 'size',\r\n *       callback: function(feature) {\r\n *         // compute something with the feature\r\n *       }\r\n *     },\r\n *     {\r\n *       name: 'weight',\r\n *       callback: function(feature) {\r\n *         // compute something with the feature\r\n *       }\r\n *     },\r\n *   ],\r\n *   vertexShader:\r\n *     // shader using attribute a_weight and a_size\r\n *   fragmentShader:\r\n *     // shader using varying v_weight and v_size\r\n * ```\r\n *\r\n * To enable hit detection, you must as well provide dedicated shaders using the `hitVertexShader`\r\n * and `hitFragmentShader` properties. These shall expect the `a_hitColor` attribute to contain\r\n * the final color that will have to be output for hit detection to work.\r\n *\r\n * The following uniform is used for the main texture: `u_texture`.\r\n * The following uniform is used for the layer opacity: `u_opacity`.\r\n *\r\n * Please note that the main shader output should have premultiplied alpha, otherwise visual anomalies may occur.\r\n *\r\n * Points are rendered as quads with the following structure:\r\n *\r\n * ```\r\n *   (u0, v1)      (u1, v1)\r\n *  [3]----------[2]\r\n *   |`           |\r\n *   |  `         |\r\n *   |    `       |\r\n *   |      `     |\r\n *   |        `   |\r\n *   |          ` |\r\n *  [0]----------[1]\r\n *   (u0, v0)      (u1, v0)\r\n *  ```\r\n *\r\n * This uses {@link module:ol/webgl/Helper~WebGLHelper} internally.\r\n *\r\n * @api\r\n */\r\nclass WebGLPointsLayerRenderer extends WebGLLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/Layer.js\").default} layer Layer.\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(layer, options) {\r\n    const uniforms = options.uniforms || {};\r\n    const projectionMatrixTransform = createTransform();\r\n    uniforms[DefaultUniform.PROJECTION_MATRIX] = projectionMatrixTransform;\r\n\r\n    super(layer, {\r\n      uniforms: uniforms,\r\n      postProcesses: options.postProcesses,\r\n    });\r\n\r\n    this.sourceRevision_ = -1;\r\n\r\n    this.verticesBuffer_ = new WebGLArrayBuffer(ARRAY_BUFFER, DYNAMIC_DRAW);\r\n    this.indicesBuffer_ = new WebGLArrayBuffer(\r\n      ELEMENT_ARRAY_BUFFER,\r\n      DYNAMIC_DRAW\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.vertexShader_ = options.vertexShader;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.fragmentShader_ = options.fragmentShader;\r\n\r\n    /**\r\n     * @type {WebGLProgram}\r\n     * @private\r\n     */\r\n    this.program_;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hitDetectionEnabled_ = options.hitDetectionEnabled ?? true;\r\n\r\n    const customAttributes = options.attributes\r\n      ? options.attributes.map(function (attribute) {\r\n          return {\r\n            name: 'a_' + attribute.name,\r\n            size: 1,\r\n            type: AttributeType.FLOAT,\r\n          };\r\n        })\r\n      : [];\r\n\r\n    /**\r\n     * A list of attributes used by the renderer. By default only the position and\r\n     * index of the vertex (0 to 3) are required.\r\n     * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\r\n     */\r\n    this.attributes = [\r\n      {\r\n        name: 'a_position',\r\n        size: 2,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n      {\r\n        name: 'a_index',\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      },\r\n    ];\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      this.attributes.push({\r\n        name: 'a_hitColor',\r\n        size: 4,\r\n        type: AttributeType.FLOAT,\r\n      });\r\n      this.attributes.push({\r\n        name: 'a_featureUid',\r\n        size: 1,\r\n        type: AttributeType.FLOAT,\r\n      });\r\n    }\r\n    this.attributes.push(...customAttributes);\r\n\r\n    this.customAttributes = options.attributes ? options.attributes : [];\r\n\r\n    this.previousExtent_ = createEmpty();\r\n\r\n    /**\r\n     * This transform is updated on every frame and is the composition of:\r\n     * - invert of the world->screen transform that was used when rebuilding buffers (see `this.renderTransform_`)\r\n     * - current world->screen transform\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.currentTransform_ = projectionMatrixTransform;\r\n\r\n    /**\r\n     * This transform is updated when buffers are rebuilt and converts world space coordinates to screen space\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.renderTransform_ = createTransform();\r\n\r\n    /**\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.invertRenderTransform_ = createTransform();\r\n\r\n    /**\r\n     * @type {Float32Array}\r\n     * @private\r\n     */\r\n    this.renderInstructions_ = new Float32Array(0);\r\n\r\n    /**\r\n     * @type {WebGLRenderTarget}\r\n     * @private\r\n     */\r\n    this.hitRenderTarget_;\r\n\r\n    /**\r\n     * Keep track of latest message sent to worker\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.lastSentId = 0;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.worker_ = createWebGLWorker();\r\n\r\n    this.worker_.addEventListener(\r\n      'message',\r\n      /**\r\n       * @param {*} event Event.\r\n       */\r\n      (event) => {\r\n        const received = event.data;\r\n        if (received.type === WebGLWorkerMessageType.GENERATE_POINT_BUFFERS) {\r\n          const projectionTransform = received.projectionTransform;\r\n          this.verticesBuffer_.fromArrayBuffer(received.vertexBuffer);\r\n          this.helper.flushBufferData(this.verticesBuffer_);\r\n          this.indicesBuffer_.fromArrayBuffer(received.indexBuffer);\r\n          this.helper.flushBufferData(this.indicesBuffer_);\r\n\r\n          this.renderTransform_ = projectionTransform;\r\n          makeInverseTransform(\r\n            this.invertRenderTransform_,\r\n            this.renderTransform_\r\n          );\r\n          this.renderInstructions_ = new Float32Array(\r\n            event.data.renderInstructions\r\n          );\r\n          if (received.id === this.lastSentId) {\r\n            this.ready = true;\r\n          }\r\n          this.getLayer().changed();\r\n        }\r\n      }\r\n    );\r\n\r\n    /**\r\n     * This object will be updated when the source changes. Key is uid.\r\n     * @type {Object<string, FeatureCacheItem>}\r\n     * @private\r\n     */\r\n    this.featureCache_ = {};\r\n\r\n    /**\r\n     * Amount of features in the cache.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.featureCount_ = 0;\r\n\r\n    const source = this.getLayer().getSource();\r\n    this.sourceListenKeys_ = [\r\n      listen(\r\n        source,\r\n        VectorEventType.ADDFEATURE,\r\n        this.handleSourceFeatureAdded_,\r\n        this\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.CHANGEFEATURE,\r\n        this.handleSourceFeatureChanged_,\r\n        this\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.REMOVEFEATURE,\r\n        this.handleSourceFeatureDelete_,\r\n        this\r\n      ),\r\n      listen(\r\n        source,\r\n        VectorEventType.CLEAR,\r\n        this.handleSourceFeatureClear_,\r\n        this\r\n      ),\r\n    ];\r\n    source.forEachFeature((feature) => {\r\n      this.featureCache_[getUid(feature)] = {\r\n        feature: feature,\r\n        properties: feature.getProperties(),\r\n        geometry: feature.getGeometry(),\r\n      };\r\n      this.featureCount_++;\r\n    });\r\n  }\r\n\r\n  afterHelperCreated() {\r\n    this.program_ = this.helper.getProgram(\r\n      this.fragmentShader_,\r\n      this.vertexShader_\r\n    );\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      this.hitRenderTarget_ = new WebGLRenderTarget(this.helper);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureAdded_(event) {\r\n    const feature = event.feature;\r\n    this.featureCache_[getUid(feature)] = {\r\n      feature: feature,\r\n      properties: feature.getProperties(),\r\n      geometry: feature.getGeometry(),\r\n    };\r\n    this.featureCount_++;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureChanged_(event) {\r\n    const feature = event.feature;\r\n    this.featureCache_[getUid(feature)] = {\r\n      feature: feature,\r\n      properties: feature.getProperties(),\r\n      geometry: feature.getGeometry(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../source/Vector.js\").VectorSourceEvent} event Event.\r\n   * @private\r\n   */\r\n  handleSourceFeatureDelete_(event) {\r\n    const feature = event.feature;\r\n    delete this.featureCache_[getUid(feature)];\r\n    this.featureCount_--;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSourceFeatureClear_() {\r\n    this.featureCache_ = {};\r\n    this.featureCount_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState) {\r\n    const gl = this.helper.getGL();\r\n    this.preRender(gl, frameState);\r\n\r\n    const [startWorld, endWorld, worldWidth] =\r\n      this.getWorldParameters_(frameState);\r\n\r\n    // draw the normal canvas\r\n    this.renderWorlds(frameState, false, startWorld, endWorld, worldWidth);\r\n\r\n    this.helper.finalizeDraw(\r\n      frameState,\r\n      this.dispatchPreComposeEvent,\r\n      this.dispatchPostComposeEvent\r\n    );\r\n    const canvas = this.helper.getCanvas();\r\n\r\n    if (this.hitDetectionEnabled_) {\r\n      this.renderWorlds(frameState, true, startWorld, endWorld, worldWidth);\r\n      this.hitRenderTarget_.clearCachedData();\r\n    }\r\n\r\n    this.postRender(gl, frameState);\r\n\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Compute world params\r\n   * @private\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {Array<number>} The world start, end and width.\r\n   */\r\n  getWorldParameters_(frameState) {\r\n    const projection = frameState.viewState.projection;\r\n    const layer = this.getLayer();\r\n    const vectorSource = layer.getSource();\r\n    // FIXME fix hit detection isn't reliable when rendering multiple worlds\r\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\r\n    const projectionExtent = projection.getExtent();\r\n\r\n    const extent = frameState.extent;\r\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\r\n    const endWorld = multiWorld\r\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\r\n      : 1;\r\n\r\n    const startWorld = multiWorld\r\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\r\n      : 0;\r\n\r\n    return [startWorld, endWorld, worldWidth];\r\n  }\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrameInternal(frameState) {\r\n    const layer = this.getLayer();\r\n    const vectorSource = layer.getSource();\r\n    const viewState = frameState.viewState;\r\n    const viewNotMoving =\r\n      !frameState.viewHints[ViewHint.ANIMATING] &&\r\n      !frameState.viewHints[ViewHint.INTERACTING];\r\n    const extentChanged = !equals(this.previousExtent_, frameState.extent);\r\n    const sourceChanged = this.sourceRevision_ < vectorSource.getRevision();\r\n\r\n    if (sourceChanged) {\r\n      this.sourceRevision_ = vectorSource.getRevision();\r\n    }\r\n\r\n    if (viewNotMoving && (extentChanged || sourceChanged)) {\r\n      const projection = viewState.projection;\r\n      const resolution = viewState.resolution;\r\n\r\n      const renderBuffer =\r\n        layer instanceof BaseVector ? layer.getRenderBuffer() : 0;\r\n      const extent = buffer(frameState.extent, renderBuffer * resolution);\r\n      vectorSource.loadFeatures(extent, resolution, projection);\r\n\r\n      this.rebuildBuffers_(frameState);\r\n      this.previousExtent_ = frameState.extent.slice();\r\n    }\r\n\r\n    this.helper.useProgram(this.program_, frameState);\r\n    this.helper.prepareDraw(frameState);\r\n\r\n    // write new data\r\n    this.helper.bindBuffer(this.verticesBuffer_);\r\n    this.helper.bindBuffer(this.indicesBuffer_);\r\n    this.helper.enableAttributes(this.attributes);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Rebuild internal webgl buffers based on current view extent; costly, should not be called too much\r\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  rebuildBuffers_(frameState) {\r\n    // saves the projection transform for the current frame state\r\n    const projectionTransform = createTransform();\r\n    this.helper.makeProjectionTransform(frameState, projectionTransform);\r\n\r\n    const baseInstructionLength = this.hitDetectionEnabled_ ? 7 : 2; // see below\r\n    const singleInstructionLength =\r\n      baseInstructionLength + this.customAttributes.length;\r\n    const totalSize = singleInstructionLength * this.featureCount_;\r\n    if (\r\n      !this.renderInstructions_ ||\r\n      this.renderInstructions_.length !== totalSize\r\n    ) {\r\n      this.renderInstructions_ = new Float32Array(totalSize);\r\n    }\r\n\r\n    // loop on features to fill the buffer\r\n    let featureCache, geometry;\r\n    const tmpCoords = [];\r\n    const tmpColor = [];\r\n    let idx = -1;\r\n    for (const featureUid in this.featureCache_) {\r\n      featureCache = this.featureCache_[featureUid];\r\n      geometry = /** @type {import(\"../../geom\").Point} */ (\r\n        featureCache.geometry\r\n      );\r\n      if (!geometry || geometry.getType() !== 'Point') {\r\n        continue;\r\n      }\r\n      tmpCoords[0] = geometry.getFlatCoordinates()[0];\r\n      tmpCoords[1] = geometry.getFlatCoordinates()[1];\r\n      applyTransform(projectionTransform, tmpCoords);\r\n\r\n      this.renderInstructions_[++idx] = tmpCoords[0];\r\n      this.renderInstructions_[++idx] = tmpCoords[1];\r\n\r\n      // for hit detection, the feature uid is saved in the opacity value\r\n      // and the index of the opacity value is encoded in the color values\r\n      if (this.hitDetectionEnabled_) {\r\n        const hitColor = colorEncodeId(idx + 5, tmpColor);\r\n        this.renderInstructions_[++idx] = hitColor[0];\r\n        this.renderInstructions_[++idx] = hitColor[1];\r\n        this.renderInstructions_[++idx] = hitColor[2];\r\n        this.renderInstructions_[++idx] = hitColor[3];\r\n        this.renderInstructions_[++idx] = Number(featureUid);\r\n      }\r\n\r\n      // pushing custom attributes\r\n      for (let j = 0; j < this.customAttributes.length; j++) {\r\n        const value = this.customAttributes[j].callback(\r\n          featureCache.feature,\r\n          featureCache.properties\r\n        );\r\n        this.renderInstructions_[++idx] = value;\r\n      }\r\n    }\r\n\r\n    /** @type {import('../../render/webgl/constants.js').WebGLWorkerGenerateBuffersMessage} */\r\n    const message = {\r\n      id: ++this.lastSentId,\r\n      type: WebGLWorkerMessageType.GENERATE_POINT_BUFFERS,\r\n      renderInstructions: this.renderInstructions_.buffer,\r\n      customAttributesSize: singleInstructionLength - 2,\r\n    };\r\n    // additional properties will be sent back as-is by the worker\r\n    message['projectionTransform'] = projectionTransform;\r\n    this.ready = false;\r\n    this.worker_.postMessage(message, [this.renderInstructions_.buffer]);\r\n    this.renderInstructions_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches\r\n  ) {\r\n    assert(\r\n      this.hitDetectionEnabled_,\r\n      '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`'\r\n    );\r\n    if (!this.renderInstructions_ || !this.hitDetectionEnabled_) {\r\n      return undefined;\r\n    }\r\n\r\n    const pixel = applyTransform(\r\n      frameState.coordinateToPixelTransform,\r\n      coordinate.slice()\r\n    );\r\n\r\n    const data = this.hitRenderTarget_.readPixel(pixel[0] / 2, pixel[1] / 2);\r\n    const color = [data[0] / 255, data[1] / 255, data[2] / 255, data[3] / 255];\r\n    const index = colorDecodeId(color);\r\n    const opacity = this.renderInstructions_[index];\r\n    const uid = Math.floor(opacity).toString();\r\n\r\n    const source = this.getLayer().getSource();\r\n    const feature = source.getFeatureByUid(uid);\r\n    if (feature) {\r\n      return callback(feature, this.getLayer(), null);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Render the world, either to the main framebuffer or to the hit framebuffer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState current frame state\r\n   * @param {boolean} forHitDetection whether the rendering is for hit detection\r\n   * @param {number} startWorld the world to render in the first iteration\r\n   * @param {number} endWorld the last world to render\r\n   * @param {number} worldWidth the width of the worlds being rendered\r\n   */\r\n  renderWorlds(frameState, forHitDetection, startWorld, endWorld, worldWidth) {\r\n    let world = startWorld;\r\n\r\n    this.helper.useProgram(this.program_, frameState);\r\n\r\n    if (forHitDetection) {\r\n      this.hitRenderTarget_.setSize([\r\n        Math.floor(frameState.size[0] / 2),\r\n        Math.floor(frameState.size[1] / 2),\r\n      ]);\r\n      this.helper.prepareDrawToRenderTarget(\r\n        frameState,\r\n        this.hitRenderTarget_,\r\n        true\r\n      );\r\n    }\r\n\r\n    this.helper.bindBuffer(this.verticesBuffer_);\r\n    this.helper.bindBuffer(this.indicesBuffer_);\r\n    this.helper.enableAttributes(this.attributes);\r\n\r\n    do {\r\n      this.helper.makeProjectionTransform(frameState, this.currentTransform_);\r\n      translateTransform(this.currentTransform_, world * worldWidth, 0);\r\n      multiplyTransform(this.currentTransform_, this.invertRenderTransform_);\r\n      this.helper.applyUniforms(frameState);\r\n      this.helper.applyHitDetectionUniform(forHitDetection);\r\n      const renderCount = this.indicesBuffer_.getSize();\r\n      this.helper.drawElements(0, renderCount);\r\n    } while (++world < endWorld);\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.worker_.terminate();\r\n    this.layer_ = null;\r\n    this.sourceListenKeys_.forEach(function (key) {\r\n      unlistenByKey(key);\r\n    });\r\n    this.sourceListenKeys_ = null;\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default WebGLPointsLayerRenderer;\r\n", "/**\r\n * @module ol/webgl/PaletteTexture\r\n */\r\n\r\nclass PaletteTexture {\r\n  /**\r\n   * @param {string} name The name of the texture.\r\n   * @param {Uint8Array} data The texture data.\r\n   */\r\n  constructor(name, data) {\r\n    this.name = name;\r\n    this.data = data;\r\n\r\n    /**\r\n     * @type {WebGLTexture}\r\n     * @private\r\n     */\r\n    this.texture_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {WebGLRenderingContext} gl Rendering context.\r\n   * @return {WebGLTexture} The texture.\r\n   */\r\n  getTexture(gl) {\r\n    if (!this.texture_) {\r\n      const texture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,\r\n        gl.RGBA,\r\n        this.data.length / 4,\r\n        1,\r\n        0,\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        this.data\r\n      );\r\n      this.texture_ = texture;\r\n    }\r\n    return this.texture_;\r\n  }\r\n}\r\n\r\nexport default PaletteTexture;\r\n", "/**\r\n * @module ol/webgl/BaseTileRepresentation\r\n */\r\n\r\nimport EventTarget from '../events/Target.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ImageTile from '../ImageTile.js';\r\nimport TileState from '../TileState.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @typedef {import(\"../Tile.js\").default} BaseTileType\r\n */\r\n\r\n/**\r\n * @template {BaseTileType} TileType\r\n * @typedef {Object} TileRepresentationOptions\r\n * @property {TileType} tile The tile.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\r\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\r\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for representing a tile in a webgl context\r\n * @template {import(\"../Tile.js\").default} TileType\r\n * @abstract\r\n */\r\nclass BaseTileRepresentation extends EventTarget {\r\n  /**\r\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /**\r\n     * @type {TileType}\r\n     */\r\n    this.tile;\r\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\r\n\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.gutter_ = options.gutter || 0;\r\n\r\n    /**\r\n     * @type {import(\"../webgl/Helper.js\").default}\r\n     * @protected\r\n     */\r\n    this.helper_ = options.helper;\r\n\r\n    this.loaded = false;\r\n    this.ready = false;\r\n  }\r\n\r\n  /**\r\n   * @param {TileType} tile Tile.\r\n   */\r\n  setTile(tile) {\r\n    if (tile !== this.tile) {\r\n      if (this.tile) {\r\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\r\n      }\r\n      this.tile = tile;\r\n      this.loaded = tile.getState() === TileState.LOADED;\r\n      if (this.loaded) {\r\n        this.uploadTile();\r\n      } else {\r\n        if (tile instanceof ImageTile) {\r\n          const image = tile.getImage();\r\n          if (image instanceof Image && !image.crossOrigin) {\r\n            image.crossOrigin = 'anonymous';\r\n          }\r\n        }\r\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @protected\r\n   */\r\n  uploadTile() {\r\n    abstract();\r\n  }\r\n\r\n  setReady() {\r\n    this.ready = true;\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  handleTileChange_() {\r\n    if (this.tile.getState() === TileState.LOADED) {\r\n      this.loaded = true;\r\n      this.uploadTile();\r\n    }\r\n  }\r\n\r\n  disposeInternal() {\r\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\r\n  }\r\n}\r\n\r\nexport default BaseTileRepresentation;\r\n", "/**\r\n * @module ol/webgl/TileTexture\r\n */\r\n\r\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\r\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ImageTile from '../ImageTile.js';\r\nimport ReprojTile from '../reproj/Tile.js';\r\nimport WebGLArrayBuffer from './Buffer.js';\r\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @param {WebGLRenderingContext} gl The WebGL context.\r\n * @param {WebGLTexture} texture The texture.\r\n * @param {boolean} interpolate Interpolate when resampling.\r\n */\r\nfunction bindAndConfigure(gl, texture, interpolate) {\r\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\r\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\r\n}\r\n\r\n/**\r\n * @param {WebGLRenderingContext} gl The WebGL context.\r\n * @param {WebGLTexture} texture The texture.\r\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\r\n * @param {boolean} interpolate Interpolate when resampling.\r\n */\r\nfunction uploadImageTexture(gl, texture, image, interpolate) {\r\n  bindAndConfigure(gl, texture, interpolate);\r\n\r\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n}\r\n\r\n/**\r\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\r\n * @param {WebGLTexture} texture The texture.\r\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\r\n * @param {import(\"../size.js\").Size} size The pixel size.\r\n * @param {number} bandCount The band count.\r\n * @param {boolean} interpolate Interpolate when resampling.\r\n */\r\nfunction uploadDataTexture(\r\n  helper,\r\n  texture,\r\n  data,\r\n  size,\r\n  bandCount,\r\n  interpolate\r\n) {\r\n  const gl = helper.getGL();\r\n  let textureType;\r\n  let canInterpolate;\r\n  if (data instanceof Float32Array) {\r\n    textureType = gl.FLOAT;\r\n    helper.getExtension('OES_texture_float');\r\n    const extension = helper.getExtension('OES_texture_float_linear');\r\n    canInterpolate = extension !== null;\r\n  } else {\r\n    textureType = gl.UNSIGNED_BYTE;\r\n    canInterpolate = true;\r\n  }\r\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\r\n\r\n  const bytesPerRow = data.byteLength / size[1];\r\n  let unpackAlignment = 1;\r\n  if (bytesPerRow % 8 === 0) {\r\n    unpackAlignment = 8;\r\n  } else if (bytesPerRow % 4 === 0) {\r\n    unpackAlignment = 4;\r\n  } else if (bytesPerRow % 2 === 0) {\r\n    unpackAlignment = 2;\r\n  }\r\n\r\n  let format;\r\n  switch (bandCount) {\r\n    case 1: {\r\n      format = gl.LUMINANCE;\r\n      break;\r\n    }\r\n    case 2: {\r\n      format = gl.LUMINANCE_ALPHA;\r\n      break;\r\n    }\r\n    case 3: {\r\n      format = gl.RGB;\r\n      break;\r\n    }\r\n    case 4: {\r\n      format = gl.RGBA;\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\r\n    }\r\n  }\r\n\r\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\r\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    0,\r\n    format,\r\n    size[0],\r\n    size[1],\r\n    0,\r\n    format,\r\n    textureType,\r\n    data\r\n  );\r\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\r\n}\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet pixelContext = null;\r\n\r\nfunction createPixelContext() {\r\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\r\n    willReadFrequently: true,\r\n  });\r\n}\r\n\r\n/**\r\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\r\n */\r\n\r\n/**\r\n * @extends {BaseTileRepresentation<TileType>}\r\n */\r\nclass TileTexture extends BaseTileRepresentation {\r\n  /**\r\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    /**\r\n     * @type {Array<WebGLTexture>}\r\n     */\r\n    this.textures = [];\r\n\r\n    /**\r\n     * @type {import(\"../size.js\").Size}\r\n     * @private\r\n     */\r\n    this.renderSize_ = toSize(\r\n      options.grid.getTileSize(options.tile.tileCoord[0])\r\n    );\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.bandCount = NaN;\r\n\r\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\r\n    coords.fromArray([\r\n      0, // P0\r\n      1,\r\n      1, // P1\r\n      1,\r\n      1, // P2\r\n      0,\r\n      0, // P3\r\n      0,\r\n    ]);\r\n    this.helper_.flushBufferData(coords);\r\n\r\n    /**\r\n     * @type {WebGLArrayBuffer}\r\n     */\r\n    this.coords = coords;\r\n\r\n    this.setTile(options.tile);\r\n  }\r\n\r\n  uploadTile() {\r\n    const helper = this.helper_;\r\n    const gl = helper.getGL();\r\n    const tile = this.tile;\r\n\r\n    this.textures.length = 0;\r\n\r\n    /**\r\n     * @type {import(\"../DataTile.js\").Data}\r\n     */\r\n    let data;\r\n\r\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\r\n      data = tile.getImage();\r\n    } else {\r\n      data = tile.getData();\r\n    }\r\n\r\n    const image = asImageLike(data);\r\n    if (image) {\r\n      const texture = gl.createTexture();\r\n      this.textures.push(texture);\r\n      this.bandCount = 4;\r\n      uploadImageTexture(gl, texture, image, tile.interpolate);\r\n      this.setReady();\r\n      return;\r\n    }\r\n\r\n    data = asArrayLike(data);\r\n\r\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\r\n    const pixelSize = [\r\n      sourceTileSize[0] + 2 * this.gutter_,\r\n      sourceTileSize[1] + 2 * this.gutter_,\r\n    ];\r\n    const isFloat = data instanceof Float32Array;\r\n    const pixelCount = pixelSize[0] * pixelSize[1];\r\n    const DataType = isFloat ? Float32Array : Uint8Array;\r\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\r\n    const bytesPerRow = data.byteLength / pixelSize[1];\r\n\r\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\r\n    const textureCount = Math.ceil(this.bandCount / 4);\r\n\r\n    if (textureCount === 1) {\r\n      const texture = gl.createTexture();\r\n      this.textures.push(texture);\r\n      uploadDataTexture(\r\n        helper,\r\n        texture,\r\n        data,\r\n        pixelSize,\r\n        this.bandCount,\r\n        tile.interpolate\r\n      );\r\n      this.setReady();\r\n      return;\r\n    }\r\n\r\n    const textureDataArrays = new Array(textureCount);\r\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\r\n      const texture = gl.createTexture();\r\n      this.textures.push(texture);\r\n\r\n      const bandCount =\r\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\r\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\r\n    }\r\n\r\n    let dataIndex = 0;\r\n    let rowOffset = 0;\r\n    const colCount = pixelSize[0] * this.bandCount;\r\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\r\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\r\n        const dataValue = data[rowOffset + colIndex];\r\n\r\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\r\n        const bandIndex = colIndex % this.bandCount;\r\n        const textureIndex = Math.floor(bandIndex / 4);\r\n        const textureData = textureDataArrays[textureIndex];\r\n        const bandCount = textureData.length / pixelCount;\r\n        const textureBandIndex = bandIndex % 4;\r\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\r\n\r\n        ++dataIndex;\r\n      }\r\n      rowOffset += bytesPerRow / bytesPerElement;\r\n    }\r\n\r\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\r\n      const texture = this.textures[textureIndex];\r\n      const textureData = textureDataArrays[textureIndex];\r\n      const bandCount = textureData.length / pixelCount;\r\n      uploadDataTexture(\r\n        helper,\r\n        texture,\r\n        textureData,\r\n        pixelSize,\r\n        bandCount,\r\n        tile.interpolate\r\n      );\r\n    }\r\n\r\n    this.setReady();\r\n  }\r\n\r\n  disposeInternal() {\r\n    const gl = this.helper_.getGL();\r\n    this.helper_.deleteBuffer(this.coords);\r\n    for (let i = 0; i < this.textures.length; ++i) {\r\n      gl.deleteTexture(this.textures[i]);\r\n    }\r\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\r\n   * @param {number} renderCol The column index (in rendered tile space).\r\n   * @param {number} renderRow The row index (in rendered tile space).\r\n   * @return {Uint8ClampedArray|null} The data.\r\n   * @private\r\n   */\r\n  getImagePixelData_(image, renderCol, renderRow) {\r\n    const gutter = this.gutter_;\r\n    const renderWidth = this.renderSize_[0];\r\n    const renderHeight = this.renderSize_[1];\r\n\r\n    if (!pixelContext) {\r\n      createPixelContext();\r\n    }\r\n    pixelContext.clearRect(0, 0, 1, 1);\r\n\r\n    const sourceWidth = image.width;\r\n    const sourceHeight = image.height;\r\n\r\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\r\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\r\n\r\n    const sourceCol =\r\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\r\n\r\n    const sourceRow =\r\n      gutter +\r\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\r\n\r\n    let data;\r\n    try {\r\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\r\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\r\n    } catch (err) {\r\n      pixelContext = null;\r\n      return null;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\r\n   * @param {import(\"../size.js\").Size} sourceSize The size.\r\n   * @param {number} renderCol The column index (in rendered tile space).\r\n   * @param {number} renderRow The row index (in rendered tile space).\r\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\r\n   * @private\r\n   */\r\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\r\n    const gutter = this.gutter_;\r\n    const renderWidth = this.renderSize_[0];\r\n    const renderHeight = this.renderSize_[1];\r\n\r\n    const sourceWidthWithoutGutter = sourceSize[0];\r\n    const sourceHeightWithoutGutter = sourceSize[1];\r\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\r\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\r\n\r\n    const sourceCol =\r\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\r\n\r\n    const sourceRow =\r\n      gutter +\r\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\r\n\r\n    if (data instanceof DataView) {\r\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\r\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\r\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\r\n      return new DataView(buffer);\r\n    }\r\n\r\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\r\n    return data.slice(offset, offset + this.bandCount);\r\n  }\r\n\r\n  /**\r\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\r\n   * @param {number} renderCol The column index (in rendered tile space).\r\n   * @param {number} renderRow The row index (in rendered tile space).\r\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\r\n   */\r\n  getPixelData(renderCol, renderRow) {\r\n    if (!this.loaded) {\r\n      return null;\r\n    }\r\n\r\n    if (this.tile instanceof DataTile) {\r\n      const data = this.tile.getData();\r\n      const arrayData = asArrayLike(data);\r\n      if (arrayData) {\r\n        const sourceSize = this.tile.getSize();\r\n        return this.getArrayPixelData_(\r\n          arrayData,\r\n          sourceSize,\r\n          renderCol,\r\n          renderRow\r\n        );\r\n      }\r\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\r\n    }\r\n\r\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\r\n  }\r\n}\r\n\r\nexport default TileTexture;\r\n", "/**\r\n * @module ol/renderer/webgl/TileLayerBase\r\n */\r\nimport LRUCache from '../../structs/LRUCache.js';\r\nimport ReprojDataTile from '../../reproj/DataTile.js';\r\nimport ReprojTile from '../../reproj/Tile.js';\r\nimport TileRange from '../../TileRange.js';\r\nimport TileState from '../../TileState.js';\r\nimport WebGLLayerRenderer from './Layer.js';\r\nimport {abstract, getUid} from '../../util.js';\r\nimport {create as createMat4} from '../../vec/mat4.js';\r\nimport {\r\n  createOrUpdate as createTileCoord,\r\n  getKey as getTileCoordKey,\r\n} from '../../tilecoord.js';\r\nimport {\r\n  create as createTransform,\r\n  reset as resetTransform,\r\n  rotate as rotateTransform,\r\n  scale as scaleTransform,\r\n  translate as translateTransform,\r\n} from '../../transform.js';\r\nimport {descending} from '../../array.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\nimport {getIntersection, isEmpty} from '../../extent.js';\r\nimport {toSize} from '../../size.js';\r\n\r\nexport const Uniforms = {\r\n  TILE_TRANSFORM: 'u_tileTransform',\r\n  TRANSITION_ALPHA: 'u_transitionAlpha',\r\n  DEPTH: 'u_depth',\r\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\r\n  RESOLUTION: 'u_resolution',\r\n  ZOOM: 'u_zoom',\r\n  GLOBAL_ALPHA: 'u_globalAlpha',\r\n  PROJECTION_MATRIX: 'u_projectionMatrix',\r\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\r\n};\r\n\r\n/**\r\n * @type {Object<string, boolean>}\r\n */\r\nconst empty = {};\r\n\r\n/**\r\n * Transform a zoom level into a depth value ranging from -1 to 1.\r\n * @param {number} z A zoom level.\r\n * @return {number} A depth value.\r\n */\r\nfunction depthForZ(z) {\r\n  return 1 / (z + 2);\r\n}\r\n\r\n/**\r\n * @typedef {import(\"../../webgl/BaseTileRepresentation.js\").default<import(\"../../Tile.js\").default>} AbstractTileRepresentation\r\n */\r\n/**\r\n * @typedef {Object} TileRepresentationLookup\r\n * @property {Set<string>} tileIds The set of tile ids in the lookup.\r\n * @property {Object<number, Set<AbstractTileRepresentation>>} representationsByZ Tile representations by zoom level.\r\n */\r\n\r\n/**\r\n * @return {TileRepresentationLookup} A new tile representation lookup.\r\n */\r\nexport function newTileRepresentationLookup() {\r\n  return {tileIds: new Set(), representationsByZ: {}};\r\n}\r\n\r\n/**\r\n * Check if a tile is already in the tile representation lookup.\r\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\r\n * @param {import(\"../../Tile.js\").default} tile A tile.\r\n * @return {boolean} The tile is already in the lookup.\r\n */\r\nfunction lookupHasTile(tileRepresentationLookup, tile) {\r\n  return tileRepresentationLookup.tileIds.has(getUid(tile));\r\n}\r\n\r\n/**\r\n * Add a tile representation to the lookup.\r\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\r\n * @param {AbstractTileRepresentation} tileRepresentation A tile representation.\r\n * @param {number} z The zoom level.\r\n */\r\nfunction addTileRepresentationToLookup(\r\n  tileRepresentationLookup,\r\n  tileRepresentation,\r\n  z\r\n) {\r\n  const representationsByZ = tileRepresentationLookup.representationsByZ;\r\n  if (!(z in representationsByZ)) {\r\n    representationsByZ[z] = new Set();\r\n  }\r\n  representationsByZ[z].add(tileRepresentation);\r\n  tileRepresentationLookup.tileIds.add(getUid(tileRepresentation.tile));\r\n}\r\n\r\n/**\r\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\r\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\r\n */\r\nfunction getRenderExtent(frameState, extent) {\r\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n  if (layerState.extent) {\r\n    extent = getIntersection(\r\n      extent,\r\n      fromUserExtent(layerState.extent, frameState.viewState.projection)\r\n    );\r\n  }\r\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\r\n    layerState.layer.getRenderSource()\r\n  );\r\n  if (!source.getWrapX()) {\r\n    const gridExtent = source\r\n      .getTileGridForProjection(frameState.viewState.projection)\r\n      .getExtent();\r\n    if (gridExtent) {\r\n      extent = getIntersection(extent, gridExtent);\r\n    }\r\n  }\r\n  return extent;\r\n}\r\n\r\nexport function getCacheKey(source, tileCoord) {\r\n  return `${source.getKey()},${getTileCoordKey(tileCoord)}`;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\r\n * made available to shaders.\r\n * @property {number} [cacheSize=512] The tile representation cache size.\r\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../layer/BaseTile.js\").default} BaseLayerType\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base WebGL renderer for tile layers.\r\n * @template {BaseLayerType} LayerType\r\n * @template {import(\"../../Tile.js\").default} TileType\r\n * @template {import(\"../../webgl/BaseTileRepresentation.js\").default<TileType>} TileRepresentation\r\n * @extends {WebGLLayerRenderer<LayerType>}\r\n */\r\nclass WebGLBaseTileLayerRenderer extends WebGLLayerRenderer {\r\n  /**\r\n   * @param {LayerType} tileLayer Tile layer.\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(tileLayer, options) {\r\n    super(tileLayer, {\r\n      uniforms: options.uniforms,\r\n      postProcesses: options.postProcesses,\r\n    });\r\n\r\n    /**\r\n     * The last call to `renderFrame` was completed with all tiles loaded\r\n     * @type {boolean}\r\n     */\r\n    this.renderComplete = false;\r\n\r\n    /**\r\n     * This transform converts representation coordinates to screen coordinates.\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     * @private\r\n     */\r\n    this.tileTransform_ = createTransform();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @protected\r\n     */\r\n    this.tempMat4 = createMat4();\r\n\r\n    /**\r\n     * @type {import(\"../../TileRange.js\").default}\r\n     * @private\r\n     */\r\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @type {import(\"../../tilecoord.js\").TileCoord}\r\n     * @private\r\n     */\r\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\r\n\r\n    /**\r\n     * @type {import(\"../../size.js\").Size}\r\n     * @private\r\n     */\r\n    this.tempSize_ = [0, 0];\r\n\r\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\r\n    /**\r\n     * @type {import(\"../../structs/LRUCache.js\").default<TileRepresentation>}\r\n     * @protected\r\n     */\r\n    this.tileRepresentationCache = new LRUCache(cacheSize);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../Map.js\").FrameState|null}\r\n     */\r\n    this.frameState = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj/Projection.js\").default}\r\n     */\r\n    this.projection_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  reset(options) {\r\n    super.reset({\r\n      uniforms: options.uniforms,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {TileType} tile Tile.\r\n   * @return {boolean} Tile is drawable.\r\n   * @private\r\n   */\r\n  isDrawableTile_(tile) {\r\n    const tileLayer = this.getLayer();\r\n    const tileState = tile.getState();\r\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\r\n    return (\r\n      tileState == TileState.LOADED ||\r\n      tileState == TileState.EMPTY ||\r\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determine whether renderFrame should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrameInternal(frameState) {\r\n    if (!this.projection_) {\r\n      this.projection_ = frameState.viewState.projection;\r\n    } else if (frameState.viewState.projection !== this.projection_) {\r\n      this.clearCache();\r\n      this.projection_ = frameState.viewState.projection;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const source = layer.getRenderSource();\r\n    if (!source) {\r\n      return false;\r\n    }\r\n\r\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\r\n      return false;\r\n    }\r\n    return source.getState() === 'ready';\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../../webgl/BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options tile representation options\r\n   * @return {TileRepresentation} A new tile representation\r\n   * @protected\r\n   */\r\n  createTileRepresentation(options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\r\n   * @param {number} initialZ The zoom level.\r\n   * @param {TileRepresentationLookup} tileRepresentationLookup The zoom level.\r\n   * @param {number} preload Number of additional levels to load.\r\n   */\r\n  enqueueTiles(\r\n    frameState,\r\n    extent,\r\n    initialZ,\r\n    tileRepresentationLookup,\r\n    preload\r\n  ) {\r\n    const viewState = frameState.viewState;\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getRenderSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\r\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\r\n\r\n    const tileSourceKey = getUid(tileSource);\r\n    if (!(tileSourceKey in frameState.wantedTiles)) {\r\n      frameState.wantedTiles[tileSourceKey] = {};\r\n    }\r\n\r\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n\r\n    const map = tileLayer.getMapInternal();\r\n    const minZ = Math.max(\r\n      initialZ - preload,\r\n      tileGrid.getMinZoom(),\r\n      tileGrid.getZForResolution(\r\n        Math.min(\r\n          tileLayer.getMaxResolution(),\r\n          map\r\n            ? map\r\n                .getView()\r\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\r\n            : tileGrid.getResolution(0)\r\n        ),\r\n        tileSource.zDirection\r\n      )\r\n    );\r\n    for (let z = initialZ; z >= minZ; --z) {\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        extent,\r\n        z,\r\n        this.tempTileRange_\r\n      );\r\n\r\n      const tileResolution = tileGrid.getResolution(z);\r\n\r\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n          const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\r\n          const cacheKey = getCacheKey(tileSource, tileCoord);\r\n\r\n          /** @type {TileRepresentation} */\r\n          let tileRepresentation;\r\n\r\n          /** @type {TileType} */\r\n          let tile;\r\n\r\n          if (tileRepresentationCache.containsKey(cacheKey)) {\r\n            tileRepresentation = tileRepresentationCache.get(cacheKey);\r\n            tile = tileRepresentation.tile;\r\n          }\r\n          if (\r\n            !tileRepresentation ||\r\n            tileRepresentation.tile.key !== tileSource.getKey()\r\n          ) {\r\n            tile = tileSource.getTile(\r\n              z,\r\n              x,\r\n              y,\r\n              frameState.pixelRatio,\r\n              viewState.projection\r\n            );\r\n          }\r\n\r\n          if (lookupHasTile(tileRepresentationLookup, tile)) {\r\n            continue;\r\n          }\r\n\r\n          if (!tileRepresentation) {\r\n            tileRepresentation = this.createTileRepresentation({\r\n              tile: tile,\r\n              grid: tileGrid,\r\n              helper: this.helper,\r\n              gutter: gutter,\r\n            });\r\n            tileRepresentationCache.set(cacheKey, tileRepresentation);\r\n          } else {\r\n            if (this.isDrawableTile_(tile)) {\r\n              tileRepresentation.setTile(tile);\r\n            } else {\r\n              const interimTile = /** @type {TileType} */ (\r\n                tile.getInterimTile()\r\n              );\r\n              tileRepresentation.setTile(interimTile);\r\n            }\r\n          }\r\n\r\n          addTileRepresentationToLookup(\r\n            tileRepresentationLookup,\r\n            tileRepresentation,\r\n            z\r\n          );\r\n\r\n          const tileQueueKey = tile.getKey();\r\n          wantedTiles[tileQueueKey] = true;\r\n\r\n          if (tile.getState() === TileState.IDLE) {\r\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\r\n              frameState.tileQueue.enqueue([\r\n                tile,\r\n                tileSourceKey,\r\n                tileGrid.getTileCoordCenter(tileCoord),\r\n                tileResolution,\r\n              ]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {boolean} tilesWithAlpha True if at least one of the rendered tiles has alpha\r\n   * @protected\r\n   */\r\n  beforeTilesRender(frameState, tilesWithAlpha) {\r\n    this.helper.prepareDraw(this.frameState, !tilesWithAlpha, true);\r\n  }\r\n\r\n  /**\r\n   * @param {TileRepresentation} tileRepresentation Tile representation\r\n   * @param {import(\"../../transform.js\").Transform} tileTransform Tile transform\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\r\n   * @param {import(\"../../extent.js\").Extent} renderExtent Render extent\r\n   * @param {number} tileResolution Tile resolution\r\n   * @param {import(\"../../size.js\").Size} tileSize Tile size\r\n   * @param {import(\"../../coordinate.js\").Coordinate} tileOrigin Tile origin\r\n   * @param {import(\"../../extent.js\").Extent} tileExtent tile Extent\r\n   * @param {number} depth Depth\r\n   * @param {number} gutter Gutter\r\n   * @param {number} alpha Alpha\r\n   * @protected\r\n   */\r\n  renderTile(\r\n    tileRepresentation,\r\n    tileTransform,\r\n    frameState,\r\n    renderExtent,\r\n    tileResolution,\r\n    tileSize,\r\n    tileOrigin,\r\n    tileExtent,\r\n    depth,\r\n    gutter,\r\n    alpha\r\n  ) {}\r\n\r\n  drawTile_(\r\n    frameState,\r\n    tileRepresentation,\r\n    tileZ,\r\n    gutter,\r\n    extent,\r\n    alphaLookup,\r\n    tileGrid\r\n  ) {\r\n    if (!tileRepresentation.loaded) {\r\n      return;\r\n    }\r\n    const tile = tileRepresentation.tile;\r\n    const tileCoord = tile.tileCoord;\r\n    const tileCoordKey = getTileCoordKey(tileCoord);\r\n    const alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\r\n\r\n    const tileResolution = tileGrid.getResolution(tileZ);\r\n    const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\r\n    const tileOrigin = tileGrid.getOrigin(tileZ);\r\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\r\n    // tiles with alpha are rendered last to allow blending\r\n    const depth = alpha < 1 ? -1 : depthForZ(tileZ);\r\n    if (alpha < 1) {\r\n      frameState.animate = true;\r\n    }\r\n\r\n    const viewState = frameState.viewState;\r\n    const centerX = viewState.center[0];\r\n    const centerY = viewState.center[1];\r\n\r\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\r\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\r\n\r\n    const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;\r\n\r\n    const centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\r\n    const centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\r\n\r\n    const tileScale = viewState.resolution / tileResolution;\r\n\r\n    const tileCenterI = tileCoord[1];\r\n    const tileCenterJ = tileCoord[2];\r\n\r\n    resetTransform(this.tileTransform_);\r\n    scaleTransform(\r\n      this.tileTransform_,\r\n      2 / ((frameState.size[0] * tileScale) / tileWidthWithGutter),\r\n      -2 / ((frameState.size[1] * tileScale) / tileWidthWithGutter)\r\n    );\r\n    rotateTransform(this.tileTransform_, viewState.rotation);\r\n    scaleTransform(this.tileTransform_, 1, 1 / aspectRatio);\r\n    translateTransform(\r\n      this.tileTransform_,\r\n      (tileSize[0] * (tileCenterI - centerI) - gutter) / tileWidthWithGutter,\r\n      (tileSize[1] * (tileCenterJ - centerJ) - gutter) / tileHeightWithGutter\r\n    );\r\n\r\n    this.renderTile(\r\n      /** @type {TileRepresentation} */ (tileRepresentation),\r\n      this.tileTransform_,\r\n      frameState,\r\n      extent,\r\n      tileResolution,\r\n      tileSize,\r\n      tileOrigin,\r\n      tileExtent,\r\n      depth,\r\n      gutter,\r\n      alpha\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState) {\r\n    this.frameState = frameState;\r\n    this.renderComplete = true;\r\n    const gl = this.helper.getGL();\r\n    this.preRender(gl, frameState);\r\n\r\n    const viewState = frameState.viewState;\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getRenderSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\r\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\r\n    const extent = getRenderExtent(frameState, frameState.extent);\r\n    const z = tileGrid.getZForResolution(\r\n      viewState.resolution,\r\n      tileSource.zDirection\r\n    );\r\n\r\n    /**\r\n     * @type {TileRepresentationLookup}\r\n     */\r\n    const tileRepresentationLookup = newTileRepresentationLookup();\r\n\r\n    const preload = tileLayer.getPreload();\r\n    if (frameState.nextExtent) {\r\n      const targetZ = tileGrid.getZForResolution(\r\n        viewState.nextResolution,\r\n        tileSource.zDirection\r\n      );\r\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\r\n      this.enqueueTiles(\r\n        frameState,\r\n        nextExtent,\r\n        targetZ,\r\n        tileRepresentationLookup,\r\n        preload\r\n      );\r\n    }\r\n\r\n    this.enqueueTiles(frameState, extent, z, tileRepresentationLookup, 0);\r\n    if (preload > 0) {\r\n      setTimeout(() => {\r\n        this.enqueueTiles(\r\n          frameState,\r\n          extent,\r\n          z - 1,\r\n          tileRepresentationLookup,\r\n          preload - 1\r\n        );\r\n      }, 0);\r\n    }\r\n\r\n    /**\r\n     * A lookup of alpha values for tiles at the target rendering resolution\r\n     * for tiles that are in transition.  If a tile coord key is absent from\r\n     * this lookup, the tile should be rendered at alpha 1.\r\n     * @type {Object<string, number>}\r\n     */\r\n    const alphaLookup = {};\r\n\r\n    const uid = getUid(this);\r\n    const time = frameState.time;\r\n    let blend = false;\r\n\r\n    // look for cached tiles to use if a target tile is not ready\r\n    for (const tileRepresentation of tileRepresentationLookup\r\n      .representationsByZ[z]) {\r\n      const tile = tileRepresentation.tile;\r\n      if (\r\n        (tile instanceof ReprojTile || tile instanceof ReprojDataTile) &&\r\n        tile.getState() === TileState.EMPTY\r\n      ) {\r\n        continue;\r\n      }\r\n      const tileCoord = tile.tileCoord;\r\n\r\n      if (tileRepresentation.loaded) {\r\n        const alpha = tile.getAlpha(uid, time);\r\n        if (alpha === 1) {\r\n          // no need to look for alt tiles\r\n          tile.endTransition(uid);\r\n          continue;\r\n        }\r\n        blend = true;\r\n        const tileCoordKey = getTileCoordKey(tileCoord);\r\n        alphaLookup[tileCoordKey] = alpha;\r\n      }\r\n      this.renderComplete = false;\r\n\r\n      // first look for child tiles (at z + 1)\r\n      const coveredByChildren = this.findAltTiles_(\r\n        tileGrid,\r\n        tileCoord,\r\n        z + 1,\r\n        tileRepresentationLookup\r\n      );\r\n\r\n      if (coveredByChildren) {\r\n        continue;\r\n      }\r\n\r\n      // next look for parent tiles\r\n      const minZoom = tileGrid.getMinZoom();\r\n      for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\r\n        const coveredByParent = this.findAltTiles_(\r\n          tileGrid,\r\n          tileCoord,\r\n          parentZ,\r\n          tileRepresentationLookup\r\n        );\r\n\r\n        if (coveredByParent) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.beforeTilesRender(frameState, blend);\r\n\r\n    const representationsByZ = tileRepresentationLookup.representationsByZ;\r\n    const zs = Object.keys(representationsByZ).map(Number).sort(descending);\r\n    for (let j = 0, jj = zs.length; j < jj; ++j) {\r\n      const tileZ = zs[j];\r\n      for (const tileRepresentation of representationsByZ[tileZ]) {\r\n        const tileCoord = tileRepresentation.tile.tileCoord;\r\n        const tileCoordKey = getTileCoordKey(tileCoord);\r\n        if (tileCoordKey in alphaLookup) {\r\n          continue;\r\n        }\r\n\r\n        this.drawTile_(\r\n          frameState,\r\n          tileRepresentation,\r\n          tileZ,\r\n          gutter,\r\n          extent,\r\n          alphaLookup,\r\n          tileGrid\r\n        );\r\n      }\r\n    }\r\n\r\n    for (const tileRepresentation of representationsByZ[z]) {\r\n      const tileCoord = tileRepresentation.tile.tileCoord;\r\n      const tileCoordKey = getTileCoordKey(tileCoord);\r\n      if (tileCoordKey in alphaLookup) {\r\n        this.drawTile_(\r\n          frameState,\r\n          tileRepresentation,\r\n          z,\r\n          gutter,\r\n          extent,\r\n          alphaLookup,\r\n          tileGrid\r\n        );\r\n      }\r\n    }\r\n\r\n    this.helper.finalizeDraw(\r\n      frameState,\r\n      this.dispatchPreComposeEvent,\r\n      this.dispatchPostComposeEvent\r\n    );\r\n\r\n    const canvas = this.helper.getCanvas();\r\n\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n    while (tileRepresentationCache.canExpireCache()) {\r\n      const tileRepresentation = tileRepresentationCache.pop();\r\n      tileRepresentation.dispose();\r\n    }\r\n\r\n    // TODO: let the renderers manage their own cache instead of managing the source cache\r\n    /**\r\n     * Here we unconditionally expire the source cache since the renderer maintains\r\n     * its own cache.\r\n     * @param {import(\"../../Map.js\").default} map Map.\r\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n     */\r\n    const postRenderFunction = function (map, frameState) {\r\n      tileSource.updateCacheSize(0.1, frameState.viewState.projection);\r\n      tileSource.expireCache(frameState.viewState.projection, empty);\r\n    };\r\n\r\n    frameState.postRenderFunctions.push(postRenderFunction);\r\n\r\n    this.postRender(gl, frameState);\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Look for tiles covering the provided tile coordinate at an alternate\r\n   * zoom level.  Loaded tiles will be added to the provided tile representation lookup.\r\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\r\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\r\n   * @param {number} altZ The alternate zoom level.\r\n   * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of\r\n   * tile representations by zoom level.\r\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\r\n   * @private\r\n   */\r\n  findAltTiles_(tileGrid, tileCoord, altZ, tileRepresentationLookup) {\r\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\r\n      tileCoord,\r\n      altZ,\r\n      this.tempTileRange_\r\n    );\r\n\r\n    if (!tileRange) {\r\n      return false;\r\n    }\r\n\r\n    let covered = true;\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n    const source = this.getLayer().getRenderSource();\r\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n        const cacheKey = getCacheKey(source, [altZ, x, y]);\r\n        let loaded = false;\r\n        if (tileRepresentationCache.containsKey(cacheKey)) {\r\n          const tileRepresentation = tileRepresentationCache.get(cacheKey);\r\n          if (\r\n            tileRepresentation.loaded &&\r\n            !lookupHasTile(tileRepresentationLookup, tileRepresentation.tile)\r\n          ) {\r\n            addTileRepresentationToLookup(\r\n              tileRepresentationLookup,\r\n              tileRepresentation,\r\n              altZ\r\n            );\r\n            loaded = true;\r\n          }\r\n        }\r\n        if (!loaded) {\r\n          covered = false;\r\n        }\r\n      }\r\n    }\r\n    return covered;\r\n  }\r\n\r\n  clearCache() {\r\n    const tileRepresentationCache = this.tileRepresentationCache;\r\n    tileRepresentationCache.forEach((tileRepresentation) =>\r\n      tileRepresentation.dispose()\r\n    );\r\n    tileRepresentationCache.clear();\r\n  }\r\n\r\n  removeHelper() {\r\n    if (this.helper) {\r\n      this.clearCache();\r\n    }\r\n\r\n    super.removeHelper();\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    super.disposeInternal();\r\n    delete this.frameState;\r\n  }\r\n}\r\n\r\nexport default WebGLBaseTileLayerRenderer;\r\n", "/**\r\n * @module ol/renderer/webgl/TileLayer\r\n */\r\nimport ReprojDataTile from '../../reproj/DataTile.js';\r\nimport ReprojTile from '../../reproj/Tile.js';\r\nimport TileState from '../../TileState.js';\r\nimport TileTexture from '../../webgl/TileTexture.js';\r\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\r\nimport WebGLBaseTileLayerRenderer, {\r\n  Uniforms as BaseUniforms,\r\n  getCacheKey,\r\n} from './TileLayerBase.js';\r\nimport {AttributeType} from '../../webgl/Helper.js';\r\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\r\nimport {apply as applyTransform} from '../../transform.js';\r\nimport {\r\n  boundingExtent,\r\n  containsCoordinate,\r\n  getIntersection,\r\n} from '../../extent.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\nimport {fromTransform as mat4FromTransform} from '../../vec/mat4.js';\r\nimport {toSize} from '../../size.js';\r\n\r\nexport const Uniforms = {\r\n  ...BaseUniforms,\r\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\r\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\r\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\r\n  TEXTURE_RESOLUTION: 'u_textureResolution', // map units per texture pixel\r\n  TEXTURE_ORIGIN_X: 'u_textureOriginX', // map x coordinate of left edge of texture\r\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY', // map y coordinate of top edge of texture\r\n};\r\n\r\nexport const Attributes = {\r\n  TEXTURE_COORD: 'a_textureCoord',\r\n};\r\n\r\n/**\r\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\r\n */\r\nconst attributeDescriptions = [\r\n  {\r\n    name: Attributes.TEXTURE_COORD,\r\n    size: 2,\r\n    type: AttributeType.FLOAT,\r\n  },\r\n];\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} vertexShader Vertex shader source.\r\n * @property {string} fragmentShader Fragment shader source.\r\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\r\n * made available to shaders.\r\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\r\n * @property {number} [cacheSize=512] The texture cache size.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../layer/WebGLTile.js\").default} LayerType\r\n */\r\n/**\r\n * @typedef {import(\"../../webgl/TileTexture.js\").TileType} TileTextureType\r\n */\r\n/**\r\n * @typedef {import(\"../../webgl/TileTexture.js\").default} TileTextureRepresentation\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * WebGL renderer for tile layers.\r\n * @extends {WebGLBaseTileLayerRenderer<LayerType, TileTextureType, TileTextureRepresentation>}\r\n * @api\r\n */\r\nclass WebGLTileLayerRenderer extends WebGLBaseTileLayerRenderer {\r\n  /**\r\n   * @param {LayerType} tileLayer Tile layer.\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(tileLayer, options) {\r\n    super(tileLayer, options);\r\n\r\n    /**\r\n     * @type {WebGLProgram}\r\n     * @private\r\n     */\r\n    this.program_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.vertexShader_ = options.vertexShader;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.fragmentShader_ = options.fragmentShader;\r\n\r\n    /**\r\n     * Tiles are rendered as a quad with the following structure:\r\n     *\r\n     *  [P3]---------[P2]\r\n     *   |`           |\r\n     *   |  `     B   |\r\n     *   |    `       |\r\n     *   |      `     |\r\n     *   |   A    `   |\r\n     *   |          ` |\r\n     *  [P0]---------[P1]\r\n     *\r\n     * Triangle A: P0, P1, P3\r\n     * Triangle B: P1, P2, P3\r\n     *\r\n     * @private\r\n     */\r\n    this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\r\n    this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\r\n\r\n    /**\r\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\r\n     * @private\r\n     */\r\n    this.paletteTextures_ = options.paletteTextures || [];\r\n  }\r\n\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  reset(options) {\r\n    super.reset(options);\r\n\r\n    this.vertexShader_ = options.vertexShader;\r\n    this.fragmentShader_ = options.fragmentShader;\r\n\r\n    if (this.helper) {\r\n      this.program_ = this.helper.getProgram(\r\n        this.fragmentShader_,\r\n        this.vertexShader_\r\n      );\r\n    }\r\n  }\r\n\r\n  afterHelperCreated() {\r\n    this.program_ = this.helper.getProgram(\r\n      this.fragmentShader_,\r\n      this.vertexShader_\r\n    );\r\n    this.helper.flushBufferData(this.indices_);\r\n  }\r\n\r\n  createTileRepresentation(options) {\r\n    return new TileTexture(options);\r\n  }\r\n\r\n  beforeTilesRender(frameState, tilesWithAlpha) {\r\n    super.beforeTilesRender(frameState, tilesWithAlpha);\r\n    this.helper.useProgram(this.program_, frameState);\r\n  }\r\n\r\n  renderTile(\r\n    tileTexture,\r\n    tileTransform,\r\n    frameState,\r\n    renderExtent,\r\n    tileResolution,\r\n    tileSize,\r\n    tileOrigin,\r\n    tileExtent,\r\n    depth,\r\n    gutter,\r\n    alpha\r\n  ) {\r\n    const gl = this.helper.getGL();\r\n    this.helper.bindBuffer(tileTexture.coords);\r\n    this.helper.bindBuffer(this.indices_);\r\n    this.helper.enableAttributes(attributeDescriptions);\r\n\r\n    let textureSlot = 0;\r\n    while (textureSlot < tileTexture.textures.length) {\r\n      const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;\r\n      this.helper.bindTexture(\r\n        tileTexture.textures[textureSlot],\r\n        textureSlot,\r\n        uniformName\r\n      );\r\n      ++textureSlot;\r\n    }\r\n\r\n    for (\r\n      let paletteIndex = 0;\r\n      paletteIndex < this.paletteTextures_.length;\r\n      ++paletteIndex\r\n    ) {\r\n      const paletteTexture = this.paletteTextures_[paletteIndex];\r\n      const texture = paletteTexture.getTexture(gl);\r\n      this.helper.bindTexture(texture, textureSlot, paletteTexture.name);\r\n      ++textureSlot;\r\n    }\r\n\r\n    const viewState = frameState.viewState;\r\n\r\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\r\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\r\n\r\n    const tile = tileTexture.tile;\r\n    const tileCoord = tile.tileCoord;\r\n\r\n    const tileCenterI = tileCoord[1];\r\n    const tileCenterJ = tileCoord[2];\r\n\r\n    this.helper.setUniformMatrixValue(\r\n      Uniforms.TILE_TRANSFORM,\r\n      mat4FromTransform(this.tempMat4, tileTransform)\r\n    );\r\n\r\n    this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\r\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\r\n\r\n    let gutterExtent = renderExtent;\r\n    if (gutter > 0) {\r\n      gutterExtent = tileExtent;\r\n      getIntersection(gutterExtent, renderExtent, gutterExtent);\r\n    }\r\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);\r\n\r\n    this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\r\n    this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\r\n\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_PIXEL_WIDTH,\r\n      tileWidthWithGutter\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_PIXEL_HEIGHT,\r\n      tileHeightWithGutter\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_RESOLUTION,\r\n      tileResolution\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_ORIGIN_X,\r\n      tileOrigin[0] +\r\n        tileCenterI * tileSize[0] * tileResolution -\r\n        gutter * tileResolution\r\n    );\r\n    this.helper.setUniformFloatValue(\r\n      Uniforms.TEXTURE_ORIGIN_Y,\r\n      tileOrigin[1] -\r\n        tileCenterJ * tileSize[1] * tileResolution +\r\n        gutter * tileResolution\r\n    );\r\n\r\n    this.helper.drawElements(0, this.indices_.getSize());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\r\n   */\r\n  getData(pixel) {\r\n    const gl = this.helper.getGL();\r\n    if (!gl) {\r\n      return null;\r\n    }\r\n\r\n    const frameState = this.frameState;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const coordinate = applyTransform(\r\n      frameState.pixelToCoordinateTransform,\r\n      pixel.slice()\r\n    );\r\n\r\n    const viewState = frameState.viewState;\r\n    const layerExtent = layer.getExtent();\r\n    if (layerExtent) {\r\n      if (\r\n        !containsCoordinate(\r\n          fromUserExtent(layerExtent, viewState.projection),\r\n          coordinate\r\n        )\r\n      ) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // determine last source suitable for rendering at coordinate\r\n    const sources = layer.getSources(\r\n      boundingExtent([coordinate]),\r\n      viewState.resolution\r\n    );\r\n    let i, source, tileGrid;\r\n    for (i = sources.length - 1; i >= 0; --i) {\r\n      source = sources[i];\r\n      if (source.getState() === 'ready') {\r\n        tileGrid = source.getTileGridForProjection(viewState.projection);\r\n        if (source.getWrapX()) {\r\n          break;\r\n        }\r\n        const gridExtent = tileGrid.getExtent();\r\n        if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (i < 0) {\r\n      return null;\r\n    }\r\n\r\n    const tileTextureCache = this.tileRepresentationCache;\r\n    for (\r\n      let z = tileGrid.getZForResolution(viewState.resolution);\r\n      z >= tileGrid.getMinZoom();\r\n      --z\r\n    ) {\r\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\r\n      const cacheKey = getCacheKey(source, tileCoord);\r\n      if (!tileTextureCache.containsKey(cacheKey)) {\r\n        continue;\r\n      }\r\n      const tileTexture = tileTextureCache.get(cacheKey);\r\n      const tile = tileTexture.tile;\r\n      if (\r\n        (tile instanceof ReprojTile || tile instanceof ReprojDataTile) &&\r\n        tile.getState() === TileState.EMPTY\r\n      ) {\r\n        return null;\r\n      }\r\n      if (!tileTexture.loaded) {\r\n        continue;\r\n      }\r\n      const tileOrigin = tileGrid.getOrigin(z);\r\n      const tileSize = toSize(tileGrid.getTileSize(z));\r\n      const tileResolution = tileGrid.getResolution(z);\r\n\r\n      const col =\r\n        (coordinate[0] - tileOrigin[0]) / tileResolution -\r\n        tileCoord[1] * tileSize[0];\r\n\r\n      const row =\r\n        (tileOrigin[1] - coordinate[1]) / tileResolution -\r\n        tileCoord[2] * tileSize[1];\r\n\r\n      return tileTexture.getPixelData(col, row);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    const helper = this.helper;\r\n    if (helper) {\r\n      const gl = helper.getGL();\r\n      gl.deleteProgram(this.program_);\r\n      delete this.program_;\r\n      helper.deleteBuffer(this.indices_);\r\n    }\r\n    super.disposeInternal();\r\n    delete this.indices_;\r\n  }\r\n}\r\n\r\nexport default WebGLTileLayerRenderer;\r\n", "/**\r\n * Operators and utilities used for style expressions\r\n * @module ol/style/expressions\r\n */\r\n\r\nimport PaletteTexture from '../webgl/PaletteTexture.js';\r\nimport {Uniforms} from '../renderer/webgl/TileLayer.js';\r\nimport {asArray, fromString, isStringColor} from '../color.js';\r\n\r\n/**\r\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\r\n * which in turns takes {@link import(\"./expressions.js\").ExpressionValue} arguments.\r\n *\r\n * The following operators can be used:\r\n *\r\n * * Reading operators:\r\n *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\r\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\r\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\r\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\r\n *     of bands, depending on the underlying data source and\r\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\r\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels.\r\n *   * `['get', 'attributeName', typeHint]` fetches a feature property value, similar to `feature.get('attributeName')`\r\n *     A type hint can optionally be specified, in case the resulting expression contains a type ambiguity which\r\n *     will make it invalid. Type hints can be one of: 'string', 'color', 'number', 'boolean', 'number[]'\r\n *   * `['geometry-type']` returns a feature's geometry type as string, either: 'LineString', 'Point' or 'Polygon'\r\n *     `Multi*` values are returned as their singular equivalent\r\n *     `Circle` geometries are returned as 'Polygon'\r\n *     `GeometryCollection` geometries are returned as the type of the first geometry found in the collection\r\n *   * `['resolution']` returns the current resolution\r\n *   * `['time']` returns the time in seconds since the creation of the layer\r\n *   * `['var', 'varName']` fetches a value from the style variables; will throw an error if that variable is undefined\r\n *   * `['zoom']` returns the current zoom level\r\n *\r\n * * Math operators:\r\n *   * `['*', value1, value2, ...]` multiplies the values (either numbers or colors)\r\n *   * `['/', value1, value2]` divides `value1` by `value2`\r\n *   * `['+', value1, value2, ...]` adds the values\r\n *   * `['-', value1, value2]` subtracts `value2` from `value1`\r\n *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`\r\n *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\r\n *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\r\n *   * `['abs', value1]` returns the absolute value of `value1`\r\n *   * `['floor', value1]` returns the nearest integer less than or equal to `value1`\r\n *   * `['round', value1]` returns the nearest integer to `value1`\r\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\r\n *   * `['sin', value1]` returns the sine of `value1`\r\n *   * `['cos', value1]` returns the cosine of `value1`\r\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\r\n *   * `['sqrt', value1]` returns the square root of `value1`\r\n *\r\n * * Transform operators:\r\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\r\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\r\n *     All conditions should be `boolean`, output and fallback can be any kind.\r\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\r\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\r\n *     returns the `fallback` value.\r\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\r\n *     `fallback` values must be of the same type, and can be of any kind.\r\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\r\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\r\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\r\n *     of 1 is equivalent to `['linear']`.\r\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\r\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\r\n *     between `output1` and `outputN`.\r\n *\r\n * * Logical operators:\r\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\r\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\r\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\r\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\r\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\r\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\r\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\r\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\r\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\r\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\r\n *     (inclusively), or `false` otherwise.\r\n *   * `['in', needle, haystack]` returns `true` if `needle` is found in `haystack`, and\r\n *     `false` otherwise.\r\n *     This operator has the following limitations:\r\n *     * `haystack` has to be an array of numbers or strings (searching for a substring in a string is not supported yet)\r\n *     * Only literal arrays are supported as `haystack` for now; this means that `haystack` cannot be the result of an\r\n *     expression. If `haystack` is an array of strings, use the `literal` operator to disambiguate from an expression:\r\n *     `['literal', ['abc', 'def', 'ghi']]`\r\n *\r\n * * Conversion operators:\r\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\r\n *     values can currently only be 2, 3 or 4.\r\n *   * `['color', red, green, blue, alpha]` creates a `color` value from `number` values; the `alpha` parameter is\r\n *     optional; if not specified, it will be set to 1.\r\n *     Note: `red`, `green` and `blue` components must be values between 0 and 255; `alpha` between 0 and 1.\r\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\r\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\r\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\r\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\r\n *     in the 0-255 range and a in the 0-1 range).\r\n *\r\n * Values can either be literals or another operator, as they will be evaluated recursively.\r\n * Literal values can be of the following types:\r\n * * `boolean`\r\n * * `number`\r\n * * `number[]` (number arrays can only have a length of 2, 3 or 4)\r\n * * `string`\r\n * * {@link module:ol/color~Color}\r\n *\r\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\r\n * @api\r\n */\r\n\r\n/**\r\n * Possible inferred types from a given value or expression.\r\n * Note: these are binary flags.\r\n * @enum {number}\r\n */\r\nexport const ValueTypes = {\r\n  NUMBER: 0b00001,\r\n  STRING: 0b00010,\r\n  COLOR: 0b00100,\r\n  BOOLEAN: 0b01000,\r\n  NUMBER_ARRAY: 0b10000,\r\n  ANY: 0b11111,\r\n  NONE: 0,\r\n};\r\n\r\n/**\r\n * @param {string} typeHint Type hint\r\n * @return {ValueTypes} Resulting value type (will be a single type)\r\n */\r\nfunction getTypeFromHint(typeHint) {\r\n  switch (typeHint) {\r\n    case 'string':\r\n      return ValueTypes.STRING;\r\n    case 'color':\r\n      return ValueTypes.COLOR;\r\n    case 'number':\r\n      return ValueTypes.NUMBER;\r\n    case 'boolean':\r\n      return ValueTypes.BOOLEAN;\r\n    case 'number[]':\r\n      return ValueTypes.NUMBER_ARRAY;\r\n    default:\r\n      throw new Error(`Unrecognized type hint: ${typeHint}`);\r\n  }\r\n}\r\n\r\n/**\r\n * An operator declaration must contain two methods: `getReturnType` which returns a type based on\r\n * the operator arguments, and `toGlsl` which returns a GLSL-compatible string.\r\n * Note: both methods can process arguments recursively.\r\n * @typedef {Object} Operator\r\n * @property {function(Array<ExpressionValue>): ValueTypes|number} getReturnType Returns one or several types\r\n * @property {function(ParsingContext, Array<ExpressionValue>, ValueTypes): string} toGlsl Returns a GLSL-compatible string\r\n * given a parsing context, an array of arguments and an expected type.\r\n * Note: the expected type can be a combination such as ValueTypes.NUMBER | ValueTypes.STRING or ValueTypes.ANY for instance\r\n */\r\n\r\n/**\r\n * Operator declarations\r\n * @type {Object<string, Operator>}\r\n */\r\nexport const Operators = {};\r\n\r\n/**\r\n * Returns the possible types for a given value (each type being a binary flag)\r\n * To test a value use e.g. `getValueType(v) & ValueTypes.BOOLEAN`\r\n * @param {ExpressionValue} value Value\r\n * @return {ValueTypes|number} Type or types inferred from the value\r\n */\r\nexport function getValueType(value) {\r\n  if (typeof value === 'number') {\r\n    return ValueTypes.NUMBER;\r\n  }\r\n  if (typeof value === 'boolean') {\r\n    return ValueTypes.BOOLEAN;\r\n  }\r\n  if (typeof value === 'string') {\r\n    if (isStringColor(value)) {\r\n      return ValueTypes.COLOR | ValueTypes.STRING;\r\n    }\r\n    return ValueTypes.STRING;\r\n  }\r\n  if (!Array.isArray(value)) {\r\n    throw new Error(`Unhandled value type: ${JSON.stringify(value)}`);\r\n  }\r\n  const valueArr = /** @type {Array<*>} */ (value);\r\n  const onlyNumbers = valueArr.every(function (v) {\r\n    return typeof v === 'number';\r\n  });\r\n  if (onlyNumbers) {\r\n    if (valueArr.length === 3 || valueArr.length === 4) {\r\n      return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;\r\n    }\r\n    return ValueTypes.NUMBER_ARRAY;\r\n  }\r\n  if (typeof valueArr[0] !== 'string') {\r\n    throw new Error(\r\n      `Expected an expression operator but received: ${JSON.stringify(\r\n        valueArr\r\n      )}`\r\n    );\r\n  }\r\n  const operator = Operators[valueArr[0]];\r\n  if (operator === undefined) {\r\n    throw new Error(\r\n      `Unrecognized expression operator: ${JSON.stringify(valueArr)}`\r\n    );\r\n  }\r\n  return operator.getReturnType(valueArr.slice(1));\r\n}\r\n\r\n/**\r\n * Checks if only one value type is enabled in the input number.\r\n * @param {ValueTypes|number} valueType Number containing value type binary flags\r\n * @return {boolean} True if only one type flag is enabled, false if zero or multiple\r\n */\r\nexport function isTypeUnique(valueType) {\r\n  return Math.log2(valueType) % 1 === 0;\r\n}\r\n\r\n/**\r\n * Print types as a readable string\r\n * @param {ValueTypes|number} valueType Number containing value type binary flags\r\n * @return {string} Types\r\n */\r\nfunction printTypes(valueType) {\r\n  const result = [];\r\n  if ((valueType & ValueTypes.NUMBER) > 0) {\r\n    result.push('number');\r\n  }\r\n  if ((valueType & ValueTypes.COLOR) > 0) {\r\n    result.push('color');\r\n  }\r\n  if ((valueType & ValueTypes.BOOLEAN) > 0) {\r\n    result.push('boolean');\r\n  }\r\n  if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {\r\n    result.push('number[]');\r\n  }\r\n  if ((valueType & ValueTypes.STRING) > 0) {\r\n    result.push('string');\r\n  }\r\n  return result.length > 0 ? result.join(', ') : '(no type)';\r\n}\r\n\r\n/**\r\n * @typedef {Object} ParsingContextExternal\r\n * @property {string} name Name, unprefixed\r\n * @property {ValueTypes} type One of the value types constants\r\n * @property {function(import(\"../Feature.js\").FeatureLike): *} [callback] Function used for computing the attribute value;\r\n *   if undefined, `feature.get(attribute.name)` will be used\r\n */\r\n\r\n/**\r\n * Context available during the parsing of an expression.\r\n * @typedef {Object} ParsingContext\r\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\r\n * @property {Array<ParsingContextExternal>} variables External variables used in the expression\r\n * @property {Array<ParsingContextExternal>} attributes External attributes used in the expression\r\n * @property {Object<string, string>} functions Lookup of functions used by the style.\r\n * @property {number} [bandCount] Number of bands per pixel.\r\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\r\n * @property {import(\"../style/literal\").LiteralStyle} style The style being parsed\r\n */\r\n\r\n/**\r\n * @param {string} operator Operator\r\n * @param {ParsingContext} context Parsing context\r\n * @return {string} A function name based on the operator, unique in the given context\r\n */\r\nfunction computeOperatorFunctionName(operator, context) {\r\n  return `operator_${operator}_${Object.keys(context.functions).length}`;\r\n}\r\n\r\n/**\r\n * Will return the number as a float with a dot separator, which is required by GLSL.\r\n * @param {number} v Numerical value.\r\n * @return {string} The value as string.\r\n */\r\nexport function numberToGlsl(v) {\r\n  const s = v.toString();\r\n  return s.includes('.') ? s : s + '.0';\r\n}\r\n\r\n/**\r\n * Will return the number array as a float with a dot separator, concatenated with ', '.\r\n * @param {Array<number>} array Numerical values array.\r\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\r\n */\r\nexport function arrayToGlsl(array) {\r\n  if (array.length < 2 || array.length > 4) {\r\n    throw new Error(\r\n      '`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.'\r\n    );\r\n  }\r\n  return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;\r\n}\r\n\r\n/**\r\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\r\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\r\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\r\n * Note that the final array will always have 4 components.\r\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\r\n */\r\nexport function colorToGlsl(color) {\r\n  const array = asArray(color);\r\n  const alpha = array.length > 3 ? array[3] : 1;\r\n  // all components are premultiplied with alpha value\r\n  return arrayToGlsl([\r\n    (array[0] / 255) * alpha,\r\n    (array[1] / 255) * alpha,\r\n    (array[2] / 255) * alpha,\r\n    alpha,\r\n  ]);\r\n}\r\n\r\n/** @type {Object<string, number>} */\r\nconst stringToFloatMap = {};\r\nlet stringToFloatCounter = 0;\r\n\r\n/**\r\n * Returns a stable equivalent number for the string literal.\r\n * @param {string} string String literal value\r\n * @return {number} Number equivalent\r\n */\r\nexport function getStringNumberEquivalent(string) {\r\n  if (!(string in stringToFloatMap)) {\r\n    stringToFloatMap[string] = stringToFloatCounter++;\r\n  }\r\n  return stringToFloatMap[string];\r\n}\r\n\r\n/**\r\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\r\n * converted to be a GLSL-compatible string.\r\n * Note: with a float precision of `mediump`, the amount of unique strings supported is 16,777,216\r\n * @param {string} string String literal value\r\n * @return {string} GLSL-compatible string containing a number\r\n */\r\nexport function stringToGlsl(string) {\r\n  return numberToGlsl(getStringNumberEquivalent(string));\r\n}\r\n\r\n/**\r\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a parsing context that\r\n * will be read and modified during the parsing operation.\r\n * @param {ParsingContext} context Parsing context\r\n * @param {ExpressionValue} value Value\r\n * @param {ValueTypes|number} [expectedType] Expected final type (can be several types combined)\r\n * If omitted, defaults to ValueTypes.NUMBER\r\n * @return {string} GLSL-compatible output\r\n */\r\nexport function expressionToGlsl(context, value, expectedType) {\r\n  const returnType =\r\n    expectedType !== undefined ? expectedType : ValueTypes.NUMBER;\r\n  // operator\r\n  if (Array.isArray(value) && typeof value[0] === 'string') {\r\n    const operator = Operators[value[0]];\r\n    if (operator === undefined) {\r\n      throw new Error(\r\n        `Unrecognized expression operator: ${JSON.stringify(value)}`\r\n      );\r\n    }\r\n    return operator.toGlsl(context, value.slice(1), returnType);\r\n  }\r\n\r\n  const possibleType = getValueType(value) & returnType;\r\n  assertNotEmptyType(value, possibleType, '');\r\n\r\n  if ((possibleType & ValueTypes.NUMBER) > 0) {\r\n    return numberToGlsl(/** @type {number} */ (value));\r\n  }\r\n\r\n  if ((possibleType & ValueTypes.BOOLEAN) > 0) {\r\n    return value.toString();\r\n  }\r\n\r\n  if ((possibleType & ValueTypes.STRING) > 0) {\r\n    return stringToGlsl(value.toString());\r\n  }\r\n\r\n  if ((possibleType & ValueTypes.COLOR) > 0) {\r\n    return colorToGlsl(/** @type {Array<number> | string} */ (value));\r\n  }\r\n\r\n  if ((possibleType & ValueTypes.NUMBER_ARRAY) > 0) {\r\n    return arrayToGlsl(/** @type {Array<number>} */ (value));\r\n  }\r\n\r\n  throw new Error(\r\n    `Unexpected expression ${value} (expected type ${printTypes(returnType)})`\r\n  );\r\n}\r\n\r\nfunction assertNumber(value) {\r\n  if ((getValueType(value) & ValueTypes.NUMBER) === 0) {\r\n    throw new Error(\r\n      `A numeric value was expected, got ${JSON.stringify(value)} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertNumbers(values) {\r\n  for (let i = 0; i < values.length; i++) {\r\n    assertNumber(values[i]);\r\n  }\r\n}\r\nfunction assertString(value) {\r\n  if ((getValueType(value) & ValueTypes.STRING) === 0) {\r\n    throw new Error(\r\n      `A string value was expected, got ${JSON.stringify(value)} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertBoolean(value) {\r\n  if ((getValueType(value) & ValueTypes.BOOLEAN) === 0) {\r\n    throw new Error(\r\n      `A boolean value was expected, got ${JSON.stringify(value)} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertArgsCount(args, count) {\r\n  if (args.length !== count) {\r\n    throw new Error(\r\n      `Exactly ${count} arguments were expected, got ${args.length} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertArgsMinCount(args, count) {\r\n  if (args.length < count) {\r\n    throw new Error(\r\n      `At least ${count} arguments were expected, got ${args.length} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertArgsMaxCount(args, count) {\r\n  if (args.length > count) {\r\n    throw new Error(\r\n      `At most ${count} arguments were expected, got ${args.length} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertArgsEven(args) {\r\n  if (args.length % 2 !== 0) {\r\n    throw new Error(\r\n      `An even amount of arguments was expected, got ${JSON.stringify(\r\n        args\r\n      )} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertArgsOdd(args) {\r\n  if (args.length % 2 === 0) {\r\n    throw new Error(\r\n      `An odd amount of arguments was expected, got ${JSON.stringify(\r\n        args\r\n      )} instead`\r\n    );\r\n  }\r\n}\r\nfunction assertNotEmptyType(args, types, descriptor) {\r\n  if (types === ValueTypes.NONE) {\r\n    throw new Error(\r\n      `No matching type was found for the following expression ${descriptor}: ${JSON.stringify(\r\n        args\r\n      )}`\r\n    );\r\n  }\r\n}\r\nfunction assertSingleType(args, types, descriptor) {\r\n  assertNotEmptyType(args, types, descriptor);\r\n  if (!isTypeUnique(types)) {\r\n    throw new Error(\r\n      `Expected to have a unique type for the following expression ${descriptor}: ${JSON.stringify(\r\n        args\r\n      )}\r\nGot the following types instead: ${printTypes(types)}`\r\n    );\r\n  }\r\n}\r\nfunction assertOfType(args, types, expectedTypes, descriptor) {\r\n  if ((types & expectedTypes) === ValueTypes.NONE) {\r\n    throw new Error(\r\n      `Expected the ${descriptor} type of the following expression: ${JSON.stringify(\r\n        args\r\n      )} to be of the following types: ${printTypes(expectedTypes)}\r\nGot these types instead: ${printTypes(types)}`\r\n    );\r\n  }\r\n}\r\n\r\nOperators['get'] = {\r\n  getReturnType: function (args) {\r\n    if (args.length === 2) {\r\n      const hint = args[1];\r\n      return getTypeFromHint(/** @type {string} */ (hint));\r\n    }\r\n    return ValueTypes.ANY;\r\n  },\r\n  toGlsl: function (context, args, expectedType) {\r\n    assertArgsMinCount(args, 1);\r\n    assertArgsMaxCount(args, 2);\r\n    assertString(args[0]);\r\n    const outputType = expectedType & Operators['get'].getReturnType(args);\r\n    assertSingleType(['get', ...args], outputType, '');\r\n    const name = args[0].toString();\r\n    const existing = context.attributes.find((a) => a.name === name);\r\n    if (!existing) {\r\n      context.attributes.push({\r\n        name: name,\r\n        type: outputType,\r\n      });\r\n    } else if (outputType !== existing.type) {\r\n      throw new Error(\r\n        `The following attribute was used in different places with incompatible types: ${name}\r\nTypes were: ${printTypes(existing.type)} and ${printTypes(outputType)}`\r\n      );\r\n    }\r\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\r\n    return prefix + name;\r\n  },\r\n};\r\n\r\n/**\r\n * Get the uniform name given a variable name.\r\n * @param {string} variableName The variable name.\r\n * @return {string} The uniform name.\r\n */\r\nexport function uniformNameForVariable(variableName) {\r\n  return 'u_var_' + variableName;\r\n}\r\n\r\nOperators['var'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.ANY;\r\n  },\r\n  toGlsl: function (context, args, expectedType) {\r\n    assertArgsCount(args, 1);\r\n    assertString(args[0]);\r\n    const name = args[0].toString();\r\n    if (\r\n      !context.style.variables ||\r\n      context.style.variables[name] === undefined\r\n    ) {\r\n      throw new Error(\r\n        `The following variable is missing from the style: ${name}`\r\n      );\r\n    }\r\n    const initialValue = context.style.variables[name];\r\n    const outputType = expectedType & getValueType(initialValue);\r\n    assertSingleType(['var', ...args], outputType, '');\r\n    const existing = context.variables.find((a) => a.name === name);\r\n    if (!existing) {\r\n      context.variables.push({\r\n        name: name,\r\n        type: outputType,\r\n      });\r\n    } else if (outputType !== existing.type) {\r\n      throw new Error(\r\n        `The following variable was used in different places with incompatible types: ${name}\r\nTypes were: ${printTypes(existing.type)} and ${printTypes(outputType)}`\r\n      );\r\n    }\r\n    return uniformNameForVariable(name);\r\n  },\r\n};\r\n\r\nexport const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';\r\n\r\n// ['palette', index, colors]\r\nOperators['palette'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.COLOR;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumber(args[0]);\r\n    const index = expressionToGlsl(context, args[0]);\r\n    const colors = args[1];\r\n    if (!Array.isArray(colors)) {\r\n      throw new Error('The second argument of palette must be an array');\r\n    }\r\n    const numColors = colors.length;\r\n    const palette = new Uint8Array(numColors * 4);\r\n    for (let i = 0; i < numColors; i++) {\r\n      const candidate = colors[i];\r\n      /**\r\n       * @type {import('../color.js').Color}\r\n       */\r\n      let color;\r\n      if (typeof candidate === 'string') {\r\n        color = fromString(candidate);\r\n      } else {\r\n        if (!Array.isArray(candidate)) {\r\n          throw new Error(\r\n            'The second argument of palette must be an array of strings or colors'\r\n          );\r\n        }\r\n        const length = candidate.length;\r\n        if (length === 4) {\r\n          color = candidate;\r\n        } else {\r\n          if (length !== 3) {\r\n            throw new Error(\r\n              `Expected palette color to have 3 or 4 values, got ${length}`\r\n            );\r\n          }\r\n          color = [candidate[0], candidate[1], candidate[2], 1];\r\n        }\r\n      }\r\n      const offset = i * 4;\r\n      palette[offset] = color[0];\r\n      palette[offset + 1] = color[1];\r\n      palette[offset + 2] = color[2];\r\n      palette[offset + 3] = color[3] * 255;\r\n    }\r\n    if (!context.paletteTextures) {\r\n      context.paletteTextures = [];\r\n    }\r\n    const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;\r\n    const paletteTexture = new PaletteTexture(paletteName, palette);\r\n    context.paletteTextures.push(paletteTexture);\r\n    return `texture2D(${paletteName}, vec2((${index} + 0.5) / ${numColors}.0, 0.5))`;\r\n  },\r\n};\r\n\r\nconst GET_BAND_VALUE_FUNC = 'getBandValue';\r\n\r\nOperators['band'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsMinCount(args, 1);\r\n    assertArgsMaxCount(args, 3);\r\n    const band = args[0];\r\n\r\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\r\n      let ifBlocks = '';\r\n      const bandCount = context.bandCount || 1;\r\n      for (let i = 0; i < bandCount; i++) {\r\n        const colorIndex = Math.floor(i / 4);\r\n        let bandIndex = i % 4;\r\n        if (i === bandCount - 1 && bandIndex === 1) {\r\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\r\n          bandIndex = 3;\r\n        }\r\n        const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;\r\n        ifBlocks += `\r\n          if (band == ${i + 1}.0) {\r\n            return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];\r\n          }\r\n        `;\r\n      }\r\n\r\n      context.functions[GET_BAND_VALUE_FUNC] = `\r\n        float getBandValue(float band, float xOffset, float yOffset) {\r\n          float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};\r\n          float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};\r\n          ${ifBlocks}\r\n        }\r\n      `;\r\n    }\r\n\r\n    const bandExpression = expressionToGlsl(context, band);\r\n    const xOffsetExpression = expressionToGlsl(context, args[1] || 0);\r\n    const yOffsetExpression = expressionToGlsl(context, args[2] || 0);\r\n    return `${GET_BAND_VALUE_FUNC}(${bandExpression}, ${xOffsetExpression}, ${yOffsetExpression})`;\r\n  },\r\n};\r\n\r\nOperators['time'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 0);\r\n    return 'u_time';\r\n  },\r\n};\r\n\r\nOperators['zoom'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 0);\r\n    return 'u_zoom';\r\n  },\r\n};\r\n\r\nOperators['resolution'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 0);\r\n    return 'u_resolution';\r\n  },\r\n};\r\n\r\nOperators['geometry-type'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.STRING;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 0);\r\n    const name = 'geometryType';\r\n    const computeType = (geometry) => {\r\n      const type = geometry.getType();\r\n      switch (type) {\r\n        case 'Point':\r\n        case 'LineString':\r\n        case 'Polygon':\r\n          return type;\r\n        case 'MultiPoint':\r\n        case 'MultiLineString':\r\n        case 'MultiPolygon':\r\n          return type.substring(5);\r\n        case 'Circle':\r\n          return 'Polygon';\r\n        case 'GeometryCollection':\r\n          return computeType(geometry.getGeometries()[0]);\r\n        default:\r\n      }\r\n    };\r\n    const existing = context.attributes.find((a) => a.name === name);\r\n    if (!existing) {\r\n      context.attributes.push({\r\n        name: name,\r\n        type: ValueTypes.STRING,\r\n        callback: (feature) => {\r\n          return computeType(feature.getGeometry());\r\n        },\r\n      });\r\n    }\r\n    const prefix = context.inFragmentShader ? 'v_' : 'a_';\r\n    return prefix + name;\r\n  },\r\n};\r\n\r\nOperators['*'] = {\r\n  getReturnType: function (args) {\r\n    let outputType = ValueTypes.NUMBER | ValueTypes.COLOR;\r\n    for (let i = 0; i < args.length; i++) {\r\n      outputType = outputType & getValueType(args[i]);\r\n    }\r\n    return outputType;\r\n  },\r\n  toGlsl: function (context, args, expectedType) {\r\n    assertArgsMinCount(args, 2);\r\n    let outputType = expectedType;\r\n    for (let i = 0; i < args.length; i++) {\r\n      outputType = outputType & getValueType(args[i]);\r\n    }\r\n    assertOfType(\r\n      args,\r\n      outputType,\r\n      ValueTypes.NUMBER | ValueTypes.COLOR,\r\n      'output'\r\n    );\r\n    return `(${args\r\n      .map((arg) => expressionToGlsl(context, arg, outputType))\r\n      .join(' * ')})`;\r\n  },\r\n};\r\n\r\nOperators['/'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `(${expressionToGlsl(context, args[0])} / ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nOperators['+'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsMinCount(args, 2);\r\n    assertNumbers(args);\r\n    return `(${args.map((arg) => expressionToGlsl(context, arg)).join(' + ')})`;\r\n  },\r\n};\r\n\r\nOperators['-'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `(${expressionToGlsl(context, args[0])} - ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nOperators['clamp'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 3);\r\n    assertNumbers(args);\r\n    const min = expressionToGlsl(context, args[1]);\r\n    const max = expressionToGlsl(context, args[2]);\r\n    return `clamp(${expressionToGlsl(context, args[0])}, ${min}, ${max})`;\r\n  },\r\n};\r\n\r\nOperators['%'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `mod(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nOperators['^'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `pow(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nOperators['abs'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertNumbers(args);\r\n    return `abs(${expressionToGlsl(context, args[0])})`;\r\n  },\r\n};\r\n\r\nOperators['floor'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertNumbers(args);\r\n    return `floor(${expressionToGlsl(context, args[0])})`;\r\n  },\r\n};\r\n\r\nOperators['round'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertNumbers(args);\r\n    return `floor(${expressionToGlsl(context, args[0])} + 0.5)`;\r\n  },\r\n};\r\n\r\nOperators['ceil'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertNumbers(args);\r\n    return `ceil(${expressionToGlsl(context, args[0])})`;\r\n  },\r\n};\r\n\r\nOperators['sin'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertNumbers(args);\r\n    return `sin(${expressionToGlsl(context, args[0])})`;\r\n  },\r\n};\r\n\r\nOperators['cos'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertNumbers(args);\r\n    return `cos(${expressionToGlsl(context, args[0])})`;\r\n  },\r\n};\r\n\r\nOperators['atan'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsMinCount(args, 1);\r\n    assertArgsMaxCount(args, 2);\r\n    assertNumbers(args);\r\n    return args.length === 2\r\n      ? `atan(${expressionToGlsl(context, args[0])}, ${expressionToGlsl(\r\n          context,\r\n          args[1]\r\n        )})`\r\n      : `atan(${expressionToGlsl(context, args[0])})`;\r\n  },\r\n};\r\n\r\nOperators['sqrt'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertNumbers(args);\r\n    return `sqrt(${expressionToGlsl(context, args[0])})`;\r\n  },\r\n};\r\n\r\nOperators['>'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.BOOLEAN;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `(${expressionToGlsl(context, args[0])} > ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nOperators['>='] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.BOOLEAN;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `(${expressionToGlsl(context, args[0])} >= ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nOperators['<'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.BOOLEAN;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `(${expressionToGlsl(context, args[0])} < ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nOperators['<='] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.BOOLEAN;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    assertNumbers(args);\r\n    return `(${expressionToGlsl(context, args[0])} <= ${expressionToGlsl(\r\n      context,\r\n      args[1]\r\n    )})`;\r\n  },\r\n};\r\n\r\nfunction getEqualOperator(operator) {\r\n  return {\r\n    getReturnType: function () {\r\n      return ValueTypes.BOOLEAN;\r\n    },\r\n    toGlsl: function (context, args) {\r\n      assertArgsCount(args, 2);\r\n\r\n      // find common type\r\n      let type = ValueTypes.ANY;\r\n      for (let i = 0; i < args.length; i++) {\r\n        type &= getValueType(args[i]);\r\n      }\r\n      if (type === ValueTypes.NONE) {\r\n        throw new Error(\r\n          `All arguments should be of compatible type, got ${JSON.stringify(\r\n            args\r\n          )} instead`\r\n        );\r\n      }\r\n\r\n      // Since it's not possible to have color types here, we can leave it out\r\n      // This fixes issues in case the value type is ambiguously detected as a color (e.g. the string 'red')\r\n      type &= ~ValueTypes.COLOR;\r\n\r\n      return `(${expressionToGlsl(\r\n        context,\r\n        args[0],\r\n        type\r\n      )} ${operator} ${expressionToGlsl(context, args[1], type)})`;\r\n    },\r\n  };\r\n}\r\n\r\nOperators['=='] = getEqualOperator('==');\r\n\r\nOperators['!='] = getEqualOperator('!=');\r\n\r\nOperators['!'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.BOOLEAN;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 1);\r\n    assertBoolean(args[0]);\r\n    return `(!${expressionToGlsl(context, args[0], ValueTypes.BOOLEAN)})`;\r\n  },\r\n};\r\n\r\nfunction getDecisionOperator(operator) {\r\n  return {\r\n    getReturnType: function () {\r\n      return ValueTypes.BOOLEAN;\r\n    },\r\n    toGlsl: function (context, args) {\r\n      assertArgsMinCount(args, 2);\r\n      for (let i = 0; i < args.length; i++) {\r\n        assertBoolean(args[i]);\r\n      }\r\n      let result = args\r\n        .map((arg) => expressionToGlsl(context, arg, ValueTypes.BOOLEAN))\r\n        .join(` ${operator} `);\r\n      result = `(${result})`;\r\n      return result;\r\n    },\r\n  };\r\n}\r\n\r\nOperators['all'] = getDecisionOperator('&&');\r\n\r\nOperators['any'] = getDecisionOperator('||');\r\n\r\nOperators['between'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.BOOLEAN;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 3);\r\n    assertNumbers(args);\r\n    const min = expressionToGlsl(context, args[1]);\r\n    const max = expressionToGlsl(context, args[2]);\r\n    const value = expressionToGlsl(context, args[0]);\r\n    return `(${value} >= ${min} && ${value} <= ${max})`;\r\n  },\r\n};\r\n\r\nOperators['array'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.NUMBER_ARRAY;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsMinCount(args, 2);\r\n    assertArgsMaxCount(args, 4);\r\n    assertNumbers(args);\r\n    const parsedArgs = args.map(function (val) {\r\n      return expressionToGlsl(context, val);\r\n    });\r\n    return `vec${args.length}(${parsedArgs.join(', ')})`;\r\n  },\r\n};\r\n\r\nOperators['color'] = {\r\n  getReturnType: function () {\r\n    return ValueTypes.COLOR;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsMinCount(args, 3);\r\n    assertArgsMaxCount(args, 4);\r\n    assertNumbers(args);\r\n    const parsedArgs = args\r\n      .slice(0, 3)\r\n      .map((val) => `${expressionToGlsl(context, val)} / 255.0`);\r\n    if (args.length === 3) {\r\n      return `vec4(${parsedArgs.join(', ')}, 1.0)`;\r\n    }\r\n    const alpha = expressionToGlsl(context, args[3]);\r\n    return `(${alpha} * vec4(${parsedArgs.join(', ')}, 1.0))`;\r\n  },\r\n};\r\n\r\nOperators['interpolate'] = {\r\n  getReturnType: function (args) {\r\n    let type = ValueTypes.COLOR | ValueTypes.NUMBER;\r\n    for (let i = 3; i < args.length; i += 2) {\r\n      type = type & getValueType(args[i]);\r\n    }\r\n    return type;\r\n  },\r\n  toGlsl: function (context, args, expectedType) {\r\n    assertArgsEven(args);\r\n    assertArgsMinCount(args, 6);\r\n\r\n    // validate interpolation type\r\n    const type = args[0];\r\n    let interpolation;\r\n    switch (type[0]) {\r\n      case 'linear':\r\n        interpolation = 1;\r\n        break;\r\n      case 'exponential':\r\n        interpolation = type[1];\r\n        break;\r\n      default:\r\n        interpolation = null;\r\n    }\r\n    if (!interpolation) {\r\n      throw new Error(\r\n        `Invalid interpolation type for \"interpolate\" operator, received: ${JSON.stringify(\r\n          type\r\n        )}`\r\n      );\r\n    }\r\n\r\n    // compute input/output types\r\n    const inputType = ValueTypes.NUMBER;\r\n    const outputType =\r\n      Operators['interpolate'].getReturnType(args) & expectedType;\r\n    assertSingleType(['interpolate', ...args], outputType, 'output');\r\n\r\n    const input = expressionToGlsl(context, args[1], inputType);\r\n    const exponent = numberToGlsl(interpolation);\r\n\r\n    let result = '';\r\n    for (let i = 2; i < args.length - 2; i += 2) {\r\n      const stop1 = expressionToGlsl(context, args[i], inputType);\r\n      const output1 =\r\n        result || expressionToGlsl(context, args[i + 1], outputType);\r\n      const stop2 = expressionToGlsl(context, args[i + 2], inputType);\r\n      const output2 = expressionToGlsl(context, args[i + 3], outputType);\r\n      let ratio;\r\n      if (interpolation === 1) {\r\n        ratio = `(${input} - ${stop1}) / (${stop2} - ${stop1})`;\r\n      } else {\r\n        ratio = `(pow(${exponent}, (${input} - ${stop1})) - 1.0) / (pow(${exponent}, (${stop2} - ${stop1})) - 1.0)`;\r\n      }\r\n      result = `mix(${output1}, ${output2}, clamp(${ratio}, 0.0, 1.0))`;\r\n    }\r\n    return result;\r\n  },\r\n};\r\n\r\nOperators['match'] = {\r\n  getReturnType: function (args) {\r\n    let type = ValueTypes.ANY;\r\n    for (let i = 2; i < args.length; i += 2) {\r\n      type = type & getValueType(args[i]);\r\n    }\r\n    type = type & getValueType(args[args.length - 1]);\r\n    return type;\r\n  },\r\n  toGlsl: function (context, args, expectedType) {\r\n    assertArgsEven(args);\r\n    assertArgsMinCount(args, 4);\r\n\r\n    let inputType = getValueType(args[0]);\r\n    for (let i = 1; i < args.length - 1; i += 2) {\r\n      inputType = inputType & getValueType(args[i]);\r\n    }\r\n    assertOfType(\r\n      ['match', ...args],\r\n      inputType,\r\n      ValueTypes.STRING | ValueTypes.NUMBER | ValueTypes.BOOLEAN,\r\n      'input'\r\n    );\r\n    inputType =\r\n      (ValueTypes.STRING | ValueTypes.NUMBER | ValueTypes.BOOLEAN) & inputType;\r\n\r\n    const outputType = Operators['match'].getReturnType(args) & expectedType;\r\n    assertSingleType(['match', ...args], outputType, 'output');\r\n\r\n    const input = expressionToGlsl(context, args[0], inputType);\r\n    const fallback = expressionToGlsl(\r\n      context,\r\n      args[args.length - 1],\r\n      outputType\r\n    );\r\n    let result = null;\r\n    for (let i = args.length - 3; i >= 1; i -= 2) {\r\n      const match = expressionToGlsl(context, args[i], inputType);\r\n      const output = expressionToGlsl(context, args[i + 1], outputType);\r\n      result = `(${input} == ${match} ? ${output} : ${result || fallback})`;\r\n    }\r\n    return result;\r\n  },\r\n};\r\n\r\nOperators['case'] = {\r\n  getReturnType: function (args) {\r\n    let type = ValueTypes.ANY;\r\n    for (let i = 1; i < args.length; i += 2) {\r\n      type = type & getValueType(args[i]);\r\n    }\r\n    type = type & getValueType(args[args.length - 1]);\r\n    return type;\r\n  },\r\n  toGlsl: function (context, args, expectedType) {\r\n    assertArgsOdd(args);\r\n    assertArgsMinCount(args, 3);\r\n\r\n    const outputType = Operators['case'].getReturnType(args) & expectedType;\r\n    assertSingleType(['case', ...args], outputType, 'output');\r\n    for (let i = 0; i < args.length - 1; i += 2) {\r\n      assertBoolean(args[i]);\r\n    }\r\n\r\n    const fallback = expressionToGlsl(\r\n      context,\r\n      args[args.length - 1],\r\n      outputType\r\n    );\r\n    let result = null;\r\n    for (let i = args.length - 3; i >= 0; i -= 2) {\r\n      const condition = expressionToGlsl(context, args[i], ValueTypes.BOOLEAN);\r\n      const output = expressionToGlsl(context, args[i + 1], outputType);\r\n      result = `(${condition} ? ${output} : ${result || fallback})`;\r\n    }\r\n    return result;\r\n  },\r\n};\r\n\r\nOperators['in'] = {\r\n  getReturnType: function (args) {\r\n    return ValueTypes.BOOLEAN;\r\n  },\r\n  toGlsl: function (context, args) {\r\n    assertArgsCount(args, 2);\r\n    const needle = args[0];\r\n    let haystack = args[1];\r\n    if (!Array.isArray(haystack)) {\r\n      throw new Error(\r\n        `The \"in\" operator expects an array literal as its second argument.`\r\n      );\r\n    }\r\n    if (typeof haystack[0] === 'string') {\r\n      if (haystack[0] !== 'literal') {\r\n        throw new Error(\r\n          `For the \"in\" operator, a string array should be wrapped in a \"literal\" operator to disambiguate from expressions.`\r\n        );\r\n      }\r\n      if (!Array.isArray(haystack[1])) {\r\n        throw new Error(\r\n          `The \"in\" operator was provided a literal value which was not an array as second argument.`\r\n        );\r\n      }\r\n      haystack = haystack[1];\r\n    }\r\n\r\n    let inputType = getValueType(needle);\r\n    for (let i = 0; i < haystack.length - 1; i += 1) {\r\n      inputType = inputType & getValueType(haystack[i]);\r\n    }\r\n    assertOfType(\r\n      ['match', ...args],\r\n      inputType,\r\n      ValueTypes.STRING | ValueTypes.NUMBER | ValueTypes.BOOLEAN,\r\n      'input'\r\n    );\r\n    inputType =\r\n      (ValueTypes.STRING | ValueTypes.NUMBER | ValueTypes.BOOLEAN) & inputType;\r\n\r\n    const funcName = computeOperatorFunctionName('in', context);\r\n    const tests = [];\r\n    for (let i = 0; i < haystack.length; i += 1) {\r\n      tests.push(\r\n        `  if (inputValue == ${expressionToGlsl(\r\n          context,\r\n          haystack[i],\r\n          inputType\r\n        )}) { return true; }`\r\n      );\r\n    }\r\n    context.functions[funcName] = `bool ${funcName}(float inputValue) {\r\n${tests.join('\\n')}\r\n  return false;\r\n}`;\r\n    return `${funcName}(${expressionToGlsl(context, needle, inputType)})`;\r\n  },\r\n};\r\n", "/**\r\n * @module ol/style/flat\r\n */\r\n\r\n/**\r\n * @api\r\n * @fileoverview Vector layers can be styled with an object literal containing properties for\r\n * stroke, fill, image, and text styles.  The types below can be composed into a single object.\r\n * For example, a style with both stroke and fill properties could look like this:\r\n *\r\n *     const style = {\r\n *       'stroke-color': 'yellow',\r\n *       'stroke-width': 1.5,\r\n *       'fill-color': 'orange',\r\n *     };\r\n *\r\n * See details about the available properties depending on what type of symbolizer should be applied:\r\n *  * {@link module:ol/style/flat~FlatStroke Stroke} - properties for applying a stroke to lines and polygons\r\n *  * {@link module:ol/style/flat~FlatFill Fill} - properties for filling polygons\r\n *  * {@link module:ol/style/flat~FlatText Text} - properties for labeling points, lines, and polygons\r\n *  * {@link module:ol/style/flat~FlatIcon Icon} - properties for rendering points with an icon\r\n *  * {@link module:ol/style/flat~FlatCircle Circle} - properties for rendering points with a circle\r\n *  * {@link module:ol/style/flat~FlatShape Shape} - properties for rendering points with a regular shape\r\n *\r\n * To conditionally apply styles based on a filter, a list of {@link module:ol/style/flat~Rule rules} can be used.\r\n * For example, to style points with a big orange circle if the population is greater than 1 million and\r\n * a smaller blue circle otherwise:\r\n *\r\n *     const rules = [\r\n *       {\r\n *         filter: ['>', 'population', 1_000_000],\r\n *         style: {\r\n *           'circle-radius': 10,\r\n *           'circle-color': 'red',\r\n *         }\r\n *       },\r\n *       {\r\n *         else: true,\r\n *         style: {\r\n *           'circle-radius': 5,\r\n *           'circle-color': 'blue',\r\n *        },\r\n *      ];\r\n */\r\n\r\n/**\r\n * A literal boolean (e.g. `true`) or an expression that evaluates to a boolean (e.g. `['>', ['get', 'population'], 1_000_000]`).\r\n *\r\n * @typedef {boolean|Array} BooleanExpression\r\n */\r\n\r\n/**\r\n * A literal string (e.g. `'hello'`) or an expression that evaluates to a string (e.g. `['get', 'greeting']`).\r\n *\r\n * @typedef {string|Array} StringExpression\r\n */\r\n\r\n/**\r\n * A literal number (e.g. `42`) or an expression that evaluates to a number (e.g. `['+', 40, 2]`).\r\n *\r\n * @typedef {number|Array} NumberExpression\r\n */\r\n\r\n/**\r\n * A CSS named color (e.g. `'blue'`), an array of 3 RGB values (e.g. `[0, 255, 0]`), an array of 4 RGBA values\r\n * (e.g. `[0, 255, 0, 0.5]`), or an expression that evaluates to one of these color types (e.g. `['get', 'color']`).\r\n *\r\n * @typedef {import(\"../color.js\").Color|string|Array} ColorExpression\r\n */\r\n\r\n/**\r\n * An array of numbers (e.g. `[1, 2, 3]`) or an expression that evaluates to the same (e.g. `['get', 'values']`).\r\n *\r\n * @typedef {Array<number>|Array} NumberArrayExpression\r\n */\r\n\r\n/**\r\n * An array of two numbers (e.g. `[10, 20]`) or an expression that evaluates to the same (e.g. `['get', 'size']`).\r\n *\r\n * @typedef {number|Array<number>|Array} SizeExpression\r\n */\r\n\r\n/**\r\n * For static styling, the [layer.setStyle()]{@link module:ol/layer/Vector~VectorLayer#setStyle} method\r\n * can be called with an object literal that has fill, stroke, text, icon, regular shape, and/or circle properties.\r\n * @api\r\n *\r\n * @typedef {FlatFill & FlatStroke & FlatText & FlatIcon & FlatShape & FlatCircle} FlatStyle\r\n */\r\n\r\n/**\r\n * A flat style literal or an array of the same.\r\n *\r\n * @typedef {FlatStyle|Array<FlatStyle>|Array<Rule>} FlatStyleLike\r\n */\r\n\r\n/**\r\n * Fill style properties applied to polygon features.\r\n *\r\n * @typedef {Object} FlatFill\r\n * @property {ColorExpression} [fill-color] The fill color.\r\n */\r\n\r\n/**\r\n * Stroke style properties applied to line strings and polygon boundaries.  To apply a stroke, at least one of\r\n * `stroke-color` or `stroke-width` must be provided.\r\n *\r\n * @typedef {Object} FlatStroke\r\n * @property {ColorExpression} [stroke-color] The stroke color.\r\n * @property {NumberExpression} [stroke-width] Stroke pixel width.\r\n * @property {StringExpression} [stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [stroke-miter-limit=10] Miter limit.\r\n * @property {NumberExpression} [z-index] The zIndex of the style.\r\n */\r\n\r\n/**\r\n * Label style properties applied to all features.  At a minimum, a `text-value` must be provided.\r\n *\r\n * @typedef {Object} FlatText\r\n * @property {StringExpression} [text-value] Text content (with `\\n` for line breaks).\r\n * @property {StringExpression} [text-font='10px sans-serif'] Font style as [CSS `font`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font) value.\r\n * @property {NumberExpression} [text-max-angle=Math.PI/4] When `text-placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45\u00B0 (`Math.PI / 4`).\r\n * @property {NumberExpression} [text-offset-x=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {NumberExpression} [text-offset-y=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {BooleanExpression} [text-overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {StringExpression} [text-placement='point'] Text placement.\r\n * @property {NumberExpression} [text-repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available when\r\n * `text-placement` is set to `'line'`. Overrides `text-align`.\r\n * @property {SizeExpression} [text-scale] Scale.\r\n * @property {BooleanExpression} [text-rotate-with-view=false] Whether to rotate the text with the view.\r\n * @property {NumberExpression} [text-rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {StringExpression} [text-align] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `'text-placement': 'point'`. For `'text-placement': 'line'`, the default is to let the renderer choose a\r\n * placement where `text-max-angle` is not exceeded.\r\n * @property {StringExpression} [text-justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `text-justify` is ignored for immediate rendering and also for `'text-placement': 'line'`.\r\n * @property {StringExpression} [text-baseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {NumberArrayExpression} [text-padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n * @property {ColorExpression} [text-fill-color] The fill color. Specify `'none'` to avoid hit detection on the fill.\r\n * @property {ColorExpression} [text-background-fill-color] The fill color.\r\n * @property {ColorExpression} [text-stroke-color] The stroke color.\r\n * @property {StringExpression} [text-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [text-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [text-stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [text-stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [text-stroke-miter-limit=10] Miter limit.\r\n * @property {NumberExpression} [text-stroke-width] Stroke pixel width.\r\n * @property {ColorExpression} [text-background-stroke-color] The stroke color.\r\n * @property {StringExpression} [text-background-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [text-background-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [text-background-stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [text-background-stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [text-background-stroke-miter-limit=10] Miter limit.\r\n * @property {NumberExpression} [text-background-stroke-width] Stroke pixel width.\r\n * @property {NumberExpression} [z-index] The zIndex of the style.\r\n */\r\n\r\n/**\r\n * Icon style properties applied to point features.  One of `icon-src` or `icon-img` must be provided to render\r\n * points with an icon.\r\n *\r\n * @typedef {Object} FlatIcon\r\n * @property {string} [icon-src] Image source URI.\r\n * @property {NumberArrayExpression} [icon-anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {import(\"./Icon.js\").IconOrigin} [icon-anchor-origin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-x-units='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-y-units='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {import(\"../color.js\").Color|string} [icon-color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [icon-cross-origin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `icon-cross-origin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {Array<number>} [icon-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\r\n * sub-rectangle to use from the original icon image.\r\n * @property {NumberArrayExpression} [icon-displacement=[0,0]] Displacement of the icon.\r\n * @property {import(\"./Icon.js\").IconOrigin} [icon-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {NumberExpression} [icon-opacity=1] Opacity of the icon.\r\n * @property {SizeExpression} [icon-scale=1] Scale.\r\n * @property {number} [icon-width] Width of the icon. If not specified, the actual image width will be used. Cannot be combined\r\n * with `scale`.\r\n * @property {number} [icon-height] Height of the icon. If not specified, the actual image height will be used. Cannot be combined\r\n * with `scale`.\r\n * @property {NumberExpression} [icon-rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {BooleanExpression} [icon-rotate-with-view=false] Whether to rotate the icon with the view.\r\n * @property {import(\"../size.js\").Size} [icon-size] Icon size in pixel. Can be used together with `icon-offset` to define the\r\n * sub-rectangle to use from the origin (sprite) icon image.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [icon-declutter-mode] Declutter mode\r\n * @property {NumberExpression} [z-index] The zIndex of the style.\r\n */\r\n\r\n/**\r\n * Regular shape style properties for rendering point features.  At least `shape-points` must be provided.\r\n *\r\n * @typedef {Object} FlatShape\r\n * @property {number} [shape-points] Number of points for stars and regular polygons. In case of a polygon, the number of points\r\n * is the number of sides.\r\n * @property {ColorExpression} [shape-fill-color] The fill color.\r\n * @property {ColorExpression} [shape-stroke-color] The stroke color.\r\n * @property {NumberExpression} [shape-stroke-width] Stroke pixel width.\r\n * @property {StringExpression} [shape-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [shape-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [shape-stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [shape-stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [shape-stroke-miter-limit=10] Miter limit.\r\n * @property {number} [shape-radius] Radius of a regular polygon.\r\n * @property {number} [shape-radius1] First radius of a star. Ignored if radius is set.\r\n * @property {number} [shape-radius2] Second radius of a star.\r\n * @property {number} [shape-angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\r\n * @property {NumberArrayExpression} [shape-displacement=[0,0]] Displacement of the shape\r\n * @property {NumberExpression} [shape-rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {BooleanExpression} [shape-rotate-with-view=false] Whether to rotate the shape with the view.\r\n * @property {SizeExpression} [shape-scale=1] Scale. Unless two dimensional scaling is required a better\r\n * result may be obtained with appropriate settings for `shape-radius`, `shape-radius1` and `shape-radius2`.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [shape-declutter-mode] Declutter mode.\r\n * @property {NumberExpression} [z-index] The zIndex of the style.\r\n */\r\n\r\n/**\r\n * Circle style properties for rendering point features.  At least `circle-radius` must be provided.\r\n *\r\n * @typedef {Object} FlatCircle\r\n * @property {number} [circle-radius] Circle radius.\r\n * @property {ColorExpression} [circle-fill-color] The fill color.\r\n * @property {ColorExpression} [circle-stroke-color] The stroke color.\r\n * @property {NumberExpression} [circle-stroke-width] Stroke pixel width.\r\n * @property {StringExpression} [circle-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {StringExpression} [circle-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {NumberArrayExpression} [circle-stroke-line-dash] Line dash pattern.\r\n * @property {NumberExpression} [circle-stroke-line-dash-offset=0] Line dash offset.\r\n * @property {NumberExpression} [circle-stroke-miter-limit=10] Miter limit.\r\n * @property {NumberArrayExpression} [circle-displacement=[0,0]] displacement\r\n * @property {SizeExpression} [circle-scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `circle-radius`.\r\n * @property {NumberExpression} [circle-rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {BooleanExpression} [circle-rotate-with-view=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [circle-declutter-mode] Declutter mode\r\n * @property {NumberExpression} [z-index] The zIndex of the style.\r\n */\r\n\r\n/**\r\n * These default style properties are applied when no other style is given.\r\n *\r\n * @typedef {Object} DefaultStyle\r\n * @property {string} fill-color `'rgba(255,255,255,0.4)'`\r\n * @property {string} stroke-color `'#3399CC'`\r\n * @property {number} stroke-width `1.25`\r\n * @property {number} circle-radius `5`\r\n * @property {string} circle-fill-color `'rgba(255,255,255,0.4)'`\r\n * @property {number} circle-stroke-width `1.25`\r\n * @property {string} circle-stroke-color `'#3399CC'`\r\n */\r\n\r\n/**\r\n * @return {DefaultStyle} The default flat style.\r\n */\r\nexport function createDefaultStyle() {\r\n  return {\r\n    'fill-color': 'rgba(255,255,255,0.4)',\r\n    'stroke-color': '#3399CC',\r\n    'stroke-width': 1.25,\r\n    'circle-radius': 5,\r\n    'circle-fill-color': 'rgba(255,255,255,0.4)',\r\n    'circle-stroke-width': 1.25,\r\n    'circle-stroke-color': '#3399CC',\r\n  };\r\n}\r\n\r\n/**\r\n * A rule is used to conditionally apply a style.  If the rule's filter evaluates to true,\r\n * the style will be applied.\r\n *\r\n * @typedef {Object} Rule\r\n * @property {FlatStyle|Array<FlatStyle>} style The style to be applied if the filter matches.\r\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\r\n * to determine if a style applies.  If no filter is included, the rule always applies\r\n * (unless it is an else rule).\r\n * @property {boolean} [else] If true, the rule applies only if no other previous rule applies.\r\n * If the else rule also has a filter, the rule will not apply if the filter does not match.\r\n */\r\n", "/**\r\n * Class for generating shaders from literal style objects\r\n * @module ol/webgl/ShaderBuilder\r\n */\r\nimport {colorToGlsl, numberToGlsl, stringToGlsl} from '../style/expressions.js';\r\nimport {createDefaultStyle} from '../style/flat.js';\r\n\r\nconst COMMON_HEADER = `#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\nuniform mat4 u_projectionMatrix;\r\nuniform mat4 u_screenToWorldMatrix;\r\nuniform vec2 u_viewportSizePx;\r\nuniform float u_pixelRatio;\r\nuniform float u_globalAlpha;\r\nuniform float u_time;\r\nuniform float u_zoom;\r\nuniform float u_resolution;\r\nuniform float u_rotation;\r\nuniform vec4 u_renderExtent;\r\nuniform mediump int u_hitDetection;\r\n\r\nconst float PI = 3.141592653589793238;\r\nconst float TWO_PI = 2.0 * PI;\r\n`;\r\n\r\nconst DEFAULT_STYLE = createDefaultStyle();\r\n\r\n/**\r\n * @typedef {Object} VaryingDescription\r\n * @property {string} name Varying name, as will be declared in the header.\r\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\r\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\r\n * passed on to the fragment shader.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * This class implements a classic builder pattern for generating many different types of shaders.\r\n * Methods can be chained, e. g.:\r\n *\r\n * ```js\r\n * const shader = new ShaderBuilder()\r\n *   .addVarying('v_width', 'float', 'a_width')\r\n *   .addUniform('u_time')\r\n *   .setColorExpression('...')\r\n *   .setSymbolSizeExpression('...')\r\n *   .outputSymbolFragmentShader();\r\n * ```\r\n */\r\nexport class ShaderBuilder {\r\n  constructor() {\r\n    /**\r\n     * Uniforms; these will be declared in the header (should include the type).\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.uniforms_ = [];\r\n\r\n    /**\r\n     * Attributes; these will be declared in the header (should include the type).\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.attributes_ = [];\r\n\r\n    /**\r\n     * Varyings with a name, a type and an expression.\r\n     * @type {Array<VaryingDescription>}\r\n     * @private\r\n     */\r\n    this.varyings_ = [];\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasSymbol_ = false;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolSizeExpression_ = `vec2(${numberToGlsl(\r\n      DEFAULT_STYLE['circle-radius']\r\n    )} + ${numberToGlsl(DEFAULT_STYLE['circle-stroke-width'] * 0.5)})`;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolRotationExpression_ = '0.0';\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolOffsetExpression_ = 'vec2(0.0)';\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.symbolColorExpression_ = colorToGlsl(\r\n      /** @type {string} */ (DEFAULT_STYLE['circle-fill-color'])\r\n    );\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.texCoordExpression_ = 'vec4(0.0, 0.0, 1.0, 1.0)';\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.discardExpression_ = 'false';\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.symbolRotateWithView_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasStroke_ = false;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.strokeWidthExpression_ = numberToGlsl(DEFAULT_STYLE['stroke-width']);\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.strokeColorExpression_ = colorToGlsl(\r\n      /** @type {string} */ (DEFAULT_STYLE['stroke-color'])\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeOffsetExpression_ = '0.';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeCapExpression_ = stringToGlsl('round');\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeJoinExpression_ = stringToGlsl('round');\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeMiterLimitExpression_ = '10.';\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.strokeDistanceFieldExpression_ = '-1000.';\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.hasFill_ = false;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.fillColorExpression_ = colorToGlsl(\r\n      /** @type {string} */ (DEFAULT_STYLE['fill-color'])\r\n    );\r\n\r\n    /**\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.vertexShaderFunctions_ = [];\r\n\r\n    /**\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.fragmentShaderFunctions_ = [];\r\n  }\r\n\r\n  /**\r\n   * Adds a uniform accessible in both fragment and vertex shaders.\r\n   * The given name should include a type, such as `sampler2D u_texture`.\r\n   * @param {string} name Uniform name\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  addUniform(name) {\r\n    this.uniforms_.push(name);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\r\n   * The given name should include a type, such as `vec2 a_position`.\r\n   * @param {string} name Attribute name\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  addAttribute(name) {\r\n    this.attributes_.push(name);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\r\n   * The type and expression of the varying have to be specified separately.\r\n   * @param {string} name Varying name\r\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\r\n   * @param {string} expression Expression used to assign a value to the varying.\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  addVarying(name, type, expression) {\r\n    this.varyings_.push({\r\n      name: name,\r\n      type: type,\r\n      expression: expression,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the size of the shape.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `vec2` value.\r\n   * @param {string} expression Size expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolSizeExpression(expression) {\r\n    this.hasSymbol_ = true;\r\n    this.symbolSizeExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current symbol size expression\r\n   */\r\n  getSymbolSizeExpression() {\r\n    return this.symbolSizeExpression_;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the rotation of the shape.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `float` value in radians.\r\n   * @param {string} expression Size expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolRotationExpression(expression) {\r\n    this.symbolRotationExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the offset of the symbol from the point center.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `vec2` value.\r\n   * @param {string} expression Offset expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolOffsetExpression(expression) {\r\n    this.symbolOffsetExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current symbol offset expression\r\n   */\r\n  getSymbolOffsetExpression() {\r\n    return this.symbolOffsetExpression_;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the color of the shape.\r\n   * This expression can use all the uniforms, varyings and attributes available\r\n   * in the fragment shader, and should evaluate to a `vec4` value.\r\n   * @param {string} expression Color expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolColorExpression(expression) {\r\n    this.hasSymbol_ = true;\r\n    this.symbolColorExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {string} The current symbol color expression\r\n   */\r\n  getSymbolColorExpression() {\r\n    return this.symbolColorExpression_;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to compute the texture coordinates of the vertices.\r\n   * This expression can use all the uniforms and attributes available\r\n   * in the vertex shader, and should evaluate to a `vec4` value.\r\n   * @param {string} expression Texture coordinate expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setTextureCoordinateExpression(expression) {\r\n    this.texCoordExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\r\n   * i.e. not drawn at all.\r\n   * This expression can use all the uniforms, varyings and attributes available\r\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\r\n   * used in an `if` statement)\r\n   * @param {string} expression Fragment discard expression\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setFragmentDiscardExpression(expression) {\r\n    this.discardExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\r\n   * Note: will only be used for point geometry shaders.\r\n   * @param {boolean} rotateWithView Rotate with view\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setSymbolRotateWithView(rotateWithView) {\r\n    this.symbolRotateWithView_ = rotateWithView;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke width expression, returning value in pixels\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeWidthExpression(expression) {\r\n    this.hasStroke_ = true;\r\n    this.strokeWidthExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke color expression, evaluate to `vec4`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeColorExpression(expression) {\r\n    this.hasStroke_ = true;\r\n    this.strokeColorExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke color expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeOffsetExpression(expression) {\r\n    this.strokeOffsetExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke line cap expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeCapExpression(expression) {\r\n    this.strokeCapExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke line join expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeJoinExpression(expression) {\r\n    this.strokeJoinExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke miter limit expression, evaluate to `float`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeMiterLimitExpression(expression) {\r\n    this.strokeMiterLimitExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Stroke distance field expression, evaluate to `float`\r\n   * This can override the default distance field; can rely on currentLengthPx and currentRadiusPx\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setStrokeDistanceFieldExpression(expression) {\r\n    this.strokeDistanceFieldExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {string} expression Fill color expression, evaluate to `vec4`\r\n   * @return {ShaderBuilder} the builder object\r\n   */\r\n  setFillColorExpression(expression) {\r\n    this.hasFill_ = true;\r\n    this.fillColorExpression_ = expression;\r\n    return this;\r\n  }\r\n\r\n  addVertexShaderFunction(code) {\r\n    if (this.vertexShaderFunctions_.includes(code)) {\r\n      return;\r\n    }\r\n    this.vertexShaderFunctions_.push(code);\r\n  }\r\n  addFragmentShaderFunction(code) {\r\n    if (this.fragmentShaderFunctions_.includes(code)) {\r\n      return;\r\n    }\r\n    this.fragmentShaderFunctions_.push(code);\r\n  }\r\n\r\n  /**\r\n   * Generates a symbol vertex shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getSymbolVertexShader() {\r\n    if (!this.hasSymbol_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nattribute vec2 a_position;\r\nattribute float a_index;\r\nattribute vec4 a_hitColor;\r\n${this.attributes_\r\n  .map(function (attribute) {\r\n    return 'attribute ' + attribute + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_texCoord;\r\nvarying vec2 v_quadCoord;\r\nvarying vec4 v_hitColor;\r\nvarying vec2 v_centerPx;\r\nvarying float v_angle;\r\nvarying vec2 v_quadSizePx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.vertexShaderFunctions_.join('\\n')}\r\nvec2 pxToScreen(vec2 coordPx) {\r\n  vec2 scaled = coordPx / u_viewportSizePx / 0.5;\r\n  ${\r\n    this.symbolRotateWithView_\r\n      ? 'scaled = vec2(scaled.x * cos(-u_rotation) - scaled.y * sin(-u_rotation), scaled.x * sin(-u_rotation) + scaled.y * cos(-u_rotation));'\r\n      : ''\r\n  }\r\n  return scaled;\r\n}\r\n\r\nvec2 screenToPx(vec2 coordScreen) {\r\n  return (coordScreen * 0.5 + 0.5) * u_viewportSizePx;\r\n}\r\n\r\nvoid main(void) {\r\n  v_quadSizePx = ${this.symbolSizeExpression_};\r\n  vec2 halfSizePx = v_quadSizePx * 0.5;\r\n  vec2 centerOffsetPx = ${this.symbolOffsetExpression_};\r\n  vec2 offsetPx = centerOffsetPx;\r\n  if (a_index == 0.0) {\r\n    offsetPx -= halfSizePx;\r\n  } else if (a_index == 1.0) {\r\n    offsetPx += halfSizePx * vec2(1., -1.);\r\n  } else if (a_index == 2.0) {\r\n    offsetPx += halfSizePx;\r\n  } else {\r\n    offsetPx += halfSizePx * vec2(-1., 1.);\r\n  }\r\n  float angle = ${this.symbolRotationExpression_};\r\n  float c = cos(-angle);\r\n  float s = sin(-angle);\r\n  offsetPx = vec2(c * offsetPx.x - s * offsetPx.y, s * offsetPx.x + c * offsetPx.y);\r\n  vec4 center = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\r\n  gl_Position = center + vec4(pxToScreen(offsetPx), 0., 0.);\r\n  vec4 texCoord = ${this.texCoordExpression_};\r\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\r\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\r\n  v_texCoord = vec2(u, v);\r\n  v_hitColor = a_hitColor;\r\n  v_angle = angle;\r\n  ${this.symbolRotateWithView_ ? 'v_angle += u_rotation;' : ''}\r\n  c = cos(-v_angle);\r\n  s = sin(-v_angle);\r\n  centerOffsetPx = vec2(c * centerOffsetPx.x - s * centerOffsetPx.y, s * centerOffsetPx.x + c * centerOffsetPx.y); \r\n  v_centerPx = screenToPx(center.xy) + centerOffsetPx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\r\n  })\r\n  .join('\\n')}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a symbol fragment shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getSymbolFragmentShader() {\r\n    if (!this.hasSymbol_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_texCoord;\r\nvarying vec4 v_hitColor;\r\nvarying vec2 v_centerPx;\r\nvarying float v_angle;\r\nvarying vec2 v_quadSizePx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.fragmentShaderFunctions_.join('\\n')}\r\n\r\nvoid main(void) {\r\n  if (${this.discardExpression_}) { discard; }\r\n  vec2 coordsPx = gl_FragCoord.xy / u_pixelRatio - v_centerPx; // relative to center\r\n  float c = cos(v_angle);\r\n  float s = sin(v_angle);\r\n  coordsPx = vec2(c * coordsPx.x - s * coordsPx.y, s * coordsPx.x + c * coordsPx.y);\r\n  gl_FragColor = ${this.symbolColorExpression_};\r\n  if (u_hitDetection > 0) {\r\n    if (gl_FragColor.a < 0.05) { discard; };\r\n    gl_FragColor = v_hitColor;\r\n  }\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a stroke vertex shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getStrokeVertexShader() {\r\n    if (!this.hasStroke_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nattribute vec2 a_position;\r\nattribute float a_index;\r\nattribute vec2 a_segmentStart;\r\nattribute vec2 a_segmentEnd;\r\nattribute float a_parameters;\r\nattribute float a_distance;\r\nattribute vec2 a_joinAngles;\r\nattribute vec4 a_hitColor;\r\n${this.attributes_\r\n  .map(function (attribute) {\r\n    return 'attribute ' + attribute + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_segmentStart;\r\nvarying vec2 v_segmentEnd;\r\nvarying float v_angleStart;\r\nvarying float v_angleEnd;\r\nvarying float v_width;\r\nvarying vec4 v_hitColor;\r\nvarying float v_distanceOffsetPx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.vertexShaderFunctions_.join('\\n')}\r\nvec2 worldToPx(vec2 worldPos) {\r\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\r\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\r\n}\r\n\r\nvec4 pxToScreen(vec2 pxPos) {\r\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\r\n  return vec4(screenPos, 0.0, 1.0);\r\n}\r\n\r\nbool isCap(float joinAngle) {\r\n  return joinAngle < -0.1;\r\n}\r\n\r\nvec2 getJoinOffsetDirection(vec2 normalPx, float joinAngle) {\r\n  float halfAngle = joinAngle / 2.0;\r\n  float c = cos(halfAngle);\r\n  float s = sin(halfAngle);\r\n  vec2 angleBisectorNormal = vec2(s * normalPx.x + c * normalPx.y, -c * normalPx.x + s * normalPx.y);\r\n  float length = 1.0 / s;\r\n  return angleBisectorNormal * length;\r\n}\r\n\r\nvec2 getOffsetPoint(vec2 point, vec2 normal, float joinAngle, float offsetPx) {\r\n  // if on a cap or the join angle is too high, offset the line along the segment normal\r\n  if (cos(joinAngle) > 0.998 || isCap(joinAngle)) {\r\n    return point - normal * offsetPx;\r\n  }\r\n  // offset is applied along the inverted normal (positive offset goes \"right\" relative to line direction)\r\n  return point - getJoinOffsetDirection(normal, joinAngle) * offsetPx;\r\n}\r\n\r\nvoid main(void) {\r\n  v_angleStart = a_joinAngles.x;\r\n  v_angleEnd = a_joinAngles.y;\r\n  float vertexNumber = a_parameters;\r\n\r\n  float lineWidth = ${this.strokeWidthExpression_};\r\n  float lineOffsetPx = ${this.strokeOffsetExpression_};\r\n\r\n  // compute segment start/end in px with offset\r\n  vec2 segmentStartPx = worldToPx(a_segmentStart);\r\n  vec2 segmentEndPx = worldToPx(a_segmentEnd);\r\n  vec2 tangentPx = normalize(segmentEndPx - segmentStartPx);\r\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\r\n  segmentStartPx = getOffsetPoint(segmentStartPx, normalPx, v_angleStart, lineOffsetPx),\r\n  segmentEndPx = getOffsetPoint(segmentEndPx, normalPx, v_angleEnd, lineOffsetPx);\r\n  \r\n  // compute current vertex position\r\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\r\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\r\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\r\n  vec2 joinDirection;\r\n  vec2 positionPx = vertexNumber < 1.5 ? segmentStartPx : segmentEndPx;\r\n  // if angle is too high, do not make a proper join\r\n  if (cos(angle) > 0.985 || isCap(angle)) {\r\n    joinDirection = normalPx * normalDir - tangentPx * tangentDir;\r\n  } else {\r\n    joinDirection = getJoinOffsetDirection(normalPx * normalDir, angle);\r\n  }\r\n  positionPx = positionPx + joinDirection * lineWidth * 0.5;\r\n  gl_Position = pxToScreen(positionPx);\r\n\r\n  v_segmentStart = segmentStartPx;\r\n  v_segmentEnd = segmentEndPx;\r\n  v_width = lineWidth;\r\n  v_hitColor = a_hitColor;\r\n  v_distanceOffsetPx = a_distance / u_resolution;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\r\n  })\r\n  .join('\\n')}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a stroke fragment shader from the builder parameters\r\n   *\r\n   * @return {string|null} The full shader as a string; null if no size or color specified\r\n   */\r\n  getStrokeFragmentShader() {\r\n    if (!this.hasStroke_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec2 v_segmentStart;\r\nvarying vec2 v_segmentEnd;\r\nvarying float v_angleStart;\r\nvarying float v_angleEnd;\r\nvarying float v_width;\r\nvarying vec4 v_hitColor;\r\nvarying float v_distanceOffsetPx;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.fragmentShaderFunctions_.join('\\n')}\r\n\r\nvec2 pxToWorld(vec2 pxPos) {\r\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\r\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\r\n}\r\n\r\nbool isCap(float joinAngle) {\r\n  return joinAngle < -0.1;\r\n}\r\n\r\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  vec2 tangent = normalize(end - start);\r\n  vec2 normal = vec2(-tangent.y, tangent.x);\r\n  vec2 startToPoint = point - start;\r\n  return abs(dot(startToPoint, normal)) - width * 0.5;\r\n}\r\n\r\nfloat buttCapDistanceField(vec2 point, vec2 start, vec2 end) {\r\n  vec2 startToPoint = point - start;\r\n  vec2 tangent = normalize(end - start);\r\n  return dot(startToPoint, -tangent);\r\n}\r\n\r\nfloat squareCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  return buttCapDistanceField(point, start, end) - width * 0.5;\r\n}\r\n\r\nfloat roundCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  float onSegment = max(0., 1000. * dot(point - start, end - start)); // this is very high when inside the segment\r\n  return length(point - start) - width * 0.5 - onSegment;\r\n}\r\n\r\nfloat roundJoinDistanceField(vec2 point, vec2 start, vec2 end, float width) {\r\n  return roundCapDistanceField(point, start, end, width);\r\n}\r\n\r\nfloat bevelJoinField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\r\n  vec2 startToPoint = point - start;\r\n  vec2 tangent = normalize(end - start);\r\n  float c = cos(joinAngle * 0.5);\r\n  float s = sin(joinAngle * 0.5);\r\n  float direction = -sign(sin(joinAngle));\r\n  vec2 bisector = vec2(c * tangent.x - s * tangent.y, s * tangent.x + c * tangent.y);\r\n  float radius = width * 0.5 * s;\r\n  return dot(startToPoint, bisector * direction) - radius;\r\n}\r\n\r\nfloat miterJoinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\r\n  if (cos(joinAngle) > 0.985) { // avoid risking a division by zero\r\n    return bevelJoinField(point, start, end, width, joinAngle);\r\n  }\r\n  float miterLength = 1. / sin(joinAngle * 0.5);\r\n  float miterLimit = ${this.strokeMiterLimitExpression_};\r\n  if (miterLength > miterLimit) {\r\n    return bevelJoinField(point, start, end, width, joinAngle);\r\n  }\r\n  return -1000.;\r\n}\r\n\r\nfloat capDistanceField(vec2 point, vec2 start, vec2 end, float width, float capType) {\r\n   if (capType == ${stringToGlsl('butt')}) {\r\n    return buttCapDistanceField(point, start, end);\r\n  } else if (capType == ${stringToGlsl('square')}) {\r\n    return squareCapDistanceField(point, start, end, width);\r\n  }\r\n  return roundCapDistanceField(point, start, end, width);\r\n}\r\n\r\nfloat joinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float joinType) {\r\n  if (joinType == ${stringToGlsl('bevel')}) {\r\n    return bevelJoinField(point, start, end, width, joinAngle);\r\n  } else if (joinType == ${stringToGlsl('miter')}) {\r\n    return miterJoinDistanceField(point, start, end, width, joinAngle);\r\n  }\r\n  return roundJoinDistanceField(point, start, end, width);\r\n}\r\n\r\nfloat computeSegmentPointDistance(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float capType, float joinType) {\r\n  if (isCap(joinAngle)) {\r\n    return capDistanceField(point, start, end, width, capType);\r\n  }\r\n  return joinDistanceField(point, start, end, width, joinAngle, joinType);\r\n}\r\n\r\nvoid main(void) {\r\n  vec2 currentPoint = gl_FragCoord.xy / u_pixelRatio;\r\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  vec2 v_worldPos = pxToWorld(currentPoint);\r\n  if (\r\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\r\n      v_worldPos[0] < u_renderExtent[0] ||\r\n      v_worldPos[1] < u_renderExtent[1] ||\r\n      v_worldPos[0] > u_renderExtent[2] ||\r\n      v_worldPos[1] > u_renderExtent[3]\r\n    )\r\n  ) {\r\n    discard;\r\n  }\r\n  #endif\r\n  if (${this.discardExpression_}) { discard; }\r\n\r\n  float segmentLength = length(v_segmentEnd - v_segmentStart);\r\n  vec2 segmentTangent = (v_segmentEnd - v_segmentStart) / segmentLength;\r\n  vec2 segmentNormal = vec2(-segmentTangent.y, segmentTangent.x);\r\n  vec2 startToPoint = currentPoint - v_segmentStart;\r\n  float currentLengthPx = max(0., min(dot(segmentTangent, startToPoint), segmentLength)) + v_distanceOffsetPx; \r\n  float currentRadiusPx = abs(dot(segmentNormal, startToPoint));\r\n  vec4 color = ${this.strokeColorExpression_} * u_globalAlpha;\r\n  float capType = ${this.strokeCapExpression_};\r\n  float joinType = ${this.strokeJoinExpression_};\r\n  float segmentStartDistance = computeSegmentPointDistance(currentPoint, v_segmentStart, v_segmentEnd, v_width, v_angleStart, capType, joinType);\r\n  float segmentEndDistance = computeSegmentPointDistance(currentPoint, v_segmentEnd, v_segmentStart, v_width, v_angleEnd, capType, joinType);\r\n  float distance = max(\r\n    segmentDistanceField(currentPoint, v_segmentStart, v_segmentEnd, v_width),\r\n    max(segmentStartDistance, segmentEndDistance)\r\n  );\r\n  distance = max(distance, ${this.strokeDistanceFieldExpression_});\r\n  gl_FragColor = color * smoothstep(0., -1., distance);\r\n  if (u_hitDetection > 0) {\r\n    if (gl_FragColor.a < 0.1) { discard; };\r\n    gl_FragColor = v_hitColor;\r\n  }\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a fill vertex shader from the builder parameters\r\n   *\r\n   * @return {string|null} The full shader as a string; null if no color specified\r\n   */\r\n  getFillVertexShader() {\r\n    if (!this.hasFill_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nattribute vec2 a_position;\r\nattribute vec4 a_hitColor;\r\n${this.attributes_\r\n  .map(function (attribute) {\r\n    return 'attribute ' + attribute + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec4 v_hitColor;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.vertexShaderFunctions_.join('\\n')}\r\nvoid main(void) {\r\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\r\n  })\r\n  .join('\\n')}\r\n}`;\r\n  }\r\n\r\n  /**\r\n   * Generates a fill fragment shader from the builder parameters\r\n   * @return {string|null} The full shader as a string; null if no color specified\r\n   */\r\n  getFillFragmentShader() {\r\n    if (!this.hasFill_) {\r\n      return null;\r\n    }\r\n\r\n    return `${COMMON_HEADER}\r\n${this.uniforms_\r\n  .map(function (uniform) {\r\n    return 'uniform ' + uniform + ';';\r\n  })\r\n  .join('\\n')}\r\nvarying vec4 v_hitColor;\r\n${this.varyings_\r\n  .map(function (varying) {\r\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\r\n  })\r\n  .join('\\n')}\r\n${this.fragmentShaderFunctions_.join('\\n')}\r\nvec2 pxToWorld(vec2 pxPos) {\r\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\r\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\r\n}\r\n\r\nvoid main(void) {\r\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  vec2 v_worldPos = pxToWorld(gl_FragCoord.xy / u_pixelRatio);\r\n  if (\r\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\r\n      v_worldPos[0] < u_renderExtent[0] ||\r\n      v_worldPos[1] < u_renderExtent[1] ||\r\n      v_worldPos[0] > u_renderExtent[2] ||\r\n      v_worldPos[1] > u_renderExtent[3]\r\n    )\r\n  ) {\r\n    discard;\r\n  }\r\n  #endif\r\n  if (${this.discardExpression_}) { discard; }\r\n  gl_FragColor = ${this.fillColorExpression_} * u_globalAlpha;\r\n  if (u_hitDetection > 0) {\r\n    if (gl_FragColor.a < 0.1) { discard; };\r\n    gl_FragColor = v_hitColor;\r\n  }\r\n}`;\r\n  }\r\n}\r\n", "/**\r\n * @module ol/layer/Heatmap\r\n */\r\nimport BaseVector from './BaseVector.js';\r\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\r\nimport {ShaderBuilder} from '../webgl/ShaderBuilder.js';\r\nimport {clamp} from '../math.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\r\n * of the heatmap, specified as an array of CSS color strings.\r\n * @property {number} [radius=8] Radius size in pixels.\r\n * @property {number} [blur=15] Blur size in pixels.\r\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\r\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\r\n * should range from 0 to 1 (and values outside will be clamped to that range).\r\n * @property {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} [source] Point source.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  BLUR: 'blur',\r\n  GRADIENT: 'gradient',\r\n  RADIUS: 'radius',\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\r\n\r\n/**\r\n * @classdesc\r\n * Layer for rendering vector data as a heatmap.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @fires import(\"../render/Event.js\").RenderEvent\r\n * @extends {BaseVector<import(\"../source/Vector.js\").default, WebGLPointsLayerRenderer>}\r\n * @api\r\n */\r\nclass Heatmap extends BaseVector {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    delete baseOptions.gradient;\r\n    delete baseOptions.radius;\r\n    delete baseOptions.blur;\r\n    delete baseOptions.weight;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.gradient_ = null;\r\n\r\n    this.addChangeListener(Property.GRADIENT, this.handleGradientChanged_);\r\n\r\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\r\n\r\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\r\n\r\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\r\n\r\n    const weight = options.weight ? options.weight : 'weight';\r\n    if (typeof weight === 'string') {\r\n      this.weightFunction_ = function (feature) {\r\n        return feature.get(weight);\r\n      };\r\n    } else {\r\n      this.weightFunction_ = weight;\r\n    }\r\n\r\n    // For performance reasons, don't sort the features before rendering.\r\n    // The render order is not relevant for a heatmap representation.\r\n    this.setRenderOrder(null);\r\n  }\r\n\r\n  /**\r\n   * Return the blur size in pixels.\r\n   * @return {number} Blur size in pixels.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getBlur() {\r\n    return /** @type {number} */ (this.get(Property.BLUR));\r\n  }\r\n\r\n  /**\r\n   * Return the gradient colors as array of strings.\r\n   * @return {Array<string>} Colors.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getGradient() {\r\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\r\n  }\r\n\r\n  /**\r\n   * Return the size of the radius in pixels.\r\n   * @return {number} Radius size in pixel.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getRadius() {\r\n    return /** @type {number} */ (this.get(Property.RADIUS));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGradientChanged_() {\r\n    this.gradient_ = createGradient(this.getGradient());\r\n  }\r\n\r\n  /**\r\n   * Set the blur size in pixels.\r\n   * @param {number} blur Blur size in pixels.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setBlur(blur) {\r\n    this.set(Property.BLUR, blur);\r\n  }\r\n\r\n  /**\r\n   * Set the gradient colors as array of strings.\r\n   * @param {Array<string>} colors Gradient.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setGradient(colors) {\r\n    this.set(Property.GRADIENT, colors);\r\n  }\r\n\r\n  /**\r\n   * Set the size of the radius in pixels.\r\n   * @param {number} radius Radius size in pixel.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setRadius(radius) {\r\n    this.set(Property.RADIUS, radius);\r\n  }\r\n\r\n  createRenderer() {\r\n    const builder = new ShaderBuilder()\r\n      .addAttribute('float a_weight')\r\n      .addVarying('v_weight', 'float', 'a_weight')\r\n      .addUniform('float u_size')\r\n      .addUniform('float u_blurSlope')\r\n      .setSymbolSizeExpression('vec2(u_size)')\r\n      .setSymbolColorExpression(\r\n        'vec4(smoothstep(0., 1., (1. - length(coordsPx * 2. / v_quadSizePx)) * u_blurSlope) * v_weight)'\r\n      );\r\n\r\n    return new WebGLPointsLayerRenderer(this, {\r\n      className: this.getClassName(),\r\n      attributes: [\r\n        {\r\n          name: 'weight',\r\n          callback: (feature) => {\r\n            const weight = this.weightFunction_(feature);\r\n            return weight !== undefined ? clamp(weight, 0, 1) : 1;\r\n          },\r\n        },\r\n      ],\r\n      uniforms: {\r\n        u_size: () => {\r\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\r\n        },\r\n        u_blurSlope: () => {\r\n          return (\r\n            this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))\r\n          );\r\n        },\r\n      },\r\n      hitDetectionEnabled: true,\r\n      vertexShader: builder.getSymbolVertexShader(),\r\n      fragmentShader: builder.getSymbolFragmentShader(),\r\n      postProcesses: [\r\n        {\r\n          fragmentShader: `\r\n            precision mediump float;\r\n\r\n            uniform sampler2D u_image;\r\n            uniform sampler2D u_gradientTexture;\r\n            uniform float u_opacity;\r\n\r\n            varying vec2 v_texCoord;\r\n\r\n            void main() {\r\n              vec4 color = texture2D(u_image, v_texCoord);\r\n              gl_FragColor.a = color.a * u_opacity;\r\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\r\n              gl_FragColor.rgb *= gl_FragColor.a;\r\n            }`,\r\n          uniforms: {\r\n            u_gradientTexture: () => this.gradient_,\r\n            u_opacity: () => this.getOpacity(),\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  renderDeclutter() {}\r\n}\r\n\r\n/**\r\n * @param {Array<string>} colors A list of colored.\r\n * @return {HTMLCanvasElement} canvas with gradient texture.\r\n */\r\nfunction createGradient(colors) {\r\n  const width = 1;\r\n  const height = 256;\r\n  const context = createCanvasContext2D(width, height);\r\n\r\n  const gradient = context.createLinearGradient(0, 0, width, height);\r\n  const step = 1 / (colors.length - 1);\r\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\r\n    gradient.addColorStop(i * step, colors[i]);\r\n  }\r\n\r\n  context.fillStyle = gradient;\r\n  context.fillRect(0, 0, width, height);\r\n\r\n  return context.canvas;\r\n}\r\n\r\nexport default Heatmap;\r\n", "/**\r\n * @module ol/renderer/canvas/VectorImageLayer\r\n */\r\nimport CanvasImageLayerRenderer from './ImageLayer.js';\r\nimport CanvasVectorLayerRenderer from './VectorLayer.js';\r\nimport EventType from '../../events/EventType.js';\r\nimport ImageCanvas from '../../ImageCanvas.js';\r\nimport ImageState from '../../ImageState.js';\r\nimport RBush from 'rbush';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {apply, compose, create} from '../../transform.js';\r\nimport {fromResolutionLike} from '../../resolution.js';\r\nimport {getHeight, getWidth, isEmpty, scaleFromCenter} from '../../extent.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for image layers.\r\n * @api\r\n */\r\nclass CanvasVectorImageLayerRenderer extends CanvasImageLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/VectorImage.js\").default} layer Vector image layer.\r\n   */\r\n  constructor(layer) {\r\n    super(layer);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./VectorLayer.js\").default}\r\n     */\r\n    this.vectorRenderer_ = new CanvasVectorLayerRenderer(layer);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.layerImageRatio_ = layer.getImageRatio();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.coordinateToVectorPixelTransform_ = create();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.renderedPixelToCoordinateTransform_ = null;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    this.vectorRenderer_.dispose();\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    if (!this.vectorRenderer_) {\r\n      return Promise.resolve([]);\r\n    }\r\n    const vectorPixel = apply(\r\n      this.coordinateToVectorPixelTransform_,\r\n      apply(this.renderedPixelToCoordinateTransform_, pixel.slice())\r\n    );\r\n    return this.vectorRenderer_.getFeatures(vectorPixel);\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   */\r\n  handleFontsChanged() {\r\n    this.vectorRenderer_.handleFontsChanged();\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const viewResolution = viewState.resolution;\r\n\r\n    const hints = frameState.viewHints;\r\n    const vectorRenderer = this.vectorRenderer_;\r\n    let renderedExtent = frameState.extent;\r\n    if (this.layerImageRatio_ !== 1) {\r\n      renderedExtent = renderedExtent.slice(0);\r\n      scaleFromCenter(renderedExtent, this.layerImageRatio_);\r\n    }\r\n    const width = getWidth(renderedExtent) / viewResolution;\r\n    const height = getHeight(renderedExtent) / viewResolution;\r\n\r\n    if (\r\n      !hints[ViewHint.ANIMATING] &&\r\n      !hints[ViewHint.INTERACTING] &&\r\n      !isEmpty(renderedExtent)\r\n    ) {\r\n      vectorRenderer.useContainer(null, null);\r\n      const context = vectorRenderer.context;\r\n      const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n      const imageLayerState = Object.assign({}, layerState, {opacity: 1});\r\n      const imageFrameState = /** @type {import(\"../../Map.js\").FrameState} */ (\r\n        Object.assign({}, frameState, {\r\n          declutterTree: new RBush(9),\r\n          extent: renderedExtent,\r\n          size: [width, height],\r\n          viewState: /** @type {import(\"../../View.js\").State} */ (\r\n            Object.assign({}, frameState.viewState, {\r\n              rotation: 0,\r\n            })\r\n          ),\r\n          layerStatesArray: [imageLayerState],\r\n          layerIndex: 0,\r\n        })\r\n      );\r\n      let emptyImage = true;\r\n      const image = new ImageCanvas(\r\n        renderedExtent,\r\n        viewResolution,\r\n        pixelRatio,\r\n        context.canvas,\r\n        function (callback) {\r\n          if (\r\n            vectorRenderer.prepareFrame(imageFrameState) &&\r\n            vectorRenderer.replayGroupChanged\r\n          ) {\r\n            vectorRenderer.clipping = false;\r\n            if (vectorRenderer.renderFrame(imageFrameState, null)) {\r\n              vectorRenderer.renderDeclutter(imageFrameState);\r\n              emptyImage = false;\r\n            }\r\n            callback();\r\n          }\r\n        }\r\n      );\r\n\r\n      image.addEventListener(EventType.CHANGE, () => {\r\n        if (image.getState() !== ImageState.LOADED) {\r\n          return;\r\n        }\r\n        this.image_ = emptyImage ? null : image;\r\n        const imagePixelRatio = image.getPixelRatio();\r\n        const renderedResolution =\r\n          (fromResolutionLike(image.getResolution()) * pixelRatio) /\r\n          imagePixelRatio;\r\n        this.renderedResolution = renderedResolution;\r\n        this.coordinateToVectorPixelTransform_ = compose(\r\n          this.coordinateToVectorPixelTransform_,\r\n          width / 2,\r\n          height / 2,\r\n          1 / renderedResolution,\r\n          -1 / renderedResolution,\r\n          0,\r\n          -viewState.center[0],\r\n          -viewState.center[1]\r\n        );\r\n      });\r\n      image.load();\r\n    }\r\n\r\n    if (this.image_) {\r\n      this.renderedPixelToCoordinateTransform_ =\r\n        frameState.pixelToCoordinateTransform.slice();\r\n    }\r\n\r\n    return !!this.image_;\r\n  }\r\n\r\n  /**\r\n   */\r\n  preRender() {}\r\n\r\n  /**\r\n   */\r\n  postRender() {}\r\n\r\n  /**\r\n   */\r\n  renderDeclutter() {}\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches\r\n  ) {\r\n    if (this.vectorRenderer_) {\r\n      return this.vectorRenderer_.forEachFeatureAtCoordinate(\r\n        coordinate,\r\n        frameState,\r\n        hitTolerance,\r\n        callback,\r\n        matches\r\n      );\r\n    }\r\n    return super.forEachFeatureAtCoordinate(\r\n      coordinate,\r\n      frameState,\r\n      hitTolerance,\r\n      callback,\r\n      matches\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasVectorImageLayerRenderer;\r\n", "/**\r\n * @module ol/layer/VectorImage\r\n */\r\nimport BaseVectorLayer from './BaseVector.js';\r\nimport CanvasVectorImageLayerRenderer from '../renderer/canvas/VectorImageLayer.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default} VectorSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean} [declutter=false] Declutter images and text on this layer. The priority is defined\r\n * by the `zIndex` of the style and the render order of features. Higher z-index means higher priority.\r\n * Within the same z-index, a feature rendered before another has higher priority.\r\n * @property {import(\"../style/Style.js\").StyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {number} [imageRatio=1] Ratio by which the rendered extent should be larger than the\r\n * viewport extent. A larger ratio avoids cut images during panning, but will cause a decrease in performance.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Vector data is rendered client-side, to an image. This layer type provides great performance\r\n * during panning and zooming, but point symbols and texts are always rotated with the view and\r\n * pixels are scaled during zoom animations. For more accurate rendering of vector data, use\r\n * {@link module:ol/layer/Vector~VectorLayer} instead.\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default} VectorSourceType\r\n * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorImageLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorImageLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {Options<VectorSourceType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n    delete baseOptions.imageRatio;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.imageRatio_ =\r\n      options.imageRatio !== undefined ? options.imageRatio : 1;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Ratio between rendered extent size and viewport extent size.\r\n   */\r\n  getImageRatio() {\r\n    return this.imageRatio_;\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasVectorImageLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default VectorImageLayer;\r\n", "/**\r\n * @module ol/renderer/canvas/VectorTileLayer\r\n */\r\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\r\nimport CanvasExecutorGroup from '../../render/canvas/ExecutorGroup.js';\r\nimport CanvasTileLayerRenderer from './TileLayer.js';\r\nimport TileState from '../../TileState.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {\r\n  HIT_DETECT_RESOLUTION,\r\n  createHitDetectionImageData,\r\n  hitDetect,\r\n} from '../../render/canvas/hitdetect.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n  multiply,\r\n  reset as resetTransform,\r\n  scale,\r\n  scale as scaleTransform,\r\n  translate as translateTransform,\r\n} from '../../transform.js';\r\nimport {\r\n  boundingExtent,\r\n  buffer,\r\n  containsExtent,\r\n  equals,\r\n  getIntersection,\r\n  getTopLeft,\r\n  intersects,\r\n} from '../../extent.js';\r\nimport {\r\n  getSquaredTolerance as getSquaredRenderTolerance,\r\n  renderFeature,\r\n} from '../vector.js';\r\nimport {getUid} from '../../util.js';\r\nimport {toSize} from '../../size.js';\r\nimport {wrapX} from '../../coordinate.js';\r\n\r\n/**\r\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\r\n */\r\nconst IMAGE_REPLAYS = {\r\n  'image': ['Polygon', 'Circle', 'LineString', 'Image', 'Text'],\r\n  'hybrid': ['Polygon', 'LineString'],\r\n  'vector': [],\r\n};\r\n\r\n/**\r\n * @type {!Object<string, Array<import(\"../../render/canvas.js\").BuilderType>>}\r\n */\r\nconst VECTOR_REPLAYS = {\r\n  'hybrid': ['Image', 'Text', 'Default'],\r\n  'vector': ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'],\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for vector tile layers.\r\n * @api\r\n * @extends {CanvasTileLayerRenderer<import(\"../../layer/VectorTile.js\").default>}\r\n */\r\nclass CanvasVectorTileLayerRenderer extends CanvasTileLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/VectorTile.js\").default} layer VectorTile layer.\r\n   */\r\n  constructor(layer) {\r\n    super(layer);\r\n\r\n    /** @private */\r\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedLayerRevision_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform\").Transform}\r\n     */\r\n    this.renderedPixelToCoordinateTransform_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tmpTransform_ = createTransform();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../proj/Projection\").default} projection Projection.\r\n   * @return {boolean|undefined} Tile needs to be rendered.\r\n   */\r\n  prepareTile(tile, pixelRatio, projection) {\r\n    let render;\r\n    const state = tile.getState();\r\n    if (state === TileState.LOADED || state === TileState.ERROR) {\r\n      this.updateExecutorGroup_(tile, pixelRatio, projection);\r\n      if (this.tileImageNeedsRender_(tile)) {\r\n        render = true;\r\n      }\r\n    }\r\n    return render;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {!import(\"../../Tile.js\").default} Tile.\r\n   */\r\n  getTile(z, x, y, frameState) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const resolution = viewState.resolution;\r\n    const projection = viewState.projection;\r\n    const layer = this.getLayer();\r\n    const tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);\r\n    const viewHints = frameState.viewHints;\r\n    const hifi = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    if (hifi || !tile.wantedResolution) {\r\n      tile.wantedResolution = resolution;\r\n    }\r\n    const render = this.prepareTile(tile, pixelRatio, projection);\r\n    if (\r\n      render &&\r\n      (hifi || Date.now() - frameState.time < 8) &&\r\n      layer.getRenderMode() !== 'vector'\r\n    ) {\r\n      this.renderTileImage_(tile, frameState);\r\n    }\r\n    return super.getTile(z, x, y, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @return {boolean} Tile is drawable.\r\n   */\r\n  isDrawableTile(tile) {\r\n    const layer = this.getLayer();\r\n    return (\r\n      super.isDrawableTile(tile) &&\r\n      (layer.getRenderMode() === 'vector'\r\n        ? getUid(layer) in tile.executorGroups\r\n        : tile.hasContext(layer))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getTileImage(tile) {\r\n    return tile.getImage(this.getLayer());\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    const layerRevision = this.getLayer().getRevision();\r\n    if (this.renderedLayerRevision_ !== layerRevision) {\r\n      this.renderedLayerRevision_ = layerRevision;\r\n      this.renderedTiles.length = 0;\r\n    }\r\n    return super.prepareFrame(frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n   * @private\r\n   */\r\n  updateExecutorGroup_(tile, pixelRatio, projection) {\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    const revision = layer.getRevision();\r\n    const renderOrder = layer.getRenderOrder() || null;\r\n\r\n    const resolution = tile.wantedResolution;\r\n    const builderState = tile.getReplayState(layer);\r\n    if (\r\n      !builderState.dirty &&\r\n      builderState.renderedResolution === resolution &&\r\n      builderState.renderedRevision == revision &&\r\n      builderState.renderedRenderOrder == renderOrder\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const source = layer.getSource();\r\n    const declutter = layer.getDeclutter();\r\n    const sourceTileGrid = source.getTileGrid();\r\n    const tileGrid = source.getTileGridForProjection(projection);\r\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n\r\n    const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);\r\n    const layerUid = getUid(layer);\r\n    delete tile.hitDetectionImageData[layerUid];\r\n    tile.executorGroups[layerUid] = [];\r\n    if (declutter) {\r\n      tile.declutterExecutorGroups[layerUid] = [];\r\n    }\r\n    builderState.dirty = false;\r\n    for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {\r\n      const sourceTile = sourceTiles[t];\r\n      if (sourceTile.getState() != TileState.LOADED) {\r\n        continue;\r\n      }\r\n      const sourceTileCoord = sourceTile.tileCoord;\r\n      const sourceTileExtent =\r\n        sourceTileGrid.getTileCoordExtent(sourceTileCoord);\r\n      const sharedExtent = getIntersection(tileExtent, sourceTileExtent);\r\n      const builderExtent = buffer(\r\n        sharedExtent,\r\n        layer.getRenderBuffer() * resolution,\r\n        this.tmpExtent\r\n      );\r\n      const bufferedExtent = equals(sourceTileExtent, sharedExtent)\r\n        ? null\r\n        : builderExtent;\r\n      const builderGroup = new CanvasBuilderGroup(\r\n        0,\r\n        builderExtent,\r\n        resolution,\r\n        pixelRatio\r\n      );\r\n      const declutterBuilderGroup = declutter\r\n        ? new CanvasBuilderGroup(0, sharedExtent, resolution, pixelRatio)\r\n        : undefined;\r\n      const squaredTolerance = getSquaredRenderTolerance(\r\n        resolution,\r\n        pixelRatio\r\n      );\r\n\r\n      /**\r\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n       * @this {CanvasVectorTileLayerRenderer}\r\n       */\r\n      const render = function (feature) {\r\n        let styles;\r\n        const styleFunction =\r\n          feature.getStyleFunction() || layer.getStyleFunction();\r\n        if (styleFunction) {\r\n          styles = styleFunction(feature, resolution);\r\n        }\r\n        if (styles) {\r\n          const dirty = this.renderFeature(\r\n            feature,\r\n            squaredTolerance,\r\n            styles,\r\n            builderGroup,\r\n            declutterBuilderGroup\r\n          );\r\n          builderState.dirty = builderState.dirty || dirty;\r\n        }\r\n      };\r\n\r\n      const features = sourceTile.getFeatures();\r\n      if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {\r\n        features.sort(renderOrder);\r\n      }\r\n      for (let i = 0, ii = features.length; i < ii; ++i) {\r\n        const feature = features[i];\r\n        if (\r\n          !bufferedExtent ||\r\n          intersects(bufferedExtent, feature.getGeometry().getExtent())\r\n        ) {\r\n          render.call(this, feature);\r\n        }\r\n      }\r\n      const executorGroupInstructions = builderGroup.finish();\r\n      // no need to clip when the render tile is covered by a single source tile\r\n      const replayExtent =\r\n        layer.getRenderMode() !== 'vector' &&\r\n        declutter &&\r\n        sourceTiles.length === 1\r\n          ? null\r\n          : sharedExtent;\r\n      const renderingReplayGroup = new CanvasExecutorGroup(\r\n        replayExtent,\r\n        resolution,\r\n        pixelRatio,\r\n        source.getOverlaps(),\r\n        executorGroupInstructions,\r\n        layer.getRenderBuffer()\r\n      );\r\n      tile.executorGroups[layerUid].push(renderingReplayGroup);\r\n      if (declutterBuilderGroup) {\r\n        const declutterExecutorGroup = new CanvasExecutorGroup(\r\n          null,\r\n          resolution,\r\n          pixelRatio,\r\n          source.getOverlaps(),\r\n          declutterBuilderGroup.finish(),\r\n          layer.getRenderBuffer()\r\n        );\r\n        tile.declutterExecutorGroups[layerUid].push(declutterExecutorGroup);\r\n      }\r\n    }\r\n    builderState.renderedRevision = revision;\r\n    builderState.renderedRenderOrder = renderOrder;\r\n    builderState.renderedResolution = resolution;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches\r\n  ) {\r\n    const resolution = frameState.viewState.resolution;\r\n    const rotation = frameState.viewState.rotation;\r\n    hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;\r\n    const layer = this.getLayer();\r\n    const source = layer.getSource();\r\n    const tileGrid = source.getTileGridForProjection(\r\n      frameState.viewState.projection\r\n    );\r\n\r\n    const hitExtent = boundingExtent([coordinate]);\r\n    buffer(hitExtent, resolution * hitTolerance, hitExtent);\r\n\r\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\r\n    const features = {};\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {number} distanceSq The squared distance to the click position.\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    const featureCallback = function (feature, geometry, distanceSq) {\r\n      let key = feature.getId();\r\n      if (key === undefined) {\r\n        key = getUid(feature);\r\n      }\r\n      const match = features[key];\r\n      if (!match) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        matches.push(\r\n          (features[key] = {\r\n            feature: feature,\r\n            layer: layer,\r\n            geometry: geometry,\r\n            distanceSq: distanceSq,\r\n            callback: callback,\r\n          })\r\n        );\r\n      } else if (match !== true && distanceSq < match.distanceSq) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          matches.splice(matches.lastIndexOf(match), 1);\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        match.geometry = geometry;\r\n        match.distanceSq = distanceSq;\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    const renderedTiles =\r\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\r\n        this.renderedTiles\r\n      );\r\n\r\n    let found;\r\n    for (let i = 0, ii = renderedTiles.length; !found && i < ii; ++i) {\r\n      const tile = renderedTiles[i];\r\n      const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n      if (!intersects(tileExtent, hitExtent)) {\r\n        continue;\r\n      }\r\n\r\n      const layerUid = getUid(layer);\r\n      const executorGroups = [tile.executorGroups[layerUid]];\r\n      const declutterExecutorGroups = tile.declutterExecutorGroups[layerUid];\r\n      if (declutterExecutorGroups) {\r\n        executorGroups.push(declutterExecutorGroups);\r\n      }\r\n      executorGroups.some((executorGroups) => {\r\n        const declutteredFeatures =\r\n          executorGroups === declutterExecutorGroups\r\n            ? frameState.declutterTree.all().map((item) => item.value)\r\n            : null;\r\n        for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\r\n          const executorGroup = executorGroups[t];\r\n          found = executorGroup.forEachFeatureAtCoordinate(\r\n            coordinate,\r\n            resolution,\r\n            rotation,\r\n            hitTolerance,\r\n            featureCallback,\r\n            declutteredFeatures\r\n          );\r\n          if (found) {\r\n            return true;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return found;\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature.js\").FeatureLike>>} Promise that resolves with an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    return new Promise((resolve, reject) => {\r\n      const layer = this.getLayer();\r\n      const layerUid = getUid(layer);\r\n      const source = layer.getSource();\r\n      const projection = this.renderedProjection;\r\n      const projectionExtent = projection.getExtent();\r\n      const resolution = this.renderedResolution;\r\n      const tileGrid = source.getTileGridForProjection(projection);\r\n      const coordinate = applyTransform(\r\n        this.renderedPixelToCoordinateTransform_,\r\n        pixel.slice()\r\n      );\r\n      const tileCoord = tileGrid.getTileCoordForCoordAndResolution(\r\n        coordinate,\r\n        resolution\r\n      );\r\n      /** @type {import(\"../../VectorRenderTile.js\").default|undefined} */\r\n      let tile;\r\n      for (let i = 0, ii = this.renderedTiles.length; i < ii; ++i) {\r\n        if (\r\n          tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()\r\n        ) {\r\n          tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (\r\n            this.renderedTiles[i]\r\n          );\r\n          if (tile.getState() === TileState.LOADED) {\r\n            const extent = tileGrid.getTileCoordExtent(tile.tileCoord);\r\n            if (\r\n              source.getWrapX() &&\r\n              projection.canWrapX() &&\r\n              !containsExtent(projectionExtent, extent)\r\n            ) {\r\n              wrapX(coordinate, projection);\r\n            }\r\n            break;\r\n          }\r\n          tile = undefined;\r\n        }\r\n      }\r\n      if (!tile || tile.loadingSourceTiles > 0) {\r\n        resolve([]);\r\n        return;\r\n      }\r\n      const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n      const corner = getTopLeft(extent);\r\n      const tilePixel = [\r\n        (coordinate[0] - corner[0]) / resolution,\r\n        (corner[1] - coordinate[1]) / resolution,\r\n      ];\r\n      /** @type {Array<import(\"../../Feature.js\").FeatureLike>} */\r\n      const features = tile\r\n        .getSourceTiles()\r\n        .reduce(function (accumulator, sourceTile) {\r\n          return accumulator.concat(sourceTile.getFeatures());\r\n        }, []);\r\n      /** @type {ImageData|undefined} */\r\n      let hitDetectionImageData = tile.hitDetectionImageData[layerUid];\r\n      if (!hitDetectionImageData) {\r\n        const tileSize = toSize(\r\n          tileGrid.getTileSize(\r\n            tileGrid.getZForResolution(resolution, source.zDirection)\r\n          )\r\n        );\r\n        const rotation = this.renderedRotation_;\r\n        const transforms = [\r\n          this.getRenderTransform(\r\n            tileGrid.getTileCoordCenter(tile.wrappedTileCoord),\r\n            resolution,\r\n            0,\r\n            HIT_DETECT_RESOLUTION,\r\n            tileSize[0] * HIT_DETECT_RESOLUTION,\r\n            tileSize[1] * HIT_DETECT_RESOLUTION,\r\n            0\r\n          ),\r\n        ];\r\n        hitDetectionImageData = createHitDetectionImageData(\r\n          tileSize,\r\n          transforms,\r\n          features,\r\n          layer.getStyleFunction(),\r\n          tileGrid.getTileCoordExtent(tile.wrappedTileCoord),\r\n          tile.getReplayState(layer).renderedResolution,\r\n          rotation\r\n        );\r\n        tile.hitDetectionImageData[layerUid] = hitDetectionImageData;\r\n      }\r\n      resolve(hitDetect(tilePixel, features, hitDetectionImageData));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   */\r\n  handleFontsChanged() {\r\n    const layer = this.getLayer();\r\n    if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle changes in image style state.\r\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\r\n   * @private\r\n   */\r\n  handleStyleImageChange_(event) {\r\n    this.renderIfReadyAndVisible();\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeclutter(frameState) {\r\n    const context = this.context;\r\n    const alpha = context.globalAlpha;\r\n    context.globalAlpha = this.getLayer().getOpacity();\r\n    const viewHints = frameState.viewHints;\r\n    const hifi = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    const tiles =\r\n      /** @type {Array<import(\"../../VectorRenderTile.js\").default>} */ (\r\n        this.renderedTiles\r\n      );\r\n    for (let i = 0, ii = tiles.length; i < ii; ++i) {\r\n      const tile = tiles[i];\r\n      const declutterExecutorGroups =\r\n        tile.declutterExecutorGroups[getUid(this.getLayer())];\r\n      if (declutterExecutorGroups) {\r\n        for (let j = declutterExecutorGroups.length - 1; j >= 0; --j) {\r\n          declutterExecutorGroups[j].execute(\r\n            this.context,\r\n            1,\r\n            this.getTileRenderTransform(tile, frameState),\r\n            frameState.viewState.rotation,\r\n            hifi,\r\n            undefined,\r\n            frameState.declutterTree\r\n          );\r\n        }\r\n      }\r\n    }\r\n    context.globalAlpha = alpha;\r\n  }\r\n\r\n  getTileRenderTransform(tile, frameState) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const center = viewState.center;\r\n    const resolution = viewState.resolution;\r\n    const rotation = viewState.rotation;\r\n    const size = frameState.size;\r\n    const width = Math.round(size[0] * pixelRatio);\r\n    const height = Math.round(size[1] * pixelRatio);\r\n\r\n    const source = this.getLayer().getSource();\r\n    const tileGrid = source.getTileGridForProjection(\r\n      frameState.viewState.projection\r\n    );\r\n    const tileCoord = tile.tileCoord;\r\n    const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);\r\n    const worldOffset =\r\n      tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];\r\n    const transform = multiply(\r\n      scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio),\r\n      this.getRenderTransform(\r\n        center,\r\n        resolution,\r\n        rotation,\r\n        pixelRatio,\r\n        width,\r\n        height,\r\n        worldOffset\r\n      )\r\n    );\r\n    return transform;\r\n  }\r\n\r\n  /**\r\n   * Render the vectors for this layer.\r\n   * @param {CanvasRenderingContext2D} context Target context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  postRender(context, frameState) {\r\n    const viewHints = frameState.viewHints;\r\n    const hifi = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n\r\n    this.renderedPixelToCoordinateTransform_ =\r\n      frameState.pixelToCoordinateTransform.slice();\r\n    this.renderedRotation_ = frameState.viewState.rotation;\r\n\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    const renderMode = layer.getRenderMode();\r\n    const alpha = context.globalAlpha;\r\n    context.globalAlpha = layer.getOpacity();\r\n    const replayTypes = VECTOR_REPLAYS[renderMode];\r\n    const viewState = frameState.viewState;\r\n    const rotation = viewState.rotation;\r\n    const tileSource = layer.getSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\r\n    const z = tileGrid.getZForResolution(\r\n      viewState.resolution,\r\n      tileSource.zDirection\r\n    );\r\n\r\n    const tiles = this.renderedTiles;\r\n    const clips = [];\r\n    const clipZs = [];\r\n    let ready = true;\r\n    for (let i = tiles.length - 1; i >= 0; --i) {\r\n      const tile = /** @type {import(\"../../VectorRenderTile.js\").default} */ (\r\n        tiles[i]\r\n      );\r\n      ready = ready && !tile.getReplayState(layer).dirty;\r\n      const executorGroups = tile.executorGroups[getUid(layer)].filter(\r\n        (group) => group.hasExecutors(replayTypes)\r\n      );\r\n      if (executorGroups.length === 0) {\r\n        continue;\r\n      }\r\n      const transform = this.getTileRenderTransform(tile, frameState);\r\n      const currentZ = tile.tileCoord[0];\r\n      let contextSaved = false;\r\n      // Clip mask for regions in this tile that already filled by a higher z tile\r\n      const currentClip = executorGroups[0].getClipCoords(transform);\r\n      if (currentClip) {\r\n        for (let j = 0, jj = clips.length; j < jj; ++j) {\r\n          if (z !== currentZ && currentZ < clipZs[j]) {\r\n            const clip = clips[j];\r\n            if (\r\n              intersects(\r\n                [\r\n                  currentClip[0],\r\n                  currentClip[3],\r\n                  currentClip[4],\r\n                  currentClip[7],\r\n                ],\r\n                [clip[0], clip[3], clip[4], clip[7]]\r\n              )\r\n            ) {\r\n              if (!contextSaved) {\r\n                context.save();\r\n                contextSaved = true;\r\n              }\r\n              context.beginPath();\r\n              // counter-clockwise (outer ring) for current tile\r\n              context.moveTo(currentClip[0], currentClip[1]);\r\n              context.lineTo(currentClip[2], currentClip[3]);\r\n              context.lineTo(currentClip[4], currentClip[5]);\r\n              context.lineTo(currentClip[6], currentClip[7]);\r\n              // clockwise (inner ring) for higher z tile\r\n              context.moveTo(clip[6], clip[7]);\r\n              context.lineTo(clip[4], clip[5]);\r\n              context.lineTo(clip[2], clip[3]);\r\n              context.lineTo(clip[0], clip[1]);\r\n              context.clip();\r\n            }\r\n          }\r\n        }\r\n        clips.push(currentClip);\r\n        clipZs.push(currentZ);\r\n      }\r\n      for (let t = 0, tt = executorGroups.length; t < tt; ++t) {\r\n        const executorGroup = executorGroups[t];\r\n        executorGroup.execute(\r\n          context,\r\n          1,\r\n          transform,\r\n          rotation,\r\n          hifi,\r\n          replayTypes\r\n        );\r\n      }\r\n      if (contextSaved) {\r\n        context.restore();\r\n      }\r\n    }\r\n    context.globalAlpha = alpha;\r\n    this.ready = ready;\r\n\r\n    super.postRender(context, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder group for decluttering.\r\n   * @return {boolean} `true` if an image is loading.\r\n   */\r\n  renderFeature(\r\n    feature,\r\n    squaredTolerance,\r\n    styles,\r\n    builderGroup,\r\n    declutterBuilderGroup\r\n  ) {\r\n    if (!styles) {\r\n      return false;\r\n    }\r\n    let loading = false;\r\n    if (Array.isArray(styles)) {\r\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\r\n        loading =\r\n          renderFeature(\r\n            builderGroup,\r\n            feature,\r\n            styles[i],\r\n            squaredTolerance,\r\n            this.boundHandleStyleImageChange_,\r\n            undefined,\r\n            declutterBuilderGroup\r\n          ) || loading;\r\n      }\r\n    } else {\r\n      loading = renderFeature(\r\n        builderGroup,\r\n        feature,\r\n        styles,\r\n        squaredTolerance,\r\n        this.boundHandleStyleImageChange_,\r\n        undefined,\r\n        declutterBuilderGroup\r\n      );\r\n    }\r\n    return loading;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @return {boolean} A new tile image was rendered.\r\n   * @private\r\n   */\r\n  tileImageNeedsRender_(tile) {\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    if (layer.getRenderMode() === 'vector') {\r\n      return false;\r\n    }\r\n    const replayState = tile.getReplayState(layer);\r\n    const revision = layer.getRevision();\r\n    const resolution = tile.wantedResolution;\r\n    return (\r\n      replayState.renderedTileResolution !== resolution ||\r\n      replayState.renderedTileRevision !== revision\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../VectorRenderTile.js\").default} tile Tile.\r\n   * @param {import(\"../../Map\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  renderTileImage_(tile, frameState) {\r\n    const layer = /** @type {import(\"../../layer/VectorTile.js\").default} */ (\r\n      this.getLayer()\r\n    );\r\n    const replayState = tile.getReplayState(layer);\r\n    const revision = layer.getRevision();\r\n    const executorGroups = tile.executorGroups[getUid(layer)];\r\n    replayState.renderedTileRevision = revision;\r\n\r\n    const tileCoord = tile.wrappedTileCoord;\r\n    const z = tileCoord[0];\r\n    const source = layer.getSource();\r\n    let pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const tileGrid = source.getTileGridForProjection(projection);\r\n    const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);\r\n    const renderPixelRatio =\r\n      (frameState.pixelRatio / tile.wantedResolution) * tileResolution;\r\n    const resolution = tileGrid.getResolution(z);\r\n    const context = tile.getContext(layer);\r\n\r\n    // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles\r\n    pixelRatio = Math.round(\r\n      Math.max(pixelRatio, renderPixelRatio / pixelRatio)\r\n    );\r\n    const size = source.getTilePixelSize(z, pixelRatio, projection);\r\n    context.canvas.width = size[0];\r\n    context.canvas.height = size[1];\r\n    const renderScale = pixelRatio / renderPixelRatio;\r\n    if (renderScale !== 1) {\r\n      const canvasTransform = resetTransform(this.tmpTransform_);\r\n      scaleTransform(canvasTransform, renderScale, renderScale);\r\n      context.setTransform.apply(context, canvasTransform);\r\n    }\r\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);\r\n    const pixelScale = renderPixelRatio / resolution;\r\n    const transform = resetTransform(this.tmpTransform_);\r\n    scaleTransform(transform, pixelScale, -pixelScale);\r\n    translateTransform(transform, -tileExtent[0], -tileExtent[3]);\r\n    for (let i = 0, ii = executorGroups.length; i < ii; ++i) {\r\n      const executorGroup = executorGroups[i];\r\n      executorGroup.execute(\r\n        context,\r\n        renderScale,\r\n        transform,\r\n        0,\r\n        true,\r\n        IMAGE_REPLAYS[layer.getRenderMode()]\r\n      );\r\n    }\r\n    replayState.renderedTileResolution = tile.wantedResolution;\r\n  }\r\n}\r\n\r\nexport default CanvasVectorTileLayerRenderer;\r\n", "/**\r\n * @module ol/layer/VectorTile\r\n */\r\nimport BaseVectorLayer from './BaseVector.js';\r\nimport CanvasVectorTileLayerRenderer from '../renderer/canvas/VectorTileLayer.js';\r\nimport TileProperty from './TileProperty.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} VectorTileLayerOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {'hybrid' | 'vector'} VectorTileRenderType\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the\r\n * renderer when getting features from the vector tile for the rendering or hit-detection.\r\n * Recommended value: Vector tiles are usually generated with a buffer, so this value should match\r\n * the largest possible buffer of the used tiles. It should be at least the size of the largest\r\n * point symbol or line width.\r\n * @property {VectorTileRenderType} [renderMode='hybrid'] Render mode for vector tiles:\r\n *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom\r\n *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on\r\n *    rotated views.\r\n *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector\r\n *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of\r\n *    another layer with the same source).\r\n * @property {import(\"../source/VectorTile.js\").default} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\r\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\r\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\r\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\r\n * higher priority.\r\n *\r\n * As an optimization decluttered features from layers with the same `className` are rendered above\r\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\r\n * behavior and place declutterd features with their own layer configure the layer with a `className`\r\n * other than `ol-layer`.\r\n * @property {import(\"../style/Style.js\").StyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor|false} [background] Background color for the layer. If not specified, no\r\n * background will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be\r\n * recreated during animations. This means that no vectors will be shown clipped, but the setting\r\n * will have a performance impact for large amounts of vector data. When set to `false`, batches\r\n * will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be\r\n * recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer for vector tile data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @param {Options} [options] Options.\r\n * @extends {BaseVectorLayer<import(\"../source/VectorTile.js\").default, CanvasVectorTileLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorTileLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = /** @type {Object} */ (Object.assign({}, options));\r\n    delete baseOptions.preload;\r\n    delete baseOptions.useInterimTilesOnError;\r\n\r\n    super(\r\n      /** @type {import(\"./BaseVector.js\").Options<import(\"../source/VectorTile.js\").default>} */ (\r\n        baseOptions\r\n      )\r\n    );\r\n\r\n    /***\r\n     * @type {VectorTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {VectorTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {VectorTileLayerOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    const renderMode = options.renderMode || 'hybrid';\r\n    assert(\r\n      renderMode == 'hybrid' || renderMode == 'vector',\r\n      \"`renderMode` must be `'hybrid'` or `'vector'`\"\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {VectorTileRenderType}\r\n     */\r\n    this.renderMode_ = renderMode;\r\n\r\n    this.setPreload(options.preload ? options.preload : 0);\r\n    this.setUseInterimTilesOnError(\r\n      options.useInterimTilesOnError !== undefined\r\n        ? options.useInterimTilesOnError\r\n        : true\r\n    );\r\n\r\n    /**\r\n     * @return {import(\"./Base.js\").BackgroundColor} Background color.\r\n     * @function\r\n     * @api\r\n     */\r\n    this.getBackground;\r\n\r\n    /**\r\n     * @param {import(\"./Base.js\").BackgroundColor} background Background color.\r\n     * @function\r\n     * @api\r\n     */\r\n    this.setBackground;\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasVectorTileLayerRenderer(this);\r\n  }\r\n\r\n  /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\r\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @api\r\n   */\r\n  getFeatures(pixel) {\r\n    return super.getFeatures(pixel);\r\n  }\r\n\r\n  /**\r\n   * @return {VectorTileRenderType} The render mode.\r\n   */\r\n  getRenderMode() {\r\n    return this.renderMode_;\r\n  }\r\n\r\n  /**\r\n   * Return the level as number to which we will preload tiles up to.\r\n   * @return {number} The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPreload() {\r\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\r\n  }\r\n\r\n  /**\r\n   * Whether we use interim tiles on error.\r\n   * @return {boolean} Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getUseInterimTilesOnError() {\r\n    return /** @type {boolean} */ (\r\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the level as number to which we will preload tiles up to.\r\n   * @param {number} preload The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setPreload(preload) {\r\n    this.set(TileProperty.PRELOAD, preload);\r\n  }\r\n\r\n  /**\r\n   * Set whether we use interim tiles on error.\r\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setUseInterimTilesOnError(useInterimTilesOnError) {\r\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\r\n  }\r\n}\r\n\r\nexport default VectorTileLayer;\r\n", "/**\r\n * Utilities for parsing literal style objects\r\n * @module ol/webgl/styleparser\r\n */\r\nimport {ShaderBuilder} from './ShaderBuilder.js';\r\nimport {\r\n  ValueTypes,\r\n  arrayToGlsl,\r\n  expressionToGlsl,\r\n  getStringNumberEquivalent,\r\n  stringToGlsl,\r\n  uniformNameForVariable,\r\n} from '../style/expressions.js';\r\nimport {asArray} from '../color.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * Packs all components of a color into a two-floats array\r\n * @param {import(\"../color.js\").Color|string} color Color as array of numbers or string\r\n * @return {Array<number>} Vec2 array containing the color in compressed form\r\n */\r\nexport function packColor(color) {\r\n  const array = asArray(color);\r\n  const r = array[0] * 256;\r\n  const g = array[1];\r\n  const b = array[2] * 256;\r\n  const a = Math.round(array[3] * 255);\r\n  return [r + g, b + a];\r\n}\r\n\r\nconst UNPACK_COLOR_FN = `vec4 unpackColor(vec2 packedColor) {\r\n  return fract(packedColor[1] / 256.0) * vec4(\r\n    fract(floor(packedColor[0] / 256.0) / 256.0),\r\n    fract(packedColor[0] / 256.0),\r\n    fract(floor(packedColor[1] / 256.0) / 256.0),\r\n    1.0\r\n  );\r\n}`;\r\n\r\n/**\r\n * @param {ValueTypes} type Value type\r\n * @return {1|2|3|4} The amount of components for this value\r\n */\r\nfunction getGlslSizeFromType(type) {\r\n  if (type === ValueTypes.COLOR) {\r\n    return 2;\r\n  }\r\n  if (type === ValueTypes.NUMBER_ARRAY) {\r\n    return 4;\r\n  }\r\n  return 1;\r\n}\r\n\r\n/**\r\n * @param {ValueTypes} type Value type\r\n * @return {'float'|'vec2'|'vec3'|'vec4'} The corresponding GLSL type for this value\r\n */\r\nfunction getGlslTypeFromType(type) {\r\n  const size = getGlslSizeFromType(type);\r\n  if (size > 1) {\r\n    return /** @type {'vec2'|'vec3'|'vec4'} */ (`vec${size}`);\r\n  }\r\n  return 'float';\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/literal.js\").LiteralStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {import(\"../style/expressions.js\").ParsingContext} vertContext Vertex shader parsing context\r\n * @param {'shape-'|'circle-'|'icon-'} prefix Properties prefix\r\n */\r\nfunction parseCommonSymbolProperties(style, builder, vertContext, prefix) {\r\n  let radius;\r\n  if (`${prefix}radius` in style && prefix !== 'icon-') {\r\n    radius = expressionToGlsl(\r\n      vertContext,\r\n      style[`${prefix}radius`],\r\n      ValueTypes.NUMBER\r\n    );\r\n  } else if (`${prefix}radius1` in style && prefix === 'shape-') {\r\n    radius = expressionToGlsl(\r\n      vertContext,\r\n      style[`${prefix}radius1`],\r\n      ValueTypes.NUMBER\r\n    );\r\n  }\r\n  if (radius !== undefined) {\r\n    if (`${prefix}stroke-width` in style) {\r\n      radius = `(${radius} + ${expressionToGlsl(\r\n        vertContext,\r\n        style[`${prefix}stroke-width`],\r\n        ValueTypes.NUMBER\r\n      )} * 0.5)`;\r\n    }\r\n    builder.setSymbolSizeExpression(`vec2(${radius} * 2. + 0.5)`); // adding some padding for antialiasing\r\n  }\r\n  if (`${prefix}scale` in style) {\r\n    const scale = expressionToGlsl(\r\n      vertContext,\r\n      style[`${prefix}scale`],\r\n      ValueTypes.NUMBER | ValueTypes.NUMBER_ARRAY\r\n    );\r\n    builder.setSymbolSizeExpression(\r\n      `${builder.getSymbolSizeExpression()} * ${scale}`\r\n    );\r\n  }\r\n  if (`${prefix}displacement` in style) {\r\n    builder.setSymbolOffsetExpression(\r\n      expressionToGlsl(\r\n        vertContext,\r\n        style[`${prefix}displacement`],\r\n        ValueTypes.NUMBER_ARRAY\r\n      )\r\n    );\r\n  }\r\n  if (`${prefix}rotation` in style) {\r\n    builder.setSymbolRotationExpression(\r\n      expressionToGlsl(\r\n        vertContext,\r\n        style[`${prefix}rotation`],\r\n        ValueTypes.NUMBER\r\n      )\r\n    );\r\n  }\r\n  if (`${prefix}rotate-with-view` in style) {\r\n    builder.setSymbolRotateWithView(!!style[`${prefix}rotate-with-view`]);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} distanceField The distance field expression\r\n * @param {string|null} fillColor The fill color expression; null if no fill\r\n * @param {string|null} strokeColor The stroke color expression; null if no stroke\r\n * @param {string|null} strokeWidth The stroke width expression; null if no stroke\r\n * @param {string|null} opacity The opacity expression; null if no stroke\r\n * @return {string} The final color expression, based on the distance field and given params\r\n */\r\nfunction getColorFromDistanceField(\r\n  distanceField,\r\n  fillColor,\r\n  strokeColor,\r\n  strokeWidth,\r\n  opacity\r\n) {\r\n  let color = 'vec4(0.)';\r\n  if (fillColor !== null) {\r\n    color = fillColor;\r\n  }\r\n  if (strokeColor !== null && strokeWidth !== null) {\r\n    const strokeFillRatio = `smoothstep(-${strokeWidth} + 0.63, -${strokeWidth} - 0.58, ${distanceField})`;\r\n    color = `mix(${strokeColor}, ${color}, ${strokeFillRatio})`;\r\n  }\r\n  const shapeOpacity = `(1.0 - smoothstep(-0.63, 0.58, ${distanceField}))`;\r\n  let result = `${color} * ${shapeOpacity}`;\r\n  if (opacity !== null) {\r\n    result = `${result} * ${opacity}`;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/literal.js\").LiteralStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../style/expressions.js\").ParsingContext} vertContext Vertex shader parsing context\r\n * @param {import(\"../style/expressions.js\").ParsingContext} fragContext Fragment shader parsing context\r\n */\r\nfunction parseCircleProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext\r\n) {\r\n  // this function takes in screen coordinates in pixels and returns the signed distance field\r\n  // (0 on the boundary, negative inside the circle, positive outside, values in pixels)\r\n  fragContext.functions[\r\n    'circleDistanceField'\r\n  ] = `float circleDistanceField(vec2 point, float radius) {\r\n  return length(point) - radius;\r\n}`;\r\n\r\n  parseCommonSymbolProperties(style, builder, vertContext, 'circle-');\r\n\r\n  // OPACITY\r\n  let opacity = null;\r\n  if ('circle-opacity' in style) {\r\n    opacity = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-opacity'],\r\n      ValueTypes.NUMBER\r\n    );\r\n  }\r\n\r\n  // SCALE\r\n  let currentPoint = 'coordsPx';\r\n  if ('circle-scale' in style) {\r\n    const scale = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-scale'],\r\n      ValueTypes.NUMBER | ValueTypes.NUMBER_ARRAY\r\n    );\r\n    currentPoint = `coordsPx / ${scale}`;\r\n  }\r\n\r\n  // FILL COLOR\r\n  let fillColor = null;\r\n  if ('circle-fill-color' in style) {\r\n    fillColor = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-fill-color'],\r\n      ValueTypes.COLOR\r\n    );\r\n  }\r\n\r\n  // STROKE COLOR\r\n  let strokeColor = null;\r\n  if ('circle-stroke-color' in style) {\r\n    strokeColor = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-stroke-color'],\r\n      ValueTypes.COLOR\r\n    );\r\n  }\r\n\r\n  // RADIUS\r\n  let radius = expressionToGlsl(\r\n    fragContext,\r\n    style['circle-radius'],\r\n    ValueTypes.NUMBER\r\n  );\r\n\r\n  // STROKE WIDTH\r\n  let strokeWidth = null;\r\n  if ('circle-stroke-width' in style) {\r\n    strokeWidth = expressionToGlsl(\r\n      fragContext,\r\n      style['circle-stroke-width'],\r\n      ValueTypes.NUMBER\r\n    );\r\n    radius = `(${radius} + ${strokeWidth} * 0.5)`;\r\n  }\r\n\r\n  // FINAL COLOR\r\n  const distanceField = `circleDistanceField(${currentPoint}, ${radius})`;\r\n  const colorExpression = getColorFromDistanceField(\r\n    distanceField,\r\n    fillColor,\r\n    strokeColor,\r\n    strokeWidth,\r\n    opacity\r\n  );\r\n  builder.setSymbolColorExpression(colorExpression);\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/literal.js\").LiteralStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../style/expressions.js\").ParsingContext} vertContext Vertex shader parsing context\r\n * @param {import(\"../style/expressions.js\").ParsingContext} fragContext Fragment shader parsing context\r\n */\r\nfunction parseShapeProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext\r\n) {\r\n  fragContext.functions['round'] = `float round(float v) {\r\n  return sign(v) * floor(abs(v) + 0.5);\r\n}`;\r\n\r\n  // these functions take in screen coordinates in pixels and returns the signed distance field\r\n  // (0 on the boundary, negative inside the circle, positive outside, values in pixels)\r\n  // inspired by https://github.com/zranger1/PixelblazePatterns/blob/master/Toolkit/sdf2d.md#n-sided-regular-polygon\r\n  fragContext.functions[\r\n    'starDistanceField'\r\n  ] = `float starDistanceField(vec2 point, float numPoints, float radiusIn, float radiusOut, float angle) {\r\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\r\n  float c = cos(startAngle);\r\n  float s = sin(startAngle);\r\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y); \r\n  float alpha = TWO_PI / numPoints; // the angle of one sector\r\n  float beta = atan(pointRotated.y, pointRotated.x);\r\n  float gamma = round(beta / alpha) * alpha; // angle in sector\r\n  c = cos(-gamma);\r\n  s = sin(-gamma);\r\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\r\n  vec2 tipToPoint = inSector + vec2(-radiusOut, 0.);\r\n  vec2 edgeNormal = vec2(radiusIn * sin(alpha * 0.5), -radiusIn * cos(alpha * 0.5) + radiusOut);\r\n  return dot(normalize(edgeNormal), tipToPoint);\r\n}`;\r\n  fragContext.functions[\r\n    'regularDistanceField'\r\n  ] = `float regularDistanceField(vec2 point, float numPoints, float radius, float angle) {\r\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\r\n  float c = cos(startAngle);\r\n  float s = sin(startAngle);\r\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y); \r\n  float alpha = TWO_PI / numPoints; // the angle of one sector\r\n  float radiusIn = radius * cos(PI / numPoints);\r\n  float beta = atan(pointRotated.y, pointRotated.x);\r\n  float gamma = round((beta - alpha * 0.5) / alpha) * alpha + alpha * 0.5; // angle in sector from mid\r\n  c = cos(-gamma);\r\n  s = sin(-gamma);\r\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\r\n  return inSector.x - radiusIn;\r\n}`;\r\n\r\n  parseCommonSymbolProperties(style, builder, vertContext, 'shape-');\r\n\r\n  // OPACITY\r\n  let opacity = null;\r\n  if ('shape-opacity' in style) {\r\n    opacity = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-opacity'],\r\n      ValueTypes.NUMBER\r\n    );\r\n  }\r\n\r\n  // SCALE\r\n  let currentPoint = 'coordsPx';\r\n  if ('shape-scale' in style) {\r\n    const scale = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-scale'],\r\n      ValueTypes.NUMBER | ValueTypes.NUMBER_ARRAY\r\n    );\r\n    currentPoint = `coordsPx / ${scale}`;\r\n  }\r\n\r\n  // FILL COLOR\r\n  let fillColor = null;\r\n  if ('shape-fill-color' in style) {\r\n    fillColor = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-fill-color'],\r\n      ValueTypes.COLOR\r\n    );\r\n  }\r\n\r\n  // STROKE COLOR\r\n  let strokeColor = null;\r\n  if ('shape-stroke-color' in style) {\r\n    strokeColor = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-stroke-color'],\r\n      ValueTypes.COLOR\r\n    );\r\n  }\r\n\r\n  // STROKE WIDTH\r\n  let strokeWidth = null;\r\n  if ('shape-stroke-width' in style) {\r\n    strokeWidth = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-stroke-width'],\r\n      ValueTypes.NUMBER\r\n    );\r\n  }\r\n\r\n  // SHAPE TYPE\r\n  const numPoints = expressionToGlsl(\r\n    fragContext,\r\n    style['shape-points'],\r\n    ValueTypes.NUMBER\r\n  );\r\n  let angle = '0.';\r\n  if ('shape-angle' in style) {\r\n    angle = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-angle'],\r\n      ValueTypes.NUMBER\r\n    );\r\n  }\r\n  let shapeField;\r\n  if ('shape-radius' in style) {\r\n    let radius = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-radius'],\r\n      ValueTypes.NUMBER\r\n    );\r\n    if (strokeWidth !== null) {\r\n      radius = `${radius} + ${strokeWidth} * 0.5`;\r\n    }\r\n    shapeField = `regularDistanceField(${currentPoint}, ${numPoints}, ${radius}, ${angle})`;\r\n  } else {\r\n    let radiusOuter = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-radius1'],\r\n      ValueTypes.NUMBER\r\n    );\r\n    let radiusInner = expressionToGlsl(\r\n      fragContext,\r\n      style['shape-radius2'],\r\n      ValueTypes.NUMBER\r\n    );\r\n    if (strokeWidth !== null) {\r\n      radiusOuter = `${radiusOuter} + ${strokeWidth} * 0.5`;\r\n      radiusInner = `${radiusInner} + ${strokeWidth} * 0.5`;\r\n    }\r\n    shapeField = `starDistanceField(${currentPoint}, ${numPoints}, ${radiusInner}, ${radiusOuter}, ${angle})`;\r\n  }\r\n\r\n  // FINAL COLOR\r\n  const colorExpression = getColorFromDistanceField(\r\n    shapeField,\r\n    fillColor,\r\n    strokeColor,\r\n    strokeWidth,\r\n    opacity\r\n  );\r\n  builder.setSymbolColorExpression(colorExpression);\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/literal.js\").LiteralStyle} style Style\r\n * @param {ShaderBuilder} builder Shader builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../style/expressions.js\").ParsingContext} vertContext Vertex shader parsing context\r\n * @param {import(\"../style/expressions.js\").ParsingContext} fragContext Fragment shader parsing context\r\n */\r\nfunction parseIconProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext\r\n) {\r\n  fragContext.functions[\r\n    'samplePremultiplied'\r\n  ] = `vec4 samplePremultiplied(sampler2D sampler, vec2 texCoord) {\r\n  vec4 color = texture2D(sampler, texCoord);\r\n  return vec4(color.rgb * color.a, color.a);\r\n}`;\r\n\r\n  // COLOR\r\n  let color = 'vec4(1.0)';\r\n  if ('icon-color' in style) {\r\n    color = expressionToGlsl(\r\n      fragContext,\r\n      style['icon-color'],\r\n      ValueTypes.COLOR\r\n    );\r\n  }\r\n\r\n  // OPACITY\r\n  if ('icon-opacity' in style) {\r\n    color = `${color} * ${expressionToGlsl(\r\n      fragContext,\r\n      style['icon-opacity'],\r\n      ValueTypes.NUMBER\r\n    )}`;\r\n  }\r\n\r\n  // IMAGE & SIZE\r\n  let image;\r\n  let size;\r\n  const textureId = getUid(style);\r\n  if ('icon-src' in style) {\r\n    image = new Image();\r\n    image.crossOrigin =\r\n      style['icon-cross-origin'] === undefined\r\n        ? 'anonymous'\r\n        : style['icon-cross-origin'];\r\n    image.src = style['icon-src'];\r\n    // the size is provided asynchronously using a uniform\r\n    uniforms[`u_texture${textureId}_size`] = () => {\r\n      return image.complete ? [image.width, image.height] : [0, 0];\r\n    };\r\n    size = `u_texture${textureId}_size`;\r\n    builder.addUniform(`vec2 u_texture${textureId}_size`);\r\n  } else {\r\n    image = style['icon-img'];\r\n    if (image instanceof HTMLImageElement) {\r\n      if (image.complete && image.width && image.height) {\r\n        size = arrayToGlsl([image.width, image.height]);\r\n      } else {\r\n        // the size is provided asynchronously using a uniform\r\n        uniforms[`u_texture${textureId}_size`] = () => {\r\n          return image.complete ? [image.width, image.height] : [0, 0];\r\n        };\r\n        size = `u_texture${textureId}_size`;\r\n      }\r\n    } else {\r\n      size = arrayToGlsl([image.width, image.height]);\r\n    }\r\n  }\r\n  uniforms[`u_texture${textureId}`] = image;\r\n  builder\r\n    .addUniform(`sampler2D u_texture${textureId}`)\r\n    .setSymbolColorExpression(\r\n      `${color} * samplePremultiplied(u_texture${textureId}, v_texCoord)`\r\n    )\r\n    .setSymbolSizeExpression(size);\r\n\r\n  // override size if width/height were specified\r\n  if ('icon-width' in style && 'icon-height' in style) {\r\n    builder.setSymbolSizeExpression(\r\n      `vec2(${expressionToGlsl(\r\n        vertContext,\r\n        style['icon-width'],\r\n        ValueTypes.NUMBER\r\n      )}, ${expressionToGlsl(\r\n        vertContext,\r\n        style['icon-height'],\r\n        ValueTypes.NUMBER\r\n      )})`\r\n    );\r\n  }\r\n\r\n  // tex coord\r\n  if ('icon-offset' in style && 'icon-size' in style) {\r\n    let offset = expressionToGlsl(\r\n      vertContext,\r\n      style['icon-offset'],\r\n      ValueTypes.NUMBER_ARRAY\r\n    );\r\n    const sampleSize = expressionToGlsl(\r\n      vertContext,\r\n      style['icon-size'],\r\n      ValueTypes.NUMBER_ARRAY\r\n    );\r\n    const fullsize = builder.getSymbolSizeExpression();\r\n    builder.setSymbolSizeExpression(sampleSize);\r\n\r\n    if ('icon-offset-origin' in style) {\r\n      switch (style['icon-offset-origin']) {\r\n        case 'top-right':\r\n          offset = `vec2(v_quadSizePx.x, 0.) + ${sampleSize} * vec2(-1., 0.) + ${offset} * vec2(-1., 1.)`;\r\n          break;\r\n        case 'bottom-left':\r\n          offset = `vec2(0., v_quadSizePx.y) + ${sampleSize} * vec2(0., -1.) + ${offset} * vec2(1., -1.)`;\r\n          break;\r\n        case 'bottom-right':\r\n          offset = `v_quadSizePx - ${sampleSize} - ${offset}`;\r\n          break;\r\n        default: // pass\r\n      }\r\n    }\r\n    builder.setTextureCoordinateExpression(\r\n      `(vec4((${offset}).xyxy) + vec4(0., 0., ${sampleSize})) / (${fullsize}).xyxy`\r\n    );\r\n  }\r\n\r\n  parseCommonSymbolProperties(style, builder, vertContext, 'icon-');\r\n\r\n  if ('icon-anchor' in style) {\r\n    const anchor = expressionToGlsl(\r\n      vertContext,\r\n      style['icon-anchor'],\r\n      ValueTypes.NUMBER_ARRAY\r\n    );\r\n    let scale = `1.0`;\r\n    if (`icon-scale` in style) {\r\n      scale = expressionToGlsl(\r\n        vertContext,\r\n        style[`icon-scale`],\r\n        ValueTypes.NUMBER | ValueTypes.NUMBER_ARRAY\r\n      );\r\n    }\r\n    let shiftPx;\r\n    if (\r\n      style['icon-anchor-x-units'] === 'pixels' &&\r\n      style['icon-anchor-y-units'] === 'pixels'\r\n    ) {\r\n      shiftPx = `${anchor} * ${scale}`;\r\n    } else if (style['icon-anchor-x-units'] === 'pixels') {\r\n      shiftPx = `${anchor} * vec2(vec2(${scale}).x, v_quadSizePx.y)`;\r\n    } else if (style['icon-anchor-y-units'] === 'pixels') {\r\n      shiftPx = `${anchor} * vec2(v_quadSizePx.x, vec2(${scale}).x)`;\r\n    } else {\r\n      shiftPx = `${anchor} * v_quadSizePx`;\r\n    }\r\n    // default origin is top-left\r\n    let offsetPx = `v_quadSizePx * vec2(0.5, -0.5) + ${shiftPx} * vec2(-1., 1.)`;\r\n    if ('icon-anchor-origin' in style) {\r\n      switch (style['icon-anchor-origin']) {\r\n        case 'top-right':\r\n          offsetPx = `v_quadSizePx * -0.5 + ${shiftPx}`;\r\n          break;\r\n        case 'bottom-left':\r\n          offsetPx = `v_quadSizePx * 0.5 - ${shiftPx}`;\r\n          break;\r\n        case 'bottom-right':\r\n          offsetPx = `v_quadSizePx * vec2(-0.5, 0.5) + ${shiftPx} * vec2(1., -1.)`;\r\n          break;\r\n        default: // pass\r\n      }\r\n    }\r\n    builder.setSymbolOffsetExpression(\r\n      `${builder.getSymbolOffsetExpression()} + ${offsetPx}`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/literal.js\").LiteralStyle} style Style\r\n * @param {ShaderBuilder} builder Shader Builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../style/expressions.js\").ParsingContext} vertContext Vertex shader parsing context\r\n * @param {import(\"../style/expressions.js\").ParsingContext} fragContext Fragment shader parsing context\r\n */\r\nfunction parseStrokeProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext\r\n) {\r\n  if ('stroke-color' in style) {\r\n    builder.setStrokeColorExpression(\r\n      expressionToGlsl(fragContext, style['stroke-color'], ValueTypes.COLOR)\r\n    );\r\n  }\r\n\r\n  if ('stroke-width' in style) {\r\n    builder.setStrokeWidthExpression(\r\n      expressionToGlsl(vertContext, style['stroke-width'], ValueTypes.NUMBER)\r\n    );\r\n  }\r\n\r\n  if ('stroke-offset' in style) {\r\n    builder.setStrokeOffsetExpression(\r\n      expressionToGlsl(vertContext, style['stroke-offset'], ValueTypes.NUMBER)\r\n    );\r\n  }\r\n\r\n  if ('stroke-line-cap' in style) {\r\n    builder.setStrokeCapExpression(\r\n      expressionToGlsl(vertContext, style['stroke-line-cap'], ValueTypes.STRING)\r\n    );\r\n  }\r\n\r\n  if ('stroke-line-join' in style) {\r\n    builder.setStrokeJoinExpression(\r\n      expressionToGlsl(\r\n        vertContext,\r\n        style['stroke-line-join'],\r\n        ValueTypes.STRING\r\n      )\r\n    );\r\n  }\r\n\r\n  if ('stroke-miter-limit' in style) {\r\n    builder.setStrokeMiterLimitExpression(\r\n      expressionToGlsl(\r\n        vertContext,\r\n        style['stroke-miter-limit'],\r\n        ValueTypes.NUMBER\r\n      )\r\n    );\r\n  }\r\n\r\n  if ('stroke-line-dash' in style) {\r\n    fragContext.functions[\r\n      'getSingleDashDistance'\r\n    ] = `float getSingleDashDistance(float distance, float radius, float dashOffset, float dashLength, float dashLengthTotal, float capType) {\r\n  float localDistance = mod(distance, dashLengthTotal);\r\n  float distanceSegment = abs(localDistance - dashOffset - dashLength * 0.5) - dashLength * 0.5;\r\n  distanceSegment = min(distanceSegment, dashLengthTotal - localDistance);\r\n  if (capType == ${stringToGlsl('square')}) {\r\n    distanceSegment -= v_width * 0.5;\r\n  } else if (capType == ${stringToGlsl('round')}) {\r\n    distanceSegment = min(distanceSegment, sqrt(distanceSegment * distanceSegment + radius * radius) - v_width * 0.5);\r\n  }\r\n  return distanceSegment;\r\n}`;\r\n\r\n    let dashPattern = style['stroke-line-dash'].map((v) =>\r\n      expressionToGlsl(fragContext, v, ValueTypes.NUMBER)\r\n    );\r\n    // if pattern has odd length, concatenate it with itself to be even\r\n    if (dashPattern.length % 2 === 1) {\r\n      dashPattern = [...dashPattern, ...dashPattern];\r\n    }\r\n\r\n    let offsetExpression = '0.';\r\n    if ('stroke-line-dash-offset' in style) {\r\n      offsetExpression = expressionToGlsl(\r\n        vertContext,\r\n        style['stroke-line-dash-offset'],\r\n        ValueTypes.NUMBER\r\n      );\r\n    }\r\n\r\n    // define a function for this dash specifically (identified using a simple hash)\r\n    // see https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\r\n    let uniqueDashKey = JSON.stringify(style['stroke-line-dash'])\r\n      .split('')\r\n      .reduce((prev, curr) => (prev << 5) - prev + curr.charCodeAt(0), 0);\r\n    uniqueDashKey = uniqueDashKey >>> 0;\r\n    const dashFunctionName = `dashDistanceField_${uniqueDashKey}`;\r\n\r\n    const dashLengthsDef = dashPattern.map(\r\n      (v, i) => `float dashLength${i} = ${v};`\r\n    );\r\n    const totalLengthDef = dashPattern\r\n      .map((v, i) => `dashLength${i}`)\r\n      .join(' + ');\r\n    let currentDashOffset = '0.';\r\n    let distanceExpression = `getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength0, totalDashLength, capType)`;\r\n    for (let i = 2; i < dashPattern.length; i += 2) {\r\n      currentDashOffset = `${currentDashOffset} + dashLength${\r\n        i - 2\r\n      } + dashLength${i - 1}`;\r\n      distanceExpression = `min(${distanceExpression}, getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength${i}, totalDashLength, capType))`;\r\n    }\r\n\r\n    fragContext.functions[\r\n      dashFunctionName\r\n    ] = `float ${dashFunctionName}(float distance, float radius, float capType) {\r\n  ${dashLengthsDef.join('\\n  ')}\r\n  float totalDashLength = ${totalLengthDef};\r\n  return ${distanceExpression};\r\n}`;\r\n    builder.setStrokeDistanceFieldExpression(\r\n      `${dashFunctionName}(currentLengthPx + ${offsetExpression}, currentRadiusPx, capType)`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../style/literal.js\").LiteralStyle} style Style\r\n * @param {ShaderBuilder} builder Shader Builder\r\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\r\n * @param {import(\"../style/expressions.js\").ParsingContext} vertContext Vertex shader parsing context\r\n * @param {import(\"../style/expressions.js\").ParsingContext} fragContext Fragment shader parsing context\r\n */\r\nfunction parseFillProperties(\r\n  style,\r\n  builder,\r\n  uniforms,\r\n  vertContext,\r\n  fragContext\r\n) {\r\n  if ('fill-color' in style) {\r\n    builder.setFillColorExpression(\r\n      expressionToGlsl(fragContext, style['fill-color'], ValueTypes.COLOR)\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} StyleParseResult\r\n * @property {ShaderBuilder} builder Shader builder pre-configured according to a given style\r\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").UniformDefinitions} uniforms Uniform definitions\r\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").AttributeDefinitions} attributes Attribute definitions\r\n */\r\n\r\n/**\r\n * Parses a {@link import(\"../style/literal.js\").LiteralStyle} object and returns a {@link ShaderBuilder}\r\n * object that has been configured according to the given style, as well as `attributes` and `uniforms`\r\n * arrays to be fed to the `WebGLPointsRenderer` class.\r\n *\r\n * Also returns `uniforms` and `attributes` properties as expected by the\r\n * {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\r\n *\r\n * @param {import(\"../style/literal.js\").LiteralStyle} style Literal style.\r\n * @return {StyleParseResult} Result containing shader params, attributes and uniforms.\r\n */\r\nexport function parseLiteralStyle(style) {\r\n  /**\r\n   * @type {import(\"../style/expressions.js\").ParsingContext}\r\n   */\r\n  const vertContext = {\r\n    inFragmentShader: false,\r\n    variables: [],\r\n    attributes: [],\r\n    functions: {},\r\n    style: style,\r\n  };\r\n\r\n  /**\r\n   * @type {import(\"../style/expressions.js\").ParsingContext}\r\n   */\r\n  const fragContext = {\r\n    inFragmentShader: true,\r\n    variables: vertContext.variables,\r\n    attributes: [],\r\n    functions: {},\r\n    style: style,\r\n  };\r\n\r\n  const builder = new ShaderBuilder();\r\n\r\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\r\n  const uniforms = {};\r\n\r\n  if ('icon-src' in style || 'icon-img' in style) {\r\n    parseIconProperties(style, builder, uniforms, vertContext, fragContext);\r\n  } else if ('shape-points' in style) {\r\n    parseShapeProperties(style, builder, uniforms, vertContext, fragContext);\r\n  } else if ('circle-radius' in style) {\r\n    parseCircleProperties(style, builder, uniforms, vertContext, fragContext);\r\n  }\r\n  parseStrokeProperties(style, builder, uniforms, vertContext, fragContext);\r\n  parseFillProperties(style, builder, uniforms, vertContext, fragContext);\r\n\r\n  if (style.filter) {\r\n    const parsedFilter = expressionToGlsl(\r\n      fragContext,\r\n      style.filter,\r\n      ValueTypes.BOOLEAN\r\n    );\r\n    builder.setFragmentDiscardExpression(`!${parsedFilter}`);\r\n  }\r\n\r\n  // define one uniform per variable\r\n  fragContext.variables.forEach(function (variable) {\r\n    const uniformName = uniformNameForVariable(variable.name);\r\n    builder.addUniform(`${getGlslTypeFromType(variable.type)} ${uniformName}`);\r\n\r\n    let callback;\r\n    if (variable.type === ValueTypes.STRING) {\r\n      callback = () =>\r\n        getStringNumberEquivalent(\r\n          /** @type {string} */ (style.variables[variable.name])\r\n        );\r\n    } else if (variable.type === ValueTypes.COLOR) {\r\n      callback = () =>\r\n        packColor([\r\n          ...asArray(\r\n            /** @type {string|Array<number>} */ (\r\n              style.variables[variable.name]\r\n            ) || '#eee'\r\n          ),\r\n        ]);\r\n    } else if (variable.type === ValueTypes.BOOLEAN) {\r\n      callback = () =>\r\n        /** @type {boolean} */ (style.variables[variable.name]) ? 1.0 : 0.0;\r\n    } else {\r\n      callback = () => /** @type {number} */ (style.variables[variable.name]);\r\n    }\r\n    uniforms[uniformName] = callback;\r\n  });\r\n\r\n  // for each feature attribute used in the fragment shader, define a varying that will be used to pass data\r\n  // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)\r\n  fragContext.attributes.forEach(function (attribute) {\r\n    if (!vertContext.attributes.find((a) => a.name === attribute.name)) {\r\n      vertContext.attributes.push(attribute);\r\n    }\r\n    let type = getGlslTypeFromType(attribute.type);\r\n    let expression = `a_${attribute.name}`;\r\n    if (attribute.type === ValueTypes.COLOR) {\r\n      type = 'vec4';\r\n      expression = `unpackColor(${expression})`;\r\n      builder.addVertexShaderFunction(UNPACK_COLOR_FN);\r\n    }\r\n    builder.addVarying(`v_${attribute.name}`, type, expression);\r\n  });\r\n\r\n  // for each feature attribute used in the vertex shader, define an attribute in the vertex shader.\r\n  vertContext.attributes.forEach(function (attribute) {\r\n    builder.addAttribute(\r\n      `${getGlslTypeFromType(attribute.type)} a_${attribute.name}`\r\n    );\r\n  });\r\n\r\n  const attributes = vertContext.attributes.map(function (attribute) {\r\n    let callback;\r\n    if (attribute.callback) {\r\n      callback = attribute.callback;\r\n    } else if (attribute.type === ValueTypes.STRING) {\r\n      callback = (feature) =>\r\n        getStringNumberEquivalent(feature.get(attribute.name));\r\n    } else if (attribute.type === ValueTypes.COLOR) {\r\n      callback = (feature) =>\r\n        packColor([...asArray(feature.get(attribute.name) || '#eee')]);\r\n    } else if (attribute.type === ValueTypes.BOOLEAN) {\r\n      callback = (feature) => (feature.get(attribute.name) ? 1.0 : 0.0);\r\n    } else {\r\n      callback = (feature) => feature.get(attribute.name);\r\n    }\r\n\r\n    return {\r\n      name: attribute.name,\r\n      size: getGlslSizeFromType(attribute.type),\r\n      callback,\r\n    };\r\n  });\r\n\r\n  // add functions that were collected in the parsing contexts\r\n  for (const functionName in vertContext.functions) {\r\n    builder.addVertexShaderFunction(vertContext.functions[functionName]);\r\n  }\r\n  for (const functionName in fragContext.functions) {\r\n    builder.addFragmentShaderFunction(fragContext.functions[functionName]);\r\n  }\r\n\r\n  return {\r\n    builder: builder,\r\n    attributes: attributes.reduce(\r\n      (prev, curr) => ({\r\n        ...prev,\r\n        [curr.name]: {callback: curr.callback, size: curr.size},\r\n      }),\r\n      {}\r\n    ),\r\n    uniforms: uniforms,\r\n  };\r\n}\r\n", "/**\r\n * @module ol/layer/WebGLPoints\r\n */\r\nimport Layer from './Layer.js';\r\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\r\nimport {parseLiteralStyle} from '../webgl/styleparser.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\r\n * @typedef {Object} Options\r\n * @property {import('../style/literal.js').LiteralStyle} style Literal style to apply to the layer features.\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {VectorSourceType} [source] Point source.\r\n * @property {boolean} [disableHitDetection=false] Setting this to true will provide a slight performance boost, but will\r\n * prevent all hit detection on the layer.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer optimized for rendering large point datasets. Takes a `style` property which\r\n * is a serializable JSON object describing how the layer should be rendered.\r\n *\r\n * Here are a few samples of literal style objects:\r\n * ```js\r\n * const style = {\r\n *   'circle-radius': 8,\r\n *   'circle-fill-color': '#33AAFF',\r\n *   'circle-opacity': 0.9\r\n * }\r\n * ```\r\n *\r\n * ```js\r\n * const style = {\r\n *   'icon-src': '../static/exclamation-mark.png',\r\n *   'icon-offset': [0, 12],\r\n *   'icon-width': 4,\r\n *   'icon-height': 8\r\n * }\r\n * ```\r\n *\r\n * **Important: a `WebGLPoints` layer must be manually disposed when removed, otherwise the underlying WebGL context\r\n * will not be garbage collected.**\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<import(\"../geom/Point.js\").default>} VectorSourceType\r\n * @extends {Layer<VectorSourceType, WebGLPointsLayerRenderer>}\r\n * @fires import(\"../render/Event.js\").RenderEvent\r\n */\r\nclass WebGLPointsLayer extends Layer {\r\n  /**\r\n   * @param {Options<VectorSourceType>} options Options.\r\n   */\r\n  constructor(options) {\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../webgl/styleparser.js').StyleParseResult}\r\n     */\r\n    this.parseResult_ = parseLiteralStyle(options.style);\r\n\r\n    /**\r\n     * @type {Object<string, (string|number|Array<number>|boolean)>}\r\n     * @private\r\n     */\r\n    this.styleVariables_ = options.style.variables || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hitDetectionDisabled_ = !!options.disableHitDetection;\r\n  }\r\n\r\n  createRenderer() {\r\n    const attributes = Object.keys(this.parseResult_.attributes).map(\r\n      (name) => ({\r\n        name,\r\n        ...this.parseResult_.attributes[name],\r\n      })\r\n    );\r\n    return new WebGLPointsLayerRenderer(this, {\r\n      vertexShader: this.parseResult_.builder.getSymbolVertexShader(),\r\n      fragmentShader: this.parseResult_.builder.getSymbolFragmentShader(),\r\n      hitDetectionEnabled: !this.hitDetectionDisabled_,\r\n      uniforms: this.parseResult_.uniforms,\r\n      attributes:\r\n        /** @type {Array<import('../renderer/webgl/PointsLayer.js').CustomAttribute>} */ (\r\n          attributes\r\n        ),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update any variables used by the layer style and trigger a re-render.\r\n   * @param {Object<string, number>} variables Variables to update.\r\n   */\r\n  updateStyleVariables(variables) {\r\n    Object.assign(this.styleVariables_, variables);\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default WebGLPointsLayer;\r\n", "/**\r\n * @module ol/layer/WebGLTile\r\n */\r\nimport BaseTileLayer from './BaseTile.js';\r\nimport LayerProperty from '../layer/Property.js';\r\nimport WebGLTileLayerRenderer, {\r\n  Attributes,\r\n  Uniforms,\r\n} from '../renderer/webgl/TileLayer.js';\r\nimport {\r\n  PALETTE_TEXTURE_ARRAY,\r\n  ValueTypes,\r\n  expressionToGlsl,\r\n  getStringNumberEquivalent,\r\n  uniformNameForVariable,\r\n} from '../style/expressions.js';\r\n\r\n/**\r\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\r\n */\r\n\r\n/**\r\n * @typedef {Object} Style\r\n * Translates tile data to rendered pixels.\r\n *\r\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\r\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\r\n * {@link import(\"../style/expressions.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\r\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\r\n * @property {import(\"../style/expressions.js\").ExpressionValue} [color] An expression applied to color values.\r\n * @property {import(\"../style/expressions.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\r\n * the layer brightness.  Values range from -1 to 1.\r\n * @property {import(\"../style/expressions.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\r\n * the layer contrast.  Values range from -1 to 1.\r\n * @property {import(\"../style/expressions.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\r\n * the layer exposure.  Values range from -1 to 1.\r\n * @property {import(\"../style/expressions.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\r\n * the layer saturation.  Values range from -1 to 1.\r\n * @property {import(\"../style/expressions.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\r\n * Values range from 0 to infinity.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Style} [style] Style to apply to the layer.\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {SourceType} [source] Source for this layer.\r\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\r\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\r\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\r\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\r\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link module:ol/Map~Map#addLayer}.\r\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\r\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\r\n * two zoom levels worth of tiles.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ParsedStyle\r\n * @property {string} vertexShader The vertex shader.\r\n * @property {string} fragmentShader The fragment shader.\r\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\r\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\r\n */\r\n\r\n/**\r\n * @param {Style} style The layer style.\r\n * @param {number} [bandCount] The number of bands.\r\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\r\n */\r\nfunction parseStyle(style, bandCount) {\r\n  const vertexShader = `\r\n    attribute vec2 ${Attributes.TEXTURE_COORD};\r\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\r\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\r\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\r\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\r\n    uniform float ${Uniforms.DEPTH};\r\n\r\n    varying vec2 v_textureCoord;\r\n    varying vec2 v_mapCoord;\r\n\r\n    void main() {\r\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\r\n      v_mapCoord = vec2(\r\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\r\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\r\n      );\r\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\r\n    }\r\n  `;\r\n\r\n  /**\r\n   * @type {import(\"../style/expressions.js\").ParsingContext}\r\n   */\r\n  const context = {\r\n    inFragmentShader: true,\r\n    variables: [],\r\n    attributes: [],\r\n    functions: {},\r\n    bandCount: bandCount,\r\n    style: style,\r\n  };\r\n\r\n  const pipeline = [];\r\n\r\n  if (style.color !== undefined) {\r\n    const color = expressionToGlsl(context, style.color, ValueTypes.COLOR);\r\n    pipeline.push(`color = ${color};`);\r\n  }\r\n\r\n  if (style.contrast !== undefined) {\r\n    const contrast = expressionToGlsl(\r\n      context,\r\n      style.contrast,\r\n      ValueTypes.NUMBER\r\n    );\r\n    pipeline.push(\r\n      `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\r\n    );\r\n  }\r\n\r\n  if (style.exposure !== undefined) {\r\n    const exposure = expressionToGlsl(\r\n      context,\r\n      style.exposure,\r\n      ValueTypes.NUMBER\r\n    );\r\n    pipeline.push(\r\n      `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\r\n    );\r\n  }\r\n\r\n  if (style.saturation !== undefined) {\r\n    const saturation = expressionToGlsl(\r\n      context,\r\n      style.saturation,\r\n      ValueTypes.NUMBER\r\n    );\r\n    pipeline.push(`\r\n      float saturation = ${saturation} + 1.0;\r\n      float sr = (1.0 - saturation) * 0.2126;\r\n      float sg = (1.0 - saturation) * 0.7152;\r\n      float sb = (1.0 - saturation) * 0.0722;\r\n      mat3 saturationMatrix = mat3(\r\n        sr + saturation, sr, sr,\r\n        sg, sg + saturation, sg,\r\n        sb, sb, sb + saturation\r\n      );\r\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\r\n    `);\r\n  }\r\n\r\n  if (style.gamma !== undefined) {\r\n    const gamma = expressionToGlsl(context, style.gamma, ValueTypes.NUMBER);\r\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\r\n  }\r\n\r\n  if (style.brightness !== undefined) {\r\n    const brightness = expressionToGlsl(\r\n      context,\r\n      style.brightness,\r\n      ValueTypes.NUMBER\r\n    );\r\n    pipeline.push(\r\n      `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`\r\n    );\r\n  }\r\n\r\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\r\n  const uniforms = {};\r\n\r\n  const numVariables = context.variables.length;\r\n  if (numVariables > 1 && !style.variables) {\r\n    throw new Error(\r\n      `Missing variables in style (expected ${context.variables})`\r\n    );\r\n  }\r\n\r\n  for (let i = 0; i < numVariables; ++i) {\r\n    const variable = context.variables[i];\r\n    if (!(variable.name in style.variables)) {\r\n      throw new Error(`Missing '${variable.name}' in style variables`);\r\n    }\r\n    const uniformName = uniformNameForVariable(variable.name);\r\n    uniforms[uniformName] = function () {\r\n      let value = style.variables[variable.name];\r\n      if (typeof value === 'string') {\r\n        value = getStringNumberEquivalent(value);\r\n      }\r\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\r\n    };\r\n  }\r\n\r\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\r\n    return `uniform float ${name};`;\r\n  });\r\n\r\n  const textureCount = Math.ceil(bandCount / 4);\r\n  uniformDeclarations.push(\r\n    `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`\r\n  );\r\n\r\n  if (context.paletteTextures) {\r\n    uniformDeclarations.push(\r\n      `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`\r\n    );\r\n  }\r\n\r\n  const functionDefintions = Object.keys(context.functions).map(function (\r\n    name\r\n  ) {\r\n    return context.functions[name];\r\n  });\r\n\r\n  const fragmentShader = `\r\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n    #else\r\n    precision mediump float;\r\n    #endif\r\n\r\n    varying vec2 v_textureCoord;\r\n    varying vec2 v_mapCoord;\r\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\r\n    uniform float ${Uniforms.TRANSITION_ALPHA};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\r\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\r\n    uniform float ${Uniforms.RESOLUTION};\r\n    uniform float ${Uniforms.ZOOM};\r\n\r\n    ${uniformDeclarations.join('\\n')}\r\n\r\n    ${functionDefintions.join('\\n')}\r\n\r\n    void main() {\r\n      if (\r\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\r\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\r\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\r\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\r\n      ) {\r\n        discard;\r\n      }\r\n\r\n      vec4 color = texture2D(${\r\n        Uniforms.TILE_TEXTURE_ARRAY\r\n      }[0],  v_textureCoord);\r\n\r\n      ${pipeline.join('\\n')}\r\n\r\n      gl_FragColor = color;\r\n      gl_FragColor.rgb *= gl_FragColor.a;\r\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\r\n    }`;\r\n\r\n  return {\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader,\r\n    uniforms: uniforms,\r\n    paletteTextures: context.paletteTextures,\r\n  };\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\r\n * @fires import(\"../render/Event.js\").RenderEvent\r\n * @api\r\n */\r\nclass WebGLTileLayer extends BaseTileLayer {\r\n  /**\r\n   * @param {Options} options Tile layer options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? Object.assign({}, options) : {};\r\n\r\n    const style = options.style || {};\r\n    delete options.style;\r\n\r\n    const cacheSize = options.cacheSize;\r\n    delete options.cacheSize;\r\n\r\n    super(options);\r\n\r\n    /**\r\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\r\n     * @private\r\n     */\r\n    this.sources_ = options.sources;\r\n\r\n    /**\r\n     * @type {SourceType|null}\r\n     * @private\r\n     */\r\n    this.renderedSource_ = null;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.renderedResolution_ = NaN;\r\n\r\n    /**\r\n     * @type {Style}\r\n     * @private\r\n     */\r\n    this.style_ = style;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.cacheSize_ = cacheSize;\r\n\r\n    /**\r\n     * @type {Object<string, (string|number)>}\r\n     * @private\r\n     */\r\n    this.styleVariables_ = this.style_.variables || {};\r\n\r\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\r\n  }\r\n\r\n  /**\r\n   * Gets the sources for this layer, for a given extent and resolution.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @return {Array<SourceType>} Sources.\r\n   */\r\n  getSources(extent, resolution) {\r\n    const source = this.getSource();\r\n    return this.sources_\r\n      ? typeof this.sources_ === 'function'\r\n        ? this.sources_(extent, resolution)\r\n        : this.sources_\r\n      : source\r\n      ? [source]\r\n      : [];\r\n  }\r\n\r\n  /**\r\n   * @return {SourceType} The source being rendered.\r\n   */\r\n  getRenderSource() {\r\n    return this.renderedSource_ || this.getSource();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   */\r\n  getSourceState() {\r\n    const source = this.getRenderSource();\r\n    return source ? source.getState() : 'undefined';\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSourceUpdate_() {\r\n    if (this.hasRenderer()) {\r\n      this.getRenderer().clearCache();\r\n    }\r\n    if (this.getSource()) {\r\n      this.setStyle(this.style_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {number} The number of source bands.\r\n   */\r\n  getSourceBandCount_() {\r\n    const max = Number.MAX_SAFE_INTEGER;\r\n    const sources = this.getSources([-max, -max, max, max], max);\r\n    return sources && sources.length && 'bandCount' in sources[0]\r\n      ? sources[0].bandCount\r\n      : 4;\r\n  }\r\n\r\n  createRenderer() {\r\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\r\n\r\n    return new WebGLTileLayerRenderer(this, {\r\n      vertexShader: parsedStyle.vertexShader,\r\n      fragmentShader: parsedStyle.fragmentShader,\r\n      uniforms: parsedStyle.uniforms,\r\n      cacheSize: this.cacheSize_,\r\n      paletteTextures: parsedStyle.paletteTextures,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\r\n   * @param {Array<SourceType>} sources Sources.\r\n   * @return {HTMLElement} Canvas.\r\n   */\r\n  renderSources(frameState, sources) {\r\n    const layerRenderer = this.getRenderer();\r\n    let canvas;\r\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\r\n      this.renderedSource_ = sources[i];\r\n      if (layerRenderer.prepareFrame(frameState)) {\r\n        canvas = layerRenderer.renderFrame(frameState);\r\n      }\r\n    }\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\r\n   * for rendering its content.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  render(frameState, target) {\r\n    this.rendered = true;\r\n    const viewState = frameState.viewState;\r\n    const sources = this.getSources(frameState.extent, viewState.resolution);\r\n    let ready = true;\r\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\r\n      const source = sources[i];\r\n      const sourceState = source.getState();\r\n      if (sourceState == 'loading') {\r\n        const onChange = () => {\r\n          if (source.getState() == 'ready') {\r\n            source.removeEventListener('change', onChange);\r\n            this.changed();\r\n          }\r\n        };\r\n        source.addEventListener('change', onChange);\r\n      }\r\n      ready = ready && sourceState == 'ready';\r\n    }\r\n    const canvas = this.renderSources(frameState, sources);\r\n    if (this.getRenderer().renderComplete && ready) {\r\n      // Fully rendered, done.\r\n      this.renderedResolution_ = viewState.resolution;\r\n      return canvas;\r\n    }\r\n    // Render sources from previously fully rendered frames\r\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\r\n      const altSources = this.getSources(\r\n        frameState.extent,\r\n        this.renderedResolution_\r\n      ).filter((source) => !sources.includes(source));\r\n      if (altSources.length > 0) {\r\n        return this.renderSources(frameState, altSources);\r\n      }\r\n    }\r\n    return canvas;\r\n  }\r\n\r\n  /**\r\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\r\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\r\n   * this method may be called instead.  Note that calling this method will also replace\r\n   * any previously set variables, so the new style also needs to include new variables,\r\n   * if needed.\r\n   * @param {Style} style The new style.\r\n   */\r\n  setStyle(style) {\r\n    this.styleVariables_ = style.variables || {};\r\n    this.style_ = style;\r\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\r\n    const renderer = this.getRenderer();\r\n    renderer.reset({\r\n      vertexShader: parsedStyle.vertexShader,\r\n      fragmentShader: parsedStyle.fragmentShader,\r\n      uniforms: parsedStyle.uniforms,\r\n    });\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Update any variables used by the layer style and trigger a re-render.\r\n   * @param {Object<string, number>} variables Variables to update.\r\n   * @api\r\n   */\r\n  updateStyleVariables(variables) {\r\n    Object.assign(this.styleVariables_, variables);\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Clean up underlying WebGL resources.\r\n * @function\r\n * @api\r\n */\r\nWebGLTileLayer.prototype.dispose;\r\n\r\nexport default WebGLTileLayer;\r\n"],
  "mappings": "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",
  "names": ["earcut", "equals", "intersects", "p1", "p2", "context", "context", "empty", "fillInstruction", "p1", "p2", "p3", "scale", "scale", "measureAndCacheTextWidth", "rotate", "line", "scale", "text", "p1", "p2", "p3", "p4", "fillInstruction", "strokeInstruction", "intersects", "i", "ii", "i", "result", "i", "geometry", "imageReplay", "Layer_default", "EventType_default", "wrapX", "extent", "userExtent", "Vector_default", "Vector_default", "EventType_default", "equals", "isEmpty", "clone", "wrapX", "p1", "p2", "buffer", "create", "releaseCanvas", "create", "options", "buffer", "Layer_default", "EventType_default", "create", "Layer_default", "create", "equals", "offset", "buffer", "Layer_default", "create", "createOrUpdate", "isEmpty", "DataTile_default", "frameState", "Uniforms", "DataTile_default", "TileLayer_default", "Uniforms", "createDefaultStyle", "createDefaultStyle", "Property", "isEmpty", "equals", "executorGroups", "extent", "wrapX", "scale", "Uniforms", "TileLayer_default"]
}
